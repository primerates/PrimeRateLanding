import React, { useState, useEffect, useCallback, useRef, useMemo } from 'react';
import { useLocation } from 'wouter';
import { useForm, useWatch, useFormContext, UseFormReturn, Controller, FormProvider, useController } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { useMutation, useQueryClient } from '@tanstack/react-query';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { ToggleGroup, ToggleGroupItem } from '@/components/ui/toggle-group';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Checkbox } from '@/components/ui/checkbox';
import { Switch } from '@/components/ui/switch';
import { Separator } from '@/components/ui/separator';
import { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';
import { Collapsible, CollapsibleContent, CollapsibleTrigger } from '@/components/ui/collapsible';
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle } from '@/components/ui/alert-dialog';
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';
import { useToast } from '@/hooks/use-toast';
import { ArrowLeft, Plus, Save, Minus, Home, Building, RefreshCw, Loader2, Monitor, Info, DollarSign, RotateCcw, Calculator, StickyNote, ChevronDown, ChevronUp } from 'lucide-react';
import { SiZillow } from 'react-icons/si';
import { MdRealEstateAgent } from 'react-icons/md';
import { FaHome } from 'react-icons/fa';
import { nanoid } from 'nanoid';
import { insertClientSchema, type InsertClient } from '@shared/schema';
import { apiRequest } from '@/lib/queryClient';

// CurrencyInput component that formats only on blur to prevent typing lag
const CurrencyInput = React.memo<{
  form: any;
  name: string;
  placeholder?: string;
  id?: string;
  'data-testid'?: string;
  shadowColor?: 'green' | 'red' | 'none';
}>(({ form, name, placeholder, id, 'data-testid': dataTestId, shadowColor = 'none' }) => {
  const [localValue, setLocalValue] = useState('');
  const [isFocused, setIsFocused] = useState(false);

  // Sync local value with form value when not focused
  useEffect(() => {
    if (!isFocused) {
      setLocalValue(form.watch(name) || '');
    }
  }, [form.watch(name), isFocused, name]);

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const value = e.target.value.replace(/[^\d.]/g, ''); // Only allow digits and decimal
    setLocalValue(value);
    
    // Update form with raw value for real-time AppraisalIcon updates
    form.setValue(name, value);
  };

  const handleBlur = () => {
    setIsFocused(false);
    const num = parseFloat(localValue) || 0;
    const formatted = num > 0 ? `$${num.toLocaleString('en-US', { minimumFractionDigits: 0, maximumFractionDigits: 0 })}` : '';
    setLocalValue(formatted);
    form.setValue(name, formatted);
  };

  const handleFocus = () => {
    setIsFocused(true);
    const raw = localValue.replace(/[^\d.]/g, ''); // Strip to raw for editing
    setLocalValue(raw);
  };

  // Apply shadow styling based on color - keep border black
  const getShadowClass = () => {
    if (shadowColor === 'green') {
      return 'shadow-lg shadow-green-200';
    } else if (shadowColor === 'red') {
      return 'shadow-lg shadow-red-200';
    }
    return '';
  };

  return (
    <Input
      id={id}
      value={localValue}
      onChange={handleChange}
      onFocus={handleFocus}
      onBlur={handleBlur}
      placeholder={placeholder}
      data-testid={dataTestId}
      className={getShadowClass()}
    />
  );
});

// ToggleIncomeInput component for employer cards with gross/net toggle
const ToggleIncomeInput = React.memo<{
  control: any;
  cardId: string;
  showingNet: boolean;
  grossPath: string;
  netPath: string;
  id?: string;
  'data-testid'?: string;
}>(({ control, cardId, showingNet, grossPath, netPath, id, 'data-testid': dataTestId }) => {
  const fieldPath = showingNet ? netPath : grossPath;
  
  const formValue = useWatch({ control, name: fieldPath as any }) || '';
  
  const displayValue = useMemo(() => {
    if (!formValue) return '';
    const numVal = formValue.replace(/[^\d]/g, '');
    return numVal ? `$${numVal.replace(/\B(?=(\d{3})+(?!\d))/g, ',')}` : '';
  }, [formValue]);
  
  const { field } = useController({
    control,
    name: fieldPath as any,
    defaultValue: '',
  });
  
  const handleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {
    const value = e.target.value.replace(/[^\d]/g, '');
    field.onChange(value);
  }, [field]);
  
  return (
    <Input
      id={id}
      type="text"
      placeholder="$0"
      value={displayValue}
      onChange={handleChange}
      data-testid={dataTestId}
    />
  );
});

// Helper function to calculate color state based on estimated vs appraised values
const getValueComparisonColor = (estimatedValue: string, appraisedValue: string): { iconClass: string; shadowColor: 'green' | 'red' | 'none' } => {
  const parseValue = (value: string) => {
    if (!value) return 0;
    // Handle both raw numbers and formatted currency
    const cleaned = value.replace(/[^\d.]/g, '');
    return cleaned ? parseFloat(cleaned) : 0;
  };

  const estimatedNum = parseValue(estimatedValue || '');
  const appraisedNum = parseValue(appraisedValue || '');

  if (appraisedNum === 0 || estimatedNum === 0) {
    return { iconClass: 'text-black hover:text-gray-600', shadowColor: 'none' };
  } else if (appraisedNum > estimatedNum) {
    return { iconClass: 'text-green-600 hover:text-green-800', shadowColor: 'green' };
  } else if (appraisedNum < estimatedNum) {
    return { iconClass: 'text-red-600 hover:text-red-800', shadowColor: 'red' };
  } else {
    return { iconClass: 'text-black hover:text-gray-600', shadowColor: 'none' };
  }
};

// Helper function to calculate color state based on Back DTI vs Guideline DTI comparison
const getDTIComparisonColor = (backDTI: string, guidelineDTI: string): { labelClass: string; shadowColor: 'green' | 'red' | 'none' } => {
  const parsePercentage = (value: string) => {
    if (!value) return 0;
    // Handle both raw numbers and formatted percentages
    const cleaned = value.replace(/[^\d.]/g, '');
    return cleaned ? parseFloat(cleaned) : 0;
  };

  const backDTINum = parsePercentage(backDTI || '');
  const guidelineDTINum = parsePercentage(guidelineDTI || '');

  if (backDTINum === 0 || guidelineDTINum === 0) {
    return { labelClass: 'text-black', shadowColor: 'none' };
  } else if (backDTINum > guidelineDTINum) {
    return { labelClass: 'text-red-600', shadowColor: 'red' };
  } else if (backDTINum < guidelineDTINum) {
    return { labelClass: 'text-green-600', shadowColor: 'green' };
  } else {
    return { labelClass: 'text-black', shadowColor: 'none' };
  }
};

// Memoized AppraisalIcon component to prevent typing lag
const AppraisalIcon = React.memo<{ index: number; control: any }>(({ index, control }) => {
  const estimatedValue = useWatch({ 
    control, 
    name: `property.properties.${index}.estimatedValue` as const 
  });
  const appraisedValue = useWatch({ 
    control, 
    name: `property.properties.${index}.appraisedValue` as const 
  });

  const { iconClass } = useMemo(() => {
    return getValueComparisonColor(estimatedValue || '', appraisedValue || '');
  }, [estimatedValue, appraisedValue]);

  return <DollarSign className={`h-4 w-4 ${iconClass}`} />;
});

// Memoized BorrowerResidenceTimeCalculator component
const BorrowerResidenceTimeCalculator = React.memo<{ control: any; setValue: any }>(({ control, setValue }) => {
  const fromDate = useWatch({ control, name: 'borrower.residenceAddress.from' }) || '';
  const toDate = useWatch({ control, name: 'borrower.residenceAddress.to' }) || '';

  const { displayValue, years, months } = useMemo(() => {
    if (!fromDate || !toDate) return { displayValue: '', years: 0, months: 0 };

    const from = new Date(fromDate);
    // If toDate is "Present", use current date for calculations
    const to = toDate === 'Present' ? new Date() : new Date(toDate);

    if (isNaN(from.getTime()) || isNaN(to.getTime())) return { displayValue: '', years: 0, months: 0 };

    // Calculate difference in months accounting for days
    let yearsDiff = to.getFullYear() - from.getFullYear();
    let monthsDiff = to.getMonth() - from.getMonth();
    let daysDiff = to.getDate() - from.getDate();
    
    // If the TO day is greater than or equal to FROM day, we're into the next month period
    if (daysDiff >= 0) {
      monthsDiff += 1;
    }
    
    let totalMonths = yearsDiff * 12 + monthsDiff;

    if (totalMonths < 0) return { displayValue: '', years: 0, months: 0 };

    const calcYears = Math.floor(totalMonths / 12);
    const calcMonths = totalMonths % 12;

    // Display with Years or Months suffix based on value
    let display = '';
    if (calcYears >= 1) {
      // Show as Years (e.g., "1.6 Years" or "2 Years")
      const yearValue = calcMonths === 0 ? calcYears.toString() : `${calcYears}.${calcMonths}`;
      display = `${yearValue} Years`;
    } else if (calcMonths > 0) {
      // Show as Months (e.g., "0.4 Months")
      display = `0.${calcMonths} Months`;
    }
    
    return { displayValue: display, years: calcYears, months: calcMonths };
  }, [fromDate, toDate]);

  // Update form values in useEffect to avoid setState during render
  React.useEffect(() => {
    setValue('borrower.yearsAtAddress', years, { shouldDirty: false });
    setValue('borrower.monthsAtAddress', months, { shouldDirty: false });
  }, [years, months, setValue]);

  return (
    <div className="h-9 px-3 py-2 border border-input bg-background rounded-md flex items-center text-sm">
      <span className="text-muted-foreground">{displayValue || '—'}</span>
    </div>
  );
});

const BorrowerPriorResidenceTimeCalculator = React.memo<{ control: any; setValue: any }>(({ control, setValue }) => {
  const fromDate = useWatch({ control, name: 'borrower.priorResidenceAddress.from' }) || '';
  const toDate = useWatch({ control, name: 'borrower.priorResidenceAddress.to' }) || '';

  const { displayValue, years, months } = useMemo(() => {
    if (!fromDate || !toDate) return { displayValue: '', years: 0, months: 0 };

    const from = new Date(fromDate);
    const to = new Date(toDate);

    if (isNaN(from.getTime()) || isNaN(to.getTime())) return { displayValue: '', years: 0, months: 0 };

    let yearsDiff = to.getFullYear() - from.getFullYear();
    let monthsDiff = to.getMonth() - from.getMonth();
    let daysDiff = to.getDate() - from.getDate();
    
    if (daysDiff >= 0) {
      monthsDiff += 1;
    }
    
    let totalMonths = yearsDiff * 12 + monthsDiff;

    if (totalMonths < 0) return { displayValue: '', years: 0, months: 0 };

    const calcYears = Math.floor(totalMonths / 12);
    const calcMonths = totalMonths % 12;

    let display = '';
    if (calcYears >= 1) {
      const yearValue = calcMonths === 0 ? calcYears.toString() : `${calcYears}.${calcMonths}`;
      display = `${yearValue} Years`;
    } else if (calcMonths > 0) {
      display = `0.${calcMonths} Months`;
    }
    
    return { displayValue: display, years: calcYears, months: calcMonths };
  }, [fromDate, toDate]);

  React.useEffect(() => {
    setValue('borrower.priorYearsAtAddress', years, { shouldDirty: false });
    setValue('borrower.priorMonthsAtAddress', months, { shouldDirty: false });
  }, [years, months, setValue]);

  return (
    <div className="h-9 px-3 py-2 border border-input bg-background rounded-md flex items-center text-sm">
      <span className="text-muted-foreground">{displayValue || '—'}</span>
    </div>
  );
});

const BorrowerPriorResidence2TimeCalculator = React.memo<{ control: any; setValue: any }>(({ control, setValue }) => {
  const fromDate = useWatch({ control, name: 'borrower.priorResidenceAddress2.from' }) || '';
  const toDate = useWatch({ control, name: 'borrower.priorResidenceAddress2.to' }) || '';

  const { displayValue, years, months } = useMemo(() => {
    if (!fromDate || !toDate) return { displayValue: '', years: 0, months: 0 };

    const from = new Date(fromDate);
    const to = new Date(toDate);

    if (isNaN(from.getTime()) || isNaN(to.getTime())) return { displayValue: '', years: 0, months: 0 };

    let yearsDiff = to.getFullYear() - from.getFullYear();
    let monthsDiff = to.getMonth() - from.getMonth();
    let daysDiff = to.getDate() - from.getDate();
    
    if (daysDiff >= 0) {
      monthsDiff += 1;
    }
    
    let totalMonths = yearsDiff * 12 + monthsDiff;

    if (totalMonths < 0) return { displayValue: '', years: 0, months: 0 };

    const calcYears = Math.floor(totalMonths / 12);
    const calcMonths = totalMonths % 12;

    let display = '';
    if (calcYears >= 1) {
      const yearValue = calcMonths === 0 ? calcYears.toString() : `${calcYears}.${calcMonths}`;
      display = `${yearValue} Years`;
    } else if (calcMonths > 0) {
      display = `0.${calcMonths} Months`;
    }
    
    return { displayValue: display, years: calcYears, months: calcMonths };
  }, [fromDate, toDate]);

  React.useEffect(() => {
    setValue('borrower.priorYearsAtAddress2', years, { shouldDirty: false });
    setValue('borrower.priorMonthsAtAddress2', months, { shouldDirty: false });
  }, [years, months, setValue]);

  return (
    <div className="h-9 px-3 py-2 border border-input bg-background rounded-md flex items-center text-sm">
      <span className="text-muted-foreground">{displayValue || '—'}</span>
    </div>
  );
});

const CoBorrowerPriorResidenceTimeCalculator = React.memo<{ control: any; setValue: any }>(({ control, setValue }) => {
  const fromDate = useWatch({ control, name: 'coBorrower.priorResidenceAddress.from' }) || '';
  const toDate = useWatch({ control, name: 'coBorrower.priorResidenceAddress.to' }) || '';

  const { displayValue, years, months } = useMemo(() => {
    if (!fromDate || !toDate) return { displayValue: '', years: 0, months: 0 };

    const from = new Date(fromDate);
    const to = new Date(toDate);

    if (isNaN(from.getTime()) || isNaN(to.getTime())) return { displayValue: '', years: 0, months: 0 };

    let yearsDiff = to.getFullYear() - from.getFullYear();
    let monthsDiff = to.getMonth() - from.getMonth();
    let daysDiff = to.getDate() - from.getDate();
    
    if (daysDiff >= 0) {
      monthsDiff += 1;
    }
    
    let totalMonths = yearsDiff * 12 + monthsDiff;

    if (totalMonths < 0) return { displayValue: '', years: 0, months: 0 };

    const calcYears = Math.floor(totalMonths / 12);
    const calcMonths = totalMonths % 12;

    let display = '';
    if (calcYears >= 1) {
      const yearValue = calcMonths === 0 ? calcYears.toString() : `${calcYears}.${calcMonths}`;
      display = `${yearValue} Years`;
    } else if (calcMonths > 0) {
      display = `0.${calcMonths} Months`;
    }
    
    return { displayValue: display, years: calcYears, months: calcMonths };
  }, [fromDate, toDate]);

  React.useEffect(() => {
    setValue('coBorrower.priorYearsAtAddress', years, { shouldDirty: false });
    setValue('coBorrower.priorMonthsAtAddress', months, { shouldDirty: false });
  }, [years, months, setValue]);

  return (
    <div className="h-9 px-3 py-2 border border-input bg-background rounded-md flex items-center text-sm">
      <span className="text-muted-foreground">{displayValue || '—'}</span>
    </div>
  );
});

const CoBorrowerPriorResidence2TimeCalculator = React.memo<{ control: any; setValue: any }>(({ control, setValue }) => {
  const fromDate = useWatch({ control, name: 'coBorrower.priorResidenceAddress2.from' }) || '';
  const toDate = useWatch({ control, name: 'coBorrower.priorResidenceAddress2.to' }) || '';

  const { displayValue, years, months } = useMemo(() => {
    if (!fromDate || !toDate) return { displayValue: '', years: 0, months: 0 };

    const from = new Date(fromDate);
    const to = new Date(toDate);

    if (isNaN(from.getTime()) || isNaN(to.getTime())) return { displayValue: '', years: 0, months: 0 };

    let yearsDiff = to.getFullYear() - from.getFullYear();
    let monthsDiff = to.getMonth() - from.getMonth();
    let daysDiff = to.getDate() - from.getDate();
    
    if (daysDiff >= 0) {
      monthsDiff += 1;
    }
    
    let totalMonths = yearsDiff * 12 + monthsDiff;

    if (totalMonths < 0) return { displayValue: '', years: 0, months: 0 };

    const calcYears = Math.floor(totalMonths / 12);
    const calcMonths = totalMonths % 12;

    let display = '';
    if (calcYears >= 1) {
      const yearValue = calcMonths === 0 ? calcYears.toString() : `${calcYears}.${calcMonths}`;
      display = `${yearValue} Years`;
    } else if (calcMonths > 0) {
      display = `0.${calcMonths} Months`;
    }
    
    return { displayValue: display, years: calcYears, months: calcMonths };
  }, [fromDate, toDate]);

  React.useEffect(() => {
    setValue('coBorrower.priorYearsAtAddress2', years, { shouldDirty: false });
    setValue('coBorrower.priorMonthsAtAddress2', months, { shouldDirty: false });
  }, [years, months, setValue]);

  return (
    <div className="h-9 px-3 py-2 border border-input bg-background rounded-md flex items-center text-sm">
      <span className="text-muted-foreground">{displayValue || '—'}</span>
    </div>
  );
});

const CoBorrowerResidenceTimeCalculator = React.memo<{ control: any; setValue: any }>(({ control, setValue }) => {
  const fromDate = useWatch({ control, name: 'coBorrower.residenceAddress.from' }) || '';
  const toDate = useWatch({ control, name: 'coBorrower.residenceAddress.to' }) || '';

  const { displayValue, years, months } = useMemo(() => {
    if (!fromDate || !toDate) return { displayValue: '', years: 0, months: 0 };

    const from = new Date(fromDate);
    // If toDate is "Present", use current date for calculations
    const to = toDate === 'Present' ? new Date() : new Date(toDate);

    if (isNaN(from.getTime()) || isNaN(to.getTime())) return { displayValue: '', years: 0, months: 0 };

    let yearsDiff = to.getFullYear() - from.getFullYear();
    let monthsDiff = to.getMonth() - from.getMonth();
    let daysDiff = to.getDate() - from.getDate();
    
    if (daysDiff >= 0) {
      monthsDiff += 1;
    }
    
    let totalMonths = yearsDiff * 12 + monthsDiff;

    if (totalMonths < 0) return { displayValue: '', years: 0, months: 0 };

    const calcYears = Math.floor(totalMonths / 12);
    const calcMonths = totalMonths % 12;

    let display = '';
    if (calcYears >= 1) {
      const yearValue = calcMonths === 0 ? calcYears.toString() : `${calcYears}.${calcMonths}`;
      display = `${yearValue} Years`;
    } else if (calcMonths > 0) {
      display = `0.${calcMonths} Months`;
    }
    
    return { displayValue: display, years: calcYears, months: calcMonths };
  }, [fromDate, toDate]);

  React.useEffect(() => {
    setValue('coBorrower.yearsAtAddress', years, { shouldDirty: false });
    setValue('coBorrower.monthsAtAddress', months, { shouldDirty: false });
  }, [years, months, setValue]);

  return (
    <div className="h-9 px-3 py-2 border border-input bg-background rounded-md flex items-center text-sm">
      <span className="text-muted-foreground">{displayValue || '—'}</span>
    </div>
  );
});

// US States for dropdown
const US_STATES = [
  { value: 'AL', label: 'Alabama' },
  { value: 'AK', label: 'Alaska' },
  { value: 'AZ', label: 'Arizona' },
  { value: 'AR', label: 'Arkansas' },
  { value: 'CA', label: 'California' },
  { value: 'CO', label: 'Colorado' },
  { value: 'CT', label: 'Connecticut' },
  { value: 'DE', label: 'Delaware' },
  { value: 'FL', label: 'Florida' },
  { value: 'GA', label: 'Georgia' },
  { value: 'HI', label: 'Hawaii' },
  { value: 'ID', label: 'Idaho' },
  { value: 'IL', label: 'Illinois' },
  { value: 'IN', label: 'Indiana' },
  { value: 'IA', label: 'Iowa' },
  { value: 'KS', label: 'Kansas' },
  { value: 'KY', label: 'Kentucky' },
  { value: 'LA', label: 'Louisiana' },
  { value: 'ME', label: 'Maine' },
  { value: 'MD', label: 'Maryland' },
  { value: 'MA', label: 'Massachusetts' },
  { value: 'MI', label: 'Michigan' },
  { value: 'MN', label: 'Minnesota' },
  { value: 'MS', label: 'Mississippi' },
  { value: 'MO', label: 'Missouri' },
  { value: 'MT', label: 'Montana' },
  { value: 'NE', label: 'Nebraska' },
  { value: 'NV', label: 'Nevada' },
  { value: 'NH', label: 'New Hampshire' },
  { value: 'NJ', label: 'New Jersey' },
  { value: 'NM', label: 'New Mexico' },
  { value: 'NY', label: 'New York' },
  { value: 'NC', label: 'North Carolina' },
  { value: 'ND', label: 'North Dakota' },
  { value: 'OH', label: 'Ohio' },
  { value: 'OK', label: 'Oklahoma' },
  { value: 'OR', label: 'Oregon' },
  { value: 'PA', label: 'Pennsylvania' },
  { value: 'RI', label: 'Rhode Island' },
  { value: 'SC', label: 'South Carolina' },
  { value: 'SD', label: 'South Dakota' },
  { value: 'TN', label: 'Tennessee' },
  { value: 'TX', label: 'Texas' },
  { value: 'UT', label: 'Utah' },
  { value: 'VT', label: 'Vermont' },
  { value: 'VA', label: 'Virginia' },
  { value: 'WA', label: 'Washington' },
  { value: 'WV', label: 'West Virginia' },
  { value: 'WI', label: 'Wisconsin' },
  { value: 'WY', label: 'Wyoming' }
];

export default function AdminAddClient() {
  const [location, setLocation] = useLocation();
  const { toast } = useToast();
  const queryClient = useQueryClient();

  // Utility function to lookup county from zip code using backend API
  const lookupCountyFromZip = async (zipCode: string): Promise<Array<{value: string, label: string}>> => {
    if (!zipCode || zipCode.length < 5) return [];
    
    try {
      const response = await fetch(`/api/county-lookup/${zipCode}`);
      if (response.ok) {
        const data = await response.json();
        if (data.success && data.counties) {
          return data.counties;
        }
      }
      return [];
    } catch (error) {
      console.error('Error looking up county from ZIP code:', error);
      return [];
    }
  };

  // Handler for borrower ZIP code lookup
  const handleBorrowerZipCodeLookup = async (zipCode: string) => {
    if (!zipCode || zipCode.length < 5) {
      setBorrowerCountyOptions([]);
      return;
    }
    
    setCountyLookupLoading(prev => ({...prev, borrower: true}));
    const counties = await lookupCountyFromZip(zipCode);
    
    if (counties.length === 1) {
      // Auto-fill single county result
      form.setValue('borrower.residenceAddress.county', counties[0].label, { shouldDirty: true });
      setBorrowerCountyOptions([]); // Keep as input field but with value filled
    } else if (counties.length > 1) {
      // Show dropdown for multiple counties
      setBorrowerCountyOptions(counties);
    } else {
      // No counties found, keep as input field
      setBorrowerCountyOptions([]);
    }
    
    setCountyLookupLoading(prev => ({...prev, borrower: false}));
  };

  // Handler for co-borrower ZIP code lookup
  const handleCoBorrowerZipCodeLookup = async (zipCode: string) => {
    if (!zipCode || zipCode.length < 5) {
      setCoBorrowerCountyOptions([]);
      return;
    }
    
    setCountyLookupLoading(prev => ({...prev, coBorrower: true}));
    const counties = await lookupCountyFromZip(zipCode);
    
    if (counties.length === 1) {
      // Auto-fill single county result
      form.setValue('coBorrower.residenceAddress.county', counties[0].label, { shouldDirty: true });
      setCoBorrowerCountyOptions([]); // Keep as input field but with value filled
    } else if (counties.length > 1) {
      // Show dropdown for multiple counties
      setCoBorrowerCountyOptions(counties);
    } else {
      // No counties found, keep as input field
      setCoBorrowerCountyOptions([]);
    }
    
    setCountyLookupLoading(prev => ({...prev, coBorrower: false}));
  };

  // Handler for borrower prior ZIP code lookup
  const handleBorrowerPriorZipCodeLookup = async (zipCode: string) => {
    if (!zipCode || zipCode.length < 5) {
      setBorrowerPriorCountyOptions([]);
      return;
    }
    
    setCountyLookupLoading(prev => ({...prev, borrowerPrior: true}));
    const counties = await lookupCountyFromZip(zipCode);
    
    if (counties.length === 1) {
      // Auto-fill single county result
      form.setValue('borrower.priorResidenceAddress.county', counties[0].label, { shouldDirty: true });
      setBorrowerPriorCountyOptions([]); // Keep as input field but with value filled
    } else if (counties.length > 1) {
      // Show dropdown for multiple counties
      setBorrowerPriorCountyOptions(counties);
    } else {
      // No counties found, keep as input field
      setBorrowerPriorCountyOptions([]);
    }
    
    setCountyLookupLoading(prev => ({...prev, borrowerPrior: false}));
  };

  // Handler for co-borrower prior ZIP code lookup
  const handleCoBorrowerPriorZipCodeLookup = async (zipCode: string) => {
    if (!zipCode || zipCode.length < 5) {
      setCoBorrowerPriorCountyOptions([]);
      return;
    }
    
    setCountyLookupLoading(prev => ({...prev, coBorrowerPrior: true}));
    const counties = await lookupCountyFromZip(zipCode);
    
    if (counties.length === 1) {
      // Auto-fill single county result
      form.setValue('coBorrower.priorResidenceAddress.county', counties[0].label, { shouldDirty: true });
      setCoBorrowerPriorCountyOptions([]); // Keep as input field but with value filled
    } else if (counties.length > 1) {
      // Show dropdown for multiple counties
      setCoBorrowerPriorCountyOptions(counties);
    } else {
      // No counties found, keep as input field
      setCoBorrowerPriorCountyOptions([]);
    }
    
    setCountyLookupLoading(prev => ({...prev, coBorrowerPrior: false}));
  };

  // Handler for borrower employer ZIP code lookup
  const handleBorrowerEmployerZipCodeLookup = async (zipCode: string) => {
    if (!zipCode || zipCode.length < 5) {
      setBorrowerEmployerCountyOptions([]);
      return;
    }
    
    setCountyLookupLoading(prev => ({...prev, borrowerEmployer: true}));
    const counties = await lookupCountyFromZip(zipCode);
    
    if (counties.length === 1) {
      form.setValue('income.employerAddress.county', counties[0].label, { shouldDirty: true });
      setBorrowerEmployerCountyOptions([]);
    } else if (counties.length > 1) {
      setBorrowerEmployerCountyOptions(counties);
    } else {
      setBorrowerEmployerCountyOptions([]);
    }
    
    setCountyLookupLoading(prev => ({...prev, borrowerEmployer: false}));
  };

  // Handler for borrower prior employer ZIP code lookup
  const handleBorrowerPriorEmployerZipCodeLookup = async (zipCode: string) => {
    if (!zipCode || zipCode.length < 5) {
      setBorrowerPriorEmployerCountyOptions([]);
      return;
    }
    
    setCountyLookupLoading(prev => ({...prev, borrowerPriorEmployer: true}));
    const counties = await lookupCountyFromZip(zipCode);
    
    if (counties.length === 1) {
      form.setValue('income.priorEmployerAddress.county', counties[0].label, { shouldDirty: true });
      setBorrowerPriorEmployerCountyOptions([]);
    } else if (counties.length > 1) {
      setBorrowerPriorEmployerCountyOptions(counties);
    } else {
      setBorrowerPriorEmployerCountyOptions([]);
    }
    
    setCountyLookupLoading(prev => ({...prev, borrowerPriorEmployer: false}));
  };


  // Handler for co-borrower employer ZIP code lookup
  const handleCoBorrowerEmployerZipCodeLookup = async (zipCode: string, propertyId: string) => {
    if (!zipCode || zipCode.length < 5) {
      setCoBorrowerEmployerCountyOptions(prev => ({...prev, [propertyId]: []}));
      form.setValue(getCoBorrowerEmployerFieldPath(propertyId, 'employerAddress.county'), '');
      return;
    }
    
    setCountyLookupLoading(prev => ({...prev, coBorrowerEmployer: {...prev.coBorrowerEmployer, [propertyId]: true}}));
    const counties = await lookupCountyFromZip(zipCode);
    
    if (counties.length === 1) {
      form.setValue(getCoBorrowerEmployerFieldPath(propertyId, 'employerAddress.county'), counties[0].label, { shouldDirty: true });
      setCoBorrowerEmployerCountyOptions(prev => ({...prev, [propertyId]: []}));
    } else if (counties.length > 1) {
      setCoBorrowerEmployerCountyOptions(prev => ({...prev, [propertyId]: counties}));
    } else {
      setCoBorrowerEmployerCountyOptions(prev => ({...prev, [propertyId]: []}));
    }
    
    setCountyLookupLoading(prev => ({...prev, coBorrowerEmployer: {...prev.coBorrowerEmployer, [propertyId]: false}}));
  };

  // Handler for co-borrower prior employer ZIP code lookup
  const handleCoBorrowerPriorEmployerZipCodeLookup = async (zipCode: string) => {
    if (!zipCode || zipCode.length < 5) {
      setCoBorrowerPriorEmployerCountyOptions([]);
      form.setValue('coBorrowerIncome.priorEmployerAddress.county', '');
      return;
    }
    
    setCountyLookupLoading(prev => ({...prev, coBorrowerPriorEmployer: true}));
    const counties = await lookupCountyFromZip(zipCode);
    
    if (counties.length === 1) {
      form.setValue('coBorrowerIncome.priorEmployerAddress.county', counties[0].label, { shouldDirty: true });
      setCoBorrowerPriorEmployerCountyOptions([]);
    } else if (counties.length > 1) {
      setCoBorrowerPriorEmployerCountyOptions(counties);
    } else {
      setCoBorrowerPriorEmployerCountyOptions([]);
    }
    
    setCountyLookupLoading(prev => ({...prev, coBorrowerPriorEmployer: false}));
  };

  // Handler for co-borrower second employer ZIP code lookup - dynamic per card
  const handleCoBorrowerSecondEmployerZipCodeLookup = async (zipCode: string, cardId: string) => {
    const loadingKey = `coBorrowerSecondEmployer-${cardId}`;
    
    if (!zipCode || zipCode.length < 5) {
      setCoBorrowerSecondEmployerCountyOptions(prev => ({...prev, [cardId]: []}));
      form.setValue(getCoBorrowerSecondEmployerFieldPath(cardId, 'employerAddress.county') as any, '');
      return;
    }
    
    setCountyLookupLoading(prev => ({...prev, [loadingKey]: true}));
    const counties = await lookupCountyFromZip(zipCode);
    
    if (counties.length === 1) {
      form.setValue(getCoBorrowerSecondEmployerFieldPath(cardId, 'employerAddress.county') as any, counties[0].label, { shouldDirty: true });
      setCoBorrowerSecondEmployerCountyOptions(prev => ({...prev, [cardId]: []}));
    } else if (counties.length > 1) {
      setCoBorrowerSecondEmployerCountyOptions(prev => ({...prev, [cardId]: counties}));
    } else {
      setCoBorrowerSecondEmployerCountyOptions(prev => ({...prev, [cardId]: []}));
    }
    
    setCountyLookupLoading(prev => ({...prev, [loadingKey]: false}));
  };

  // Handler for property address changes - triggers auto-copy functionality
  const handleAddressChange = (index: number) => {
    const properties = form.watch('property.properties') || [];
    if (index < 0 || index >= properties.length) return;
    
    const property = properties[index];
    if (!property || !property.address) return;
    
    // Get the property address
    const propertyAddress = property.address;
    
    // If this property has a ZIP code, trigger county lookup
    if (propertyAddress.zip && propertyAddress.zip.length >= 5) {
      lookupCountyFromZip(propertyAddress.zip).then(counties => {
        if (counties.length === 1) {
          // Auto-fill single county result
          form.setValue(`property.properties.${index}.address.county`, counties[0].label, { shouldDirty: true });
        }
      });
    }
    
    // Auto-copy address to related loan sections if they're attached to this property
    const propertyId = property.id;
    
    // Check current loan
    const currentLoanAttached = form.watch('currentLoan.attachedToProperty');
    if (currentLoanAttached === propertyId) {
      form.setValue('currentLoan.propertyAddress', {
        street: propertyAddress.street || '',
        unit: propertyAddress.unit || '',
        city: propertyAddress.city || '',
        state: propertyAddress.state || '',
        zipCode: propertyAddress.zip || '',
        county: propertyAddress.county || ''
      });
    }
    
    // Check second loan
    const secondLoanAttached = form.watch('secondLoan.attachedToProperty');
    if (secondLoanAttached === propertyId) {
      form.setValue('secondLoan.propertyAddress', {
        street: propertyAddress.street || '',
        unit: propertyAddress.unit || '',
        city: propertyAddress.city || '',
        state: propertyAddress.state || '',
        zipCode: propertyAddress.zip || '',
        county: propertyAddress.county || ''
      });
    }
    
    // Check third loan
    const thirdLoanAttached = form.watch('thirdLoan.attachedToProperty');
    if (thirdLoanAttached === propertyId) {
      form.setValue('thirdLoan.propertyAddress', {
        street: propertyAddress.street || '',
        unit: propertyAddress.unit || '',
        city: propertyAddress.city || '',
        state: propertyAddress.state || '',
        zipCode: propertyAddress.zip || '',
        county: propertyAddress.county || ''
      });
    }
    
    // Check all additional loans (loan3, loan4, loan5, etc.)
    additionalLoans.forEach(loan => {
      const additionalLoanAttached = getDyn(`${loan.id}.attachedToProperty`);
      if (additionalLoanAttached === propertyId) {
        setDyn(`${loan.id}.propertyAddress`, {
          street: propertyAddress.street || '',
          unit: propertyAddress.unit || '',
          city: propertyAddress.city || '',
          state: propertyAddress.state || '',
          zipCode: propertyAddress.zip || '',
          county: propertyAddress.county || ''
        });
      }
    });
  };

  // Animation state for first-time page entry
  const [showEntryAnimation, setShowEntryAnimation] = useState(true);
  // Animation state for Income tab animations
  const [showIncomeAnimation, setShowIncomeAnimation] = useState(false);
  // Animation state for Property tab animations
  const [showPropertyAnimation, setShowPropertyAnimation] = useState(false);
  // Animation state for Borrower tab animations
  const [showBorrowerAnimation, setShowBorrowerAnimation] = useState(false);
  // Animation state for subject property box roll-down
  const [showSubjectPropertyAnimation, setShowSubjectPropertyAnimation] = useState<{[key: string]: boolean}>({});
  // Animation state for income card grey background roll-down
  const [showIncomeCardAnimation, setShowIncomeCardAnimation] = useState<{[key: string]: boolean}>({});
  // Animation state for loan tab blue circles roll-up
  const [showLoanCircleAnimation, setShowLoanCircleAnimation] = useState(false);
  // Animation state for current loan card grey box roll-up
  const [showCurrentLoanCardAnimation, setShowCurrentLoanCardAnimation] = useState<{[key: string]: boolean}>({});
  // Animation state for second loan card grey box roll-up
  const [showSecondLoanCardAnimation, setShowSecondLoanCardAnimation] = useState<{[key: string]: boolean}>({});
  // Animation state for third loan card grey box roll-up
  const [showThirdLoanCardAnimation, setShowThirdLoanCardAnimation] = useState<{[key: string]: boolean}>({});
  // Animation state for New Refinance Loan card grey box roll-up
  const [showNewRefinanceLoanCardAnimation, setShowNewRefinanceLoanCardAnimation] = useState<{[key: string]: boolean}>({});
  // Animation state for New Purchase Loan card grey box roll-up
  const [showNewPurchaseLoanCardAnimation, setShowNewPurchaseLoanCardAnimation] = useState<{[key: string]: boolean}>({});
  // Animation state for revert icon rotation
  const [showRevertAnimation, setShowRevertAnimation] = useState(false);
  const [hasCoBorrower, setHasCoBorrower] = useState(false);
  const [isQuoteCardsMinimized, setIsQuoteCardsMinimized] = useState(false);
  const [selectedRateIds, setSelectedRateIds] = useState<number[]>([]);
  const [rateValues, setRateValues] = useState<string[]>(['', '', '', '', '']);
  const [editingRateIndex, setEditingRateIndex] = useState<number | null>(null);
  const [showRateCircles, setShowRateCircles] = useState(false);
  const [isRatePopoverOpen, setIsRatePopoverOpen] = useState(false);
  const [isCustomTerm, setIsCustomTerm] = useState(false);
  const [loanTerm, setLoanTerm] = useState('');
  const [customTerm, setCustomTerm] = useState('');
  const [monthlyEscrow, setMonthlyEscrow] = useState('');
  const [isDuApproval, setIsDuApproval] = useState(false);
  const [escrowReserves, setEscrowReserves] = useState('');
  const [debtToIncomeRatio, setDebtToIncomeRatio] = useState('');
  const [lenderCredit, setLenderCredit] = useState('');
  const [isSellerCredit, setIsSellerCredit] = useState(false);
  const [showCalculator, setShowCalculator] = useState(false);
  const [calculatorPosition, setCalculatorPosition] = useState({ x: 100, y: 100 });
  const [isDragging, setIsDragging] = useState(false);
  const [dragOffset, setDragOffset] = useState({ x: 0, y: 0 });
  const [calculatorDisplay, setCalculatorDisplay] = useState('0');
  const [calculatorMemory, setCalculatorMemory] = useState('');
  const [calculatorOperator, setCalculatorOperator] = useState('');
  
  // State for Quote tab rate detail fields
  const [rateBuyDownValues, setRateBuyDownValues] = useState<string[]>(['', '', '', '', '']);
  const [cashOutAmountValues, setCashOutAmountValues] = useState<string[]>(['', '', '', '', '']);
  const [vaFundingFeeValues, setVaFundingFeeValues] = useState<string[]>(['', '', '', '', '']);
  const [vaAppraisalValues, setVaAppraisalValues] = useState<string[]>(['', '', '', '', '']);
  const [vaTermiteValues, setVaTermiteValues] = useState<string[]>(['', '', '', '', '']);
  const [vaUnderwritingValues, setVaUnderwritingValues] = useState<string[]>(['', '', '', '', '']);
  const [titleEscrowValues, setTitleEscrowValues] = useState<string[]>(['', '', '', '', '']);
  const [payOffInterestValues, setPayOffInterestValues] = useState<string[]>(['', '', '', '', '']);
  const [stateTaxValues, setStateTaxValues] = useState<string[]>(['', '', '', '', '']);
  const [escrowReservesValues, setEscrowReservesValues] = useState<string[]>(['', '', '', '', '']);
  const [existingLoanBalanceValues, setExistingLoanBalanceValues] = useState<string[]>(['', '', '', '', '']);
  
  // State for New Est. Loan Amount and New Monthly Payment sections
  const [newEstLoanAmountValues, setNewEstLoanAmountValues] = useState<string[]>(['', '', '', '', '']);
  const [newMonthlyPaymentValues, setNewMonthlyPaymentValues] = useState<string[]>(['', '', '', '', '']);
  const [totalMonthlySavingsValues, setTotalMonthlySavingsValues] = useState<string[]>(['', '', '', '', '']);
  
  // State for additional rows in Rate Details Section
  const [additionalRow1Values, setAdditionalRow1Values] = useState<string[]>(['', '', '', '', '']);
  const [additionalRow2Values, setAdditionalRow2Values] = useState<string[]>(['', '', '', '', '']);
  
  // State for Escrow Information dialog
  const [isEscrowInfoOpen, setIsEscrowInfoOpen] = useState(false);
  const [propertyInsurancePayment, setPropertyInsurancePayment] = useState('');
  const [propertyTaxPayment, setPropertyTaxPayment] = useState('');
  const [statementEscrowBalance, setStatementEscrowBalance] = useState('');
  
  // Auto-calculate Total Monthly Escrow
  const calculatedTotalMonthlyEscrow = useMemo(() => {
    const insurance = parseInt(propertyInsurancePayment || '0', 10);
    const tax = parseInt(propertyTaxPayment || '0', 10);
    return insurance + tax;
  }, [propertyInsurancePayment, propertyTaxPayment]);
  
  // State for Estimated New Loan Amount dialog
  const [isEstLoanAmountInfoOpen, setIsEstLoanAmountInfoOpen] = useState(false);
  
  // State for New Payment dialog
  const [isNewPaymentInfoOpen, setIsNewPaymentInfoOpen] = useState(false);
  
  // State for row collapse/expand in 3rd card
  const [isMonthlyPaymentRowExpanded, setIsMonthlyPaymentRowExpanded] = useState(true);
  const [isSavingsRowExpanded, setIsSavingsRowExpanded] = useState(true);
  const [newMortgagePayment, setNewMortgagePayment] = useState('');
  const [newEscrowPayment, setNewEscrowPayment] = useState('');
  const [monthlyInsurance, setMonthlyInsurance] = useState('');
  const [monthlyPropertyTax, setMonthlyPropertyTax] = useState('');
  
  // Auto-calculate Total New Payment
  const calculatedTotalNewPayment = useMemo(() => {
    const mortgage = parseInt(newMortgagePayment || '0', 10);
    const escrow = parseInt(newEscrowPayment || '0', 10);
    return mortgage + escrow;
  }, [newMortgagePayment, newEscrowPayment]);
  
  // Auto-calculate Total Monthly Escrow for New Payment dialog
  const calculatedNewPaymentEscrow = useMemo(() => {
    const insurance = parseInt(monthlyInsurance || '0', 10);
    const tax = parseInt(monthlyPropertyTax || '0', 10);
    return insurance + tax;
  }, [monthlyInsurance, monthlyPropertyTax]);
  
  // State for New Monthly Savings dialog
  const [isMonthlySavingsInfoOpen, setIsMonthlySavingsInfoOpen] = useState(false);
  const [existingMortgagePayment, setExistingMortgagePayment] = useState('');
  const [monthlyPaymentDebtsPayOff, setMonthlyPaymentDebtsPayOff] = useState('');
  const [monthlyPaymentOtherDebts, setMonthlyPaymentOtherDebts] = useState('');
  const [newMortgagePaymentSavings, setNewMortgagePaymentSavings] = useState('');
  
  // Auto-calculate Total Existing Monthly Payments
  const calculatedTotalExistingPayments = useMemo(() => {
    const existing = parseInt(existingMortgagePayment || '0', 10);
    const debtsPayOff = parseInt(monthlyPaymentDebtsPayOff || '0', 10);
    const otherDebts = parseInt(monthlyPaymentOtherDebts || '0', 10);
    return existing + debtsPayOff + otherDebts;
  }, [existingMortgagePayment, monthlyPaymentDebtsPayOff, monthlyPaymentOtherDebts]);
  
  // Auto-calculate Total Monthly Savings
  const calculatedMonthlySavings = useMemo(() => {
    const totalExisting = calculatedTotalExistingPayments;
    const newMortgage = parseInt(newMortgagePaymentSavings || '0', 10);
    return totalExisting - newMortgage;
  }, [calculatedTotalExistingPayments, newMortgagePaymentSavings]);
  
  // State for Sticky Notes
  const [isStickyNotesOpen, setIsStickyNotesOpen] = useState(false);
  const [stickyNotes, setStickyNotes] = useState('');
  
  // Calculate totals for each rate column using useMemo (like Income tab)
  const rateColumnTotals = useMemo(() => {
    return Array.from({ length: 5 }).map((_, index) => {
      const values = [
        existingLoanBalanceValues[index],
        cashOutAmountValues[index],
        rateBuyDownValues[index],
        vaFundingFeeValues[index],
        vaAppraisalValues[index],
        vaTermiteValues[index],
        vaUnderwritingValues[index],
        titleEscrowValues[index],
        payOffInterestValues[index],
        stateTaxValues[index],
        escrowReservesValues[index]
      ];
      
      const total = values.reduce((sum, val) => {
        const num = parseInt(val || '0', 10);
        return sum + num;
      }, 0);
      
      return total;
    });
  }, [
    existingLoanBalanceValues,
    cashOutAmountValues,
    rateBuyDownValues,
    vaFundingFeeValues,
    vaAppraisalValues,
    vaTermiteValues,
    vaUnderwritingValues,
    titleEscrowValues,
    payOffInterestValues,
    stateTaxValues,
    escrowReservesValues
  ]);
  
  // Calculate monthly mortgage payments for each rate using amortization formula
  const calculatedMonthlyPayments = useMemo(() => {
    return Array.from({ length: 5 }).map((_, index) => {
      // Get the principal amount (loan amount)
      const principal = rateColumnTotals[index];
      
      // Get the interest rate from the circle
      const rateStr = rateValues[index];
      const rate = parseFloat(rateStr || '0');
      
      // Get the loan term in years
      let years = 0;
      if (isCustomTerm && customTerm) {
        years = parseInt(customTerm, 10);
      } else if (loanTerm && loanTerm !== 'select') {
        // Extract years from value like "30-years"
        const match = loanTerm.match(/^(\d+)-years$/);
        if (match) {
          years = parseInt(match[1], 10);
        }
      }
      
      // If any required data is missing, return empty string
      if (!principal || principal <= 0 || !rate || rate <= 0 || !years || years <= 0) {
        return '';
      }
      
      // Calculate monthly payment using amortization formula
      // M = P * [r(1+r)^n] / [(1+r)^n - 1]
      const monthlyRate = rate / 100 / 12;
      const numberOfPayments = years * 12;
      const onePlusR = 1 + monthlyRate;
      const onePlusRToN = Math.pow(onePlusR, numberOfPayments);
      
      const monthlyPayment = principal * (monthlyRate * onePlusRToN) / (onePlusRToN - 1);
      
      // Add escrow values based on Monthly Escrow selection (only if Escrow Reserves is not "Escrow Not Included")
      let escrowAmount = 0;
      if (escrowReserves !== 'escrow-not-included') {
        if (monthlyEscrow === 'includes-tax-insurance') {
          // Add Total Monthly Escrow (insurance + property tax)
          const insurance = parseFloat(monthlyInsurance || '0');
          const propertyTax = parseFloat(monthlyPropertyTax || '0');
          escrowAmount = insurance + propertyTax;
        } else if (monthlyEscrow === 'includes-tax-only') {
          // Add only Monthly Property Tax
          escrowAmount = parseFloat(monthlyPropertyTax || '0');
        } else if (monthlyEscrow === 'includes-insurance-only') {
          // Add only Monthly Insurance
          escrowAmount = parseFloat(monthlyInsurance || '0');
        }
      }
      
      const totalPayment = monthlyPayment + escrowAmount;
      
      // Round to nearest dollar and return as string
      return Math.round(totalPayment).toString();
    });
  }, [rateColumnTotals, rateValues, loanTerm, customTerm, isCustomTerm, monthlyEscrow, escrowReserves, monthlyInsurance, monthlyPropertyTax]);
  
  // Calculate Total Monthly Savings for each rate column
  const calculatedTotalMonthlySavings = useMemo(() => {
    return Array.from({ length: 5 }).map((_, index) => {
      const totalExisting = calculatedTotalExistingPayments;
      const newPayment = parseInt(calculatedMonthlyPayments[index] || '0', 10);
      
      // If either value is missing or zero, return empty string
      if (!totalExisting || totalExisting <= 0 || !newPayment || newPayment <= 0) {
        return '';
      }
      
      const savings = totalExisting - newPayment;
      return savings > 0 ? savings.toString() : '';
    });
  }, [calculatedTotalExistingPayments, calculatedMonthlyPayments]);
  
  const [showCurrentLoan, setShowCurrentLoan] = useState(false);
  const [isCurrentLoanOpen, setIsCurrentLoanOpen] = useState(true);
  const [isReadOnlyCurrentLoanOpen, setIsReadOnlyCurrentLoanOpen] = useState(true);
  const [isNewLoanOpen, setIsNewLoanOpen] = useState(true);
  const [showSecondLoan, setShowSecondLoan] = useState(false);
  const [isSecondLoanOpen, setIsSecondLoanOpen] = useState(true);
  const [showThirdLoan, setShowThirdLoan] = useState(false);
  const [isThirdLoanOpen, setIsThirdLoanOpen] = useState(true);
  const [additionalLoans, setAdditionalLoans] = useState<Array<{id: string, isOpen: boolean}>>([]);
  
  // Array-based states for New Refinance Loan and New Purchase Loan (like Existing Primary Loan)
  const [newRefinanceLoanCards, setNewRefinanceLoanCards] = useState<string[]>([]);
  const [newPurchaseLoanCards, setNewPurchaseLoanCards] = useState<string[]>([]);
  const [newRefinanceLoanCardStates, setNewRefinanceLoanCardStates] = useState<{[key: string]: boolean}>({});
  const [newPurchaseLoanCardStates, setNewPurchaseLoanCardStates] = useState<{[key: string]: boolean}>({});
  
  const [isThirdLoanPropertyAddressOpen, setIsThirdLoanPropertyAddressOpen] = useState(false);
  
  // State for Current Loan 1 info popup in Property tab
  const [isCurrentLoanPreviewOpen, setIsCurrentLoanPreviewOpen] = useState(false);
  
  // State for Current Loan 2 info popup in Property tab
  const [isCurrentSecondLoanPreviewOpen, setIsCurrentSecondLoanPreviewOpen] = useState(false);
  
  // State for Current Third Loan info popup in Property tab
  const [isCurrentThirdLoanPreviewOpen, setIsCurrentThirdLoanPreviewOpen] = useState(false);
  
  // State for Additional Loan preview modal - generic for any additional loan
  const [additionalLoanPreview, setAdditionalLoanPreview] = useState<{isOpen: boolean, loanId: string | null}>({
    isOpen: false,
    loanId: null
  });
  
  // Multiple prior addresses state management
  const [borrowerPriorAddresses, setBorrowerPriorAddresses] = useState<{ id: string }[]>([]);

  // Function to add a new prior address
  const addBorrowerPriorAddress = () => {
    const newAddress = { id: crypto.randomUUID() };
    setBorrowerPriorAddresses(prev => [...prev, newAddress]);
  };

  // Function to remove a prior address
  const removeBorrowerPriorAddress = (addressId: string) => {
    setConfirmRemovalDialog({
      isOpen: true,
      type: 'prior-address',
      itemId: addressId,
      onConfirm: () => {
        setBorrowerPriorAddresses(prev => prev.filter(addr => addr.id !== addressId));
        setConfirmRemovalDialog({ isOpen: false, type: null });
      }
    });
  };

  // Helper function to handle income type changes with warning
  const handleIncomeTypeChange = (fieldPath: string, checked: boolean, incomeTypeName: string, isCoBorrower = false) => {
    if (!checked) {
      // Special handling for employment - don't allow unchecking if cards already exist
      if (incomeTypeName === 'Employment') {
        const hasCards = isCoBorrower 
          ? (coBorrowerEmployerCards || []).length > 0
          : (borrowerEmployerCards || []).length > 0;
        
        if (hasCards) {
          // Cards already exist, prevent unchecking - all removal must be done through card buttons
          return;
        }
      }
      
      // Special handling for second employment - don't allow unchecking if cards already exist
      if (incomeTypeName === 'Second Employment') {
        const hasCards = isCoBorrower 
          ? (coBorrowerSecondEmployerCards || []).length > 0
          : (borrowerSecondEmployerCards || []).length > 0;
        
        if (hasCards) {
          // Cards already exist, prevent unchecking - all removal must be done through card buttons
          return;
        }
      }
      
      // Special handling for self-employment - don't allow unchecking if cards already exist
      if (incomeTypeName === 'Self-Employment') {
        const hasCards = isCoBorrower 
          ? (coBorrowerSelfEmploymentCards || []).length > 0
          : (borrowerSelfEmploymentCards || []).length > 0;
        
        if (hasCards) {
          // Cards already exist, prevent unchecking - all removal must be done through card buttons
          return;
        }
      }
      
      // Special handling for pension - don't allow unchecking if default card already exists
      if (incomeTypeName === 'Pension') {
        const currentPensions = isCoBorrower 
          ? (form.watch('coBorrowerIncome.pensions') || [])
          : (form.watch('income.pensions') || []);
        const hasDefaultCard = currentPensions.some(p => p.isDefault);
        
        if (hasDefaultCard) {
          // Default pension card already exists, prevent unchecking - keep checkbox checked
          form.setValue(fieldPath as any, true);
          return;
        }
      }
      
      // Show warning when trying to uncheck/remove income type (for non-employment, non-pension with default, or when no cards exist)
      setConfirmRemovalDialog({
        isOpen: true,
        type: 'income',
        itemType: incomeTypeName,
        onConfirm: () => {
          form.setValue(fieldPath as any, false);
          // Clear pension cards when unchecking pension
          if (incomeTypeName === 'Pension') {
            if (isCoBorrower) {
              form.setValue('coBorrowerIncome.pensions', []);
            } else {
              form.setValue('income.pensions', []);
            }
          }
          setConfirmRemovalDialog({ isOpen: false, type: null });
        }
      });
    } else {
      // No warning needed when checking
      form.setValue(fieldPath as any, true);
      
      // Auto-create default employment card when employment is first selected
      if (incomeTypeName === 'Employment') {
        const hasCards = isCoBorrower 
          ? (coBorrowerEmployerCards || []).length > 0
          : (borrowerEmployerCards || []).length > 0;
        
        // Only create default employment card if none exist yet
        if (!hasCards) {
          if (isCoBorrower) {
            setCoBorrowerEmployerCards(['default']);
          } else {
            setBorrowerEmployerCards(['default']);
          }
        }
        
        // Auto-expand the employment card
        const cardId = isCoBorrower ? 'coborrower-template-card' : 'template-card';
        setPropertyCardStates(prev => ({ ...prev, [cardId]: true }));
        
        // Trigger animation for newly created employment card
        setTimeout(() => {
          if (isCoBorrower) {
            setShowIncomeCardAnimation(prev => ({ ...prev, [`co-borrower-employment-${cardId}`]: true }));
            setTimeout(() => {
              setShowIncomeCardAnimation(prev => ({ ...prev, [`co-borrower-employment-${cardId}`]: false }));
            }, 800);
          } else {
            setShowIncomeCardAnimation(prev => ({ ...prev, 'borrower-employment': true }));
            setTimeout(() => {
              setShowIncomeCardAnimation(prev => ({ ...prev, 'borrower-employment': false }));
            }, 800);
          }
        }, 200);
      }
      
      // Auto-create default second employment card when second employment is first selected
      if (incomeTypeName === 'Second Employment') {
        const hasCards = isCoBorrower 
          ? (coBorrowerSecondEmployerCards || []).length > 0
          : (borrowerSecondEmployerCards || []).length > 0;
        
        // Only create default second employment card if none exist yet
        if (!hasCards) {
          if (isCoBorrower) {
            setCoBorrowerSecondEmployerCards(['default']);
          } else {
            setBorrowerSecondEmployerCards(['default']);
          }
          
          // Auto-expand the second employment card
          const cardId = isCoBorrower ? 'coborrower-second-template-card' : 'second-template-card';
          setPropertyCardStates(prev => ({ ...prev, [cardId]: true }));
          
          // Trigger animation for newly created second employment card
          setTimeout(() => {
            if (isCoBorrower) {
              setShowIncomeCardAnimation(prev => ({ ...prev, 'co-borrower-second-employment': true }));
              setTimeout(() => {
                setShowIncomeCardAnimation(prev => ({ ...prev, 'co-borrower-second-employment': false }));
              }, 800);
            } else {
              setShowIncomeCardAnimation(prev => ({ ...prev, 'borrower-second-employment': true }));
              setTimeout(() => {
                setShowIncomeCardAnimation(prev => ({ ...prev, 'borrower-second-employment': false }));
              }, 800);
            }
          }, 200);
        }
      }
      
      // Auto-create default self-employment card when self-employment is first selected
      if (incomeTypeName === 'Self-Employment') {
        const hasCards = isCoBorrower 
          ? (coBorrowerSelfEmploymentCards || []).length > 0
          : (borrowerSelfEmploymentCards || []).length > 0;
        
        // Only create default self-employment card if none exist yet
        if (!hasCards) {
          if (isCoBorrower) {
            setCoBorrowerSelfEmploymentCards(['default']);
          } else {
            setBorrowerSelfEmploymentCards(['default']);
          }
          
          // Auto-expand the self-employment card
          const cardId = isCoBorrower ? 'coborrower-self-employment-template-card' : 'self-employment-template-card';
          setPropertyCardStates(prev => ({ ...prev, [cardId]: true }));
          
          // Trigger animation for newly created self-employment card
          setTimeout(() => {
            if (isCoBorrower) {
              setShowIncomeCardAnimation(prev => ({ ...prev, 'co-borrower-self-employment': true }));
              setTimeout(() => {
                setShowIncomeCardAnimation(prev => ({ ...prev, 'co-borrower-self-employment': false }));
              }, 800);
            } else {
              setShowIncomeCardAnimation(prev => ({ ...prev, 'borrower-self-employment': true }));
              setTimeout(() => {
                setShowIncomeCardAnimation(prev => ({ ...prev, 'borrower-self-employment': false }));
              }, 800);
            }
          }, 200);
        }
      }
      
      // Auto-create default pension card when pension is first selected
      if (incomeTypeName === 'Pension') {
        const currentPensions = isCoBorrower 
          ? (form.watch('coBorrowerIncome.pensions') || [])
          : (form.watch('income.pensions') || []);
        
        // Only create default pension if none exist yet
        if (currentPensions.length === 0) {
          const defaultPension = {
            id: `pension-default-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
            payerName: '',
            monthlyAmount: '',
            isDefault: true // Mark as default card
          };
          
          if (isCoBorrower) {
            form.setValue('coBorrowerIncome.pensions', [defaultPension]);
          } else {
            form.setValue('income.pensions', [defaultPension]);
          }
        }
      }
    }
  };

  // Co-borrower multiple prior addresses state management
  const [coBorrowerPriorAddresses, setCoBorrowerPriorAddresses] = useState<{ id: string }[]>([]);

  // Function to add a new co-borrower prior address
  const addCoBorrowerPriorAddress = () => {
    const newAddress = { id: crypto.randomUUID() };
    setCoBorrowerPriorAddresses(prev => [...prev, newAddress]);
  };

  // Function to remove a co-borrower prior address
  const removeCoBorrowerPriorAddress = (addressId: string) => {
    setConfirmRemovalDialog({
      isOpen: true,
      type: 'prior-address',
      itemId: addressId,
      onConfirm: () => {
        setCoBorrowerPriorAddresses(prev => prev.filter(addr => addr.id !== addressId));
        setConfirmRemovalDialog({ isOpen: false, type: null });
      }
    });
  };

  // Function to remove borrower first prior employer

  // Function to remove co-borrower first prior employer

  // Function to remove co-borrower second prior employer

  
  // Function to remove a third loan
  const removeThirdLoan = (propertyIndex: number) => {
    setConfirmRemovalDialog({
      isOpen: true,
      type: 'third-loan',
      itemId: propertyIndex.toString(),
      onConfirm: () => {
        form.setValue(`property.properties.${propertyIndex}.activeThirdLoan` as const, '');
        form.setValue(`property.properties.${propertyIndex}.thirdLoan` as const, {
          lenderName: '',
          loanNumber: '',
          mortgageBalance: '',
          piPayment: '',
          escrowPayment: '',
          totalMonthlyPayment: '',
        });
        setConfirmRemovalDialog({ isOpen: false, type: null });
      }
    });
  };
  
  // Borrower income section collapsible states
  const [isEmploymentIncomeOpen, setIsEmploymentIncomeOpen] = useState(false);
  const [isSecondEmploymentIncomeOpen, setIsSecondEmploymentIncomeOpen] = useState(false);
  const [isSelfEmploymentIncomeOpen, setIsSelfEmploymentIncomeOpen] = useState(false);
  const [isSocialSecurityIncomeOpen, setIsSocialSecurityIncomeOpen] = useState(false);
  const [isVaBenefitsIncomeOpen, setIsVaBenefitsIncomeOpen] = useState(false);
  const [isDisabilityIncomeOpen, setIsDisabilityIncomeOpen] = useState(false);
  const [isOtherIncomeOpen, setIsOtherIncomeOpen] = useState(false);

  // Co-Borrower income collapsible state
  const [isCoBorrowerEmploymentIncomeOpen, setIsCoBorrowerEmploymentIncomeOpen] = useState(false);
  const [isCoBorrowerSelfEmploymentIncomeOpen, setIsCoBorrowerSelfEmploymentIncomeOpen] = useState(false);
  const [isCoBorrowerSocialSecurityIncomeOpen, setIsCoBorrowerSocialSecurityIncomeOpen] = useState(false);
  const [isCoBorrowerVaBenefitsIncomeOpen, setIsCoBorrowerVaBenefitsIncomeOpen] = useState(false);
  const [isCoBorrowerDisabilityIncomeOpen, setIsCoBorrowerDisabilityIncomeOpen] = useState(false);
  const [isCoBorrowerOtherIncomeOpen, setIsCoBorrowerOtherIncomeOpen] = useState(false);

  // Pension income collapsible state
  const [isPensionIncomeOpen, setIsPensionIncomeOpen] = useState(false);
  const [isCoBorrowerPensionIncomeOpen, setIsCoBorrowerPensionIncomeOpen] = useState(false);

  // Address box collapsible states
  const [isBorrowerOpen, setIsBorrowerOpen] = useState(true);
  const [isCoBorrowerOpen, setIsCoBorrowerOpen] = useState(true);
  const [isBorrowerResidenceOpen, setIsBorrowerResidenceOpen] = useState(false);
  const [isBorrowerPriorResidenceOpen, setIsBorrowerPriorResidenceOpen] = useState(false);
  const [isShowingMonthsAtAddress, setIsShowingMonthsAtAddress] = useState(false);
  const [isShowingMonthsAtPriorAddress, setIsShowingMonthsAtPriorAddress] = useState(false);
  const [isShowingCoBorrowerMonthsAtAddress, setIsShowingCoBorrowerMonthsAtAddress] = useState(false);
  const [isShowingCoBorrowerMonthsAtPriorAddress, setIsShowingCoBorrowerMonthsAtPriorAddress] = useState(false);
  
  // Lead Reference toggle state
  const [isShowingDMBatch, setIsShowingDMBatch] = useState(false);
  const [isCoBorrowerResidenceOpen, setIsCoBorrowerResidenceOpen] = useState(false);
  const [isCoBorrowerPriorResidenceOpen, setIsCoBorrowerPriorResidenceOpen] = useState(false);
  
  // Current Residence "Present" toggle states
  const [isBorrowerCurrentResidencePresent, setIsBorrowerCurrentResidencePresent] = useState(false);
  const [isCoBorrowerCurrentResidencePresent, setIsCoBorrowerCurrentResidencePresent] = useState(false);

  // Residence Information dialog states
  const [isResidenceInfoDialogOpen, setIsResidenceInfoDialogOpen] = useState(false);
  const [activeResidenceSection, setActiveResidenceSection] = useState<string | null>(null);
  const [residenceInfoText, setResidenceInfoText] = useState('');

  // Rental Residence Information Dialog states
  const [isRentalInfoDialogOpen, setIsRentalInfoDialogOpen] = useState(false);
  const [activeRentalSection, setActiveRentalSection] = useState<string | null>(null);
  const [rentalInfoData, setRentalInfoData] = useState({
    landlordName: '',
    email: '',
    phone: '',
    propertyType: '',
    monthlyRent: '',
    notes: ''
  });

  // Employment toggle states - Years/Months Employed
  const [isShowingMonthsEmployed, setIsShowingMonthsEmployed] = useState(false);
  const [isCoBorrowerShowingMonthsEmployed, setIsCoBorrowerShowingMonthsEmployed] = useState(false);
  
  // Guideline DTI toggle state - Guideline DTI / Guideline - Front DTI
  const [isShowingGuidelineFrontDTI, setIsShowingGuidelineFrontDTI] = useState(false);
  
  // DTI inline editing states
  const [isFrontDTIEditing, setIsFrontDTIEditing] = useState(false);
  const [isBackDTIEditing, setIsBackDTIEditing] = useState(false);
  const [isGuidelineDTIEditing, setIsGuidelineDTIEditing] = useState(false);
  
  // Template card toggle state - End Date / Present
  const [isShowingPresent, setIsShowingPresent] = useState(false);

  // Helper function to generate dynamic field paths for main employer cards
  const getEmployerFieldPath = (cardId: string, fieldName: string) => {
    const cleanCardId = cardId === 'default' ? 'default' : cardId;
    return `income.employers.${cleanCardId}.${fieldName}` as const;
  };

  // Helper function to generate dynamic field paths for second employer cards
  const getSecondEmployerFieldPath = (cardId: string, fieldName: string) => {
    const cleanCardId = cardId === 'default' ? 'default' : cardId;
    return `income.secondEmployers.${cleanCardId}.${fieldName}` as const;
  };

  // Helper function to generate dynamic field paths for self-employment cards
  const getSelfEmploymentFieldPath = (cardId: string, fieldName: string) => {
    const cleanCardId = cardId === 'default' ? 'default' : cardId;
    return `income.selfEmployment.${cleanCardId}.${fieldName}` as const;
  };

  // Helper function to generate dynamic field paths for co-borrower employer cards
  const getCoBorrowerEmployerFieldPath = (cardId: string, fieldName: string) => {
    const cleanCardId = cardId === 'default' ? 'default' : cardId;
    return `coBorrowerIncome.employers.${cleanCardId}.${fieldName}` as const;
  };

  // Helper function to generate dynamic field paths for co-borrower second employer cards
  const getCoBorrowerSecondEmployerFieldPath = (cardId: string, fieldName: string) => {
    const cleanCardId = cardId === 'default' ? 'default' : cardId;
    return `coBorrowerIncome.secondEmployers.${cleanCardId}.${fieldName}` as const;
  };

  // Helper function to generate dynamic field paths for co-borrower self-employment cards
  const getCoBorrowerSelfEmploymentFieldPath = (cardId: string, fieldName: string) => {
    const cleanCardId = cardId === 'default' ? 'default' : cardId;
    return `coBorrowerIncome.selfEmployment.${cleanCardId}.${fieldName}` as const;
  };
  
  // Update employment duration when dates change
  const updateEmploymentDuration = (cardId: string, startDate: string, endDate: string, isPresent: boolean) => {
    const duration = calculateEmploymentDuration(startDate, endDate, isPresent);
    setEmploymentDates(prev => ({
      ...prev,
      [cardId]: {
        startDate,
        endDate,
        isPresent,
        duration
      }
    }));
  };
  
  // Employment toggle states - Monthly/Annual Bonus Income  
  const [isShowingAnnualBonus, setIsShowingAnnualBonus] = useState(false);
  const [isCoBorrowerShowingAnnualBonus, setIsCoBorrowerShowingAnnualBonus] = useState(false);

  // Revenue toggle states for self-employment
  const [isShowingNetRevenue, setIsShowingNetRevenue] = useState(false);
  const [isCoBorrowerShowingNetRevenue, setIsCoBorrowerShowingNetRevenue] = useState(false);
  
  // Revenue toggle states for employer cards (per-card)
  const [isShowingEmployerNetIncome, setIsShowingEmployerNetIncome] = useState<Record<string, boolean>>({});

  // Loan details collapsible state (per property)
  const [isLoanDetailsOpen, setIsLoanDetailsOpen] = useState<Record<string, boolean>>({});
  const [isSecondLoanDetailsOpen, setIsSecondLoanDetailsOpen] = useState<Record<string, boolean>>({});

  // Property collapsible state (using object to manage multiple property cards)
  const [propertyCardStates, setPropertyCardStates] = useState<Record<string, boolean>>({});
  
  // Current Primary Loan card collapsible state (per-card state management)
  const [currentLoanCardStates, setCurrentLoanCardStates] = useState<Record<string, boolean>>({});
  
  // Current Second Loan card collapsible state (per-card state management)
  const [secondLoanCardStates, setSecondLoanCardStates] = useState<Record<string, boolean>>({});
  
  // Current Third Loan card collapsible state (per-card state management)
  const [thirdLoanCardStates, setThirdLoanCardStates] = useState<Record<string, boolean>>({});
  
  // Purchase Loan card collapsible state (per-card state management)
  
  // Borrower Employer cards state management
  const [borrowerEmployerCards, setBorrowerEmployerCards] = useState<string[]>([]);
  
  // Borrower Second Employer cards state management
  const [borrowerSecondEmployerCards, setBorrowerSecondEmployerCards] = useState<string[]>(['default']);
  
  // Co-borrower Second Employer cards state management
  const [coBorrowerSecondEmployerCards, setCoBorrowerSecondEmployerCards] = useState<string[]>(['default']);
  
  // Borrower Self-Employment cards state management
  const [borrowerSelfEmploymentCards, setBorrowerSelfEmploymentCards] = useState<string[]>(['default']);
  
  // Co-borrower Self-Employment cards state management
  const [coBorrowerSelfEmploymentCards, setCoBorrowerSelfEmploymentCards] = useState<string[]>(['default']);
  
  // Primary Residence cards state management (similar to employer cards)
  const [primaryResidenceCards, setPrimaryResidenceCards] = useState<string[]>([]);
  
  // Primary Residence card data state
  const [primaryResidenceData, setPrimaryResidenceData] = useState<Record<string, {
    isSubjectProperty: boolean | null; // null = not selected, true = yes, false = no
  }>>({});

  // Second Home cards state management (identical to primary residence cards)
  const [secondHomeCards, setSecondHomeCards] = useState<string[]>([]);
  
  // Second Home card data state
  const [secondHomeData, setSecondHomeData] = useState<Record<string, {
    isSubjectProperty: boolean | null; // null = not selected, true = yes, false = no
  }>>({});

  // Investment Property cards state management (identical to second home cards)
  const [investmentCards, setInvestmentCards] = useState<string[]>([]);
  
  // Investment Property card data state
  const [investmentData, setInvestmentData] = useState<Record<string, {
    isSubjectProperty: boolean | null; // null = not selected, true = yes, false = no
  }>>({});

  // Current Primary Loan cards state management (similar to property cards)
  const [currentPrimaryLoanCards, setCurrentPrimaryLoanCards] = useState<string[]>([]);
  
  // Current Primary Loan card data state
  const [currentPrimaryLoanData, setCurrentPrimaryLoanData] = useState<Record<string, {
    isDefaultCard: boolean | null; // null = not selected, true = default card created
  }>>({});

  // Current Second Loan cards state management (similar to property cards and primary loan cards)
  const [currentSecondLoanCards, setCurrentSecondLoanCards] = useState<string[]>([]);
  
  // Current Second Loan card data state
  const [currentSecondLoanData, setCurrentSecondLoanData] = useState<Record<string, {
    isDefaultCard: boolean | null; // null = not selected, true = default card created
  }>>({});

  // Current Third Loan cards state management (similar to property cards and other loan cards)
  const [currentThirdLoanCards, setCurrentThirdLoanCards] = useState<string[]>([]);
  
  // Current Third Loan card data state
  const [currentThirdLoanData, setCurrentThirdLoanData] = useState<Record<string, {
    isDefaultCard: boolean | null; // null = not selected, true = default card created
  }>>({});

  
  // Employment dates state for each card
  const [employmentDates, setEmploymentDates] = useState<Record<string, {
    startDate: string;
    endDate: string;
    isPresent: boolean;
    duration: string;
  }>>({});
  
  // Delete confirmation dialog state for Borrower Employer
  const [deleteEmployerDialog, setDeleteEmployerDialog] = useState<{
    isOpen: boolean;
    cardId: string;
  }>({ isOpen: false, cardId: '' });

  // Delete confirmation dialog state for Borrower Second Employer
  const [deleteSecondEmployerDialog, setDeleteSecondEmployerDialog] = useState<{
    isOpen: boolean;
    cardId: string;
  }>({ isOpen: false, cardId: '' });

  // Delete confirmation dialog state for Co-borrower Second Employer
  const [deleteCoBorrowerSecondEmployerDialog, setDeleteCoBorrowerSecondEmployerDialog] = useState<{
    isOpen: boolean;
    cardId: string;
  }>({ isOpen: false, cardId: '' });

  // Delete confirmation dialog state for Primary Residence cards
  const [deletePrimaryResidenceDialog, setDeletePrimaryResidenceDialog] = useState<{
    isOpen: boolean;
    cardId: string;
  }>({ isOpen: false, cardId: '' });

  // Delete confirmation dialog state for Home Purchase cards
  const [deleteHomePurchaseDialog, setDeleteHomePurchaseDialog] = useState<{
    isOpen: boolean;
    cardId: string;
  }>({ isOpen: false, cardId: '' });

  // Delete confirmation dialog state for Second Home cards
  const [deleteSecondHomeDialog, setDeleteSecondHomeDialog] = useState<{
    isOpen: boolean;
    cardId: string;
  }>({ isOpen: false, cardId: '' });

  // Delete confirmation dialog state for Investment Property cards
  const [deleteInvestmentDialog, setDeleteInvestmentDialog] = useState<{
    isOpen: boolean;
    cardId: string;
  }>({ isOpen: false, cardId: '' });

  // Delete confirmation dialog state for Current Primary Loan cards
  const [deleteCurrentPrimaryLoanDialog, setDeleteCurrentPrimaryLoanDialog] = useState<{
    isOpen: boolean;
    cardId: string;
  }>({ isOpen: false, cardId: '' });

  // Delete confirmation dialog state for Current Second Loan cards
  const [deleteCurrentSecondLoanDialog, setDeleteCurrentSecondLoanDialog] = useState<{
    isOpen: boolean;
    cardId: string;
  }>({ isOpen: false, cardId: '' });

  // Delete confirmation dialog state for Current Third Loan cards
  const [deleteCurrentThirdLoanDialog, setDeleteCurrentThirdLoanDialog] = useState<{
    isOpen: boolean;
    cardId: string;
  }>({ isOpen: false, cardId: '' });

  // Delete confirmation dialog state for ABC (New Refinance Loan) card
  const [deleteAbcDialog, setDeleteAbcDialog] = useState<{
    isOpen: boolean;
  }>({ isOpen: false });

  // Delete confirmation dialog state for BBB (New Purchase Loan) card
  const [deleteBbbDialog, setDeleteBbbDialog] = useState<{
    isOpen: boolean;
  }>({ isOpen: false });

  // Warning dialog for when trying to open a second new loan card
  const [newLoanConflictDialog, setNewLoanConflictDialog] = useState(false);


  // Delete confirmation dialog state for Borrower Self-Employment
  const [deleteSelfEmploymentDialog, setDeleteSelfEmploymentDialog] = useState<{
    isOpen: boolean;
    cardId: string;
  }>({ isOpen: false, cardId: '' });

  // Delete confirmation dialog state for Co-borrower Self-Employment
  const [deleteCoBorrowerSelfEmploymentDialog, setDeleteCoBorrowerSelfEmploymentDialog] = useState<{
    isOpen: boolean;
    cardId: string;
  }>({ isOpen: false, cardId: '' });

  // Delete confirmation dialog state for Social Security Income
  const [deleteSocialSecurityDialog, setDeleteSocialSecurityDialog] = useState<{
    isOpen: boolean;
  }>({ isOpen: false });

  // Delete confirmation dialog state for VA Disability Income
  const [deleteVaBenefitsDialog, setDeleteVaBenefitsDialog] = useState<{
    isOpen: boolean;
  }>({ isOpen: false });

  // Delete confirmation dialog state for Disability Income
  const [deleteDisabilityDialog, setDeleteDisabilityDialog] = useState<{
    isOpen: boolean;
  }>({ isOpen: false });

  // Delete confirmation dialog state for Co-Borrower Social Security Income
  const [deleteCoBorrowerSocialSecurityDialog, setDeleteCoBorrowerSocialSecurityDialog] = useState<{
    isOpen: boolean;
  }>({ isOpen: false });

  // Delete confirmation dialog state for Co-Borrower VA Disability Income
  const [deleteCoBorrowerVaBenefitsDialog, setDeleteCoBorrowerVaBenefitsDialog] = useState<{
    isOpen: boolean;
  }>({ isOpen: false });

  // Delete confirmation dialog state for Co-Borrower Disability Income
  const [deleteCoBorrowerDisabilityDialog, setDeleteCoBorrowerDisabilityDialog] = useState<{
    isOpen: boolean;
  }>({ isOpen: false });

  // State for VA Disability and Other Disability selections
  const [vaDisabilitySelected, setVaDisabilitySelected] = useState(false);
  const [otherDisabilitySelected, setOtherDisabilitySelected] = useState(false);

  // Delete confirmation dialogs for individual disability types
  const [deleteVaDisabilityTypeDialog, setDeleteVaDisabilityTypeDialog] = useState<{
    isOpen: boolean;
  }>({ isOpen: false });

  const [deleteOtherDisabilityTypeDialog, setDeleteOtherDisabilityTypeDialog] = useState<{
    isOpen: boolean;
  }>({ isOpen: false });

  // State for Co-Borrower VA Disability and Other Disability selections
  const [coBorrowerVaDisabilitySelected, setCoBorrowerVaDisabilitySelected] = useState(false);
  const [coBorrowerOtherDisabilitySelected, setCoBorrowerOtherDisabilitySelected] = useState(false);

  // Delete confirmation dialogs for Co-Borrower individual disability types
  const [deleteCoBorrowerVaDisabilityTypeDialog, setDeleteCoBorrowerVaDisabilityTypeDialog] = useState<{
    isOpen: boolean;
  }>({ isOpen: false });

  const [deleteCoBorrowerOtherDisabilityTypeDialog, setDeleteCoBorrowerOtherDisabilityTypeDialog] = useState<{
    isOpen: boolean;
  }>({ isOpen: false });

  // Delete confirmation dialog state for Co-Borrower Other Income
  const [deleteCoBorrowerOtherDialog, setDeleteCoBorrowerOtherDialog] = useState<{
    isOpen: boolean;
  }>({ isOpen: false });

  // Co-Borrower Employer cards state management
  const [coBorrowerEmployerCards, setCoBorrowerEmployerCards] = useState<string[]>([]);
  
  // Delete confirmation dialog state for Co-Borrower Employer
  const [deleteCoBorrowerEmployerDialog, setDeleteCoBorrowerEmployerDialog] = useState<{
    isOpen: boolean;
    cardId: string;
  }>({ isOpen: false, cardId: '' });

  // Employment duration calculation function
  const calculateEmploymentDuration = (startDate: string, endDate: string, isPresent: boolean = false) => {
    if (!startDate) return '';
    
    const start = new Date(startDate);
    const end = isPresent ? new Date() : new Date(endDate);
    
    if (!endDate && !isPresent) return '';
    if (start > end) return '';
    
    // Calculate difference in months
    let yearsDiff = end.getFullYear() - start.getFullYear();
    let monthsDiff = end.getMonth() - start.getMonth();
    let daysDiff = end.getDate() - start.getDate();
    
    // Calculate total months first
    let totalMonths = yearsDiff * 12 + monthsDiff;
    
    // Round days to nearest month: if >= 15 days, add 1 month
    if (daysDiff >= 15) {
      totalMonths += 1;
    } else if (daysDiff < 0) {
      // If end day is before start day, we haven't completed the month
      totalMonths -= 1;
    }
    
    if (totalMonths < 0) return '';
    
    if (totalMonths < 1) {
      return `${totalMonths.toFixed(1)} months`;
    } else if (totalMonths < 12) {
      return `${totalMonths.toFixed(1)} months`;
    } else {
      const years = totalMonths / 12;
      return `${years.toFixed(1)} years`;
    }
  };
  
  // Subject property confirmation dialog state
  const [subjectConfirmDialog, setSubjectConfirmDialog] = useState<{
    isOpen: boolean;
    newSubjectPropertyId: string | null;
  }>({ isOpen: false, newSubjectPropertyId: null });

  // Removal confirmation dialog state
  const [confirmRemovalDialog, setConfirmRemovalDialog] = useState<{
    isOpen: boolean;
    type: 'co-borrower' | 'property' | 'property-type' | 'income' | 'prior-address' | 'third-loan' | 'second-loan' | 'current-loan' | 'prior-employer' | null;
    itemId?: string;
    itemType?: string;
    onConfirm?: () => void;
  }>({ isOpen: false, type: null });

  // Property valuation modal state
  const [valuationDialog, setValuationDialog] = useState<{
    isOpen: boolean;
    service: 'zillow' | 'redfin' | 'realtor' | null;
    propertyIndex: number | null;
    currentValue: string;
  }>({ isOpen: false, service: null, propertyIndex: null, currentValue: '' });

  // Property valuation hover tooltip state
  const [valuationHover, setValuationHover] = useState<{
    isVisible: boolean;
    service: 'zillow' | 'redfin' | 'realtor' | null;
    propertyIndex: number | null;
    value: string;
    position: { x: number; y: number };
  }>({ isVisible: false, service: null, propertyIndex: null, value: '', position: { x: 0, y: 0 } });
  
  const [valuationInput, setValuationInput] = useState('');
  
  // Business description popup state
  const [businessDescriptionDialog, setBusinessDescriptionDialog] = useState<{
    isOpen: boolean;
    cardId: string | null;
    currentValue: string;
    type: 'borrower' | 'co-borrower';
  }>({ isOpen: false, cardId: null, currentValue: '', type: 'borrower' });
  
  const [businessDescriptionInput, setBusinessDescriptionInput] = useState('');
  
  // Tax preparer popup state
  const [taxPreparerDialog, setTaxPreparerDialog] = useState<{
    isOpen: boolean;
    cardId: string | null;
    currentValue: string;
    type: 'borrower' | 'co-borrower';
  }>({ isOpen: false, cardId: null, currentValue: '', type: 'borrower' });
  
  const [taxPreparerInput, setTaxPreparerInput] = useState('');

  // Unsaved changes warning dialog state
  const [unsavedChangesDialog, setUnsavedChangesDialog] = useState<{
    isOpen: boolean;
  }>({ isOpen: false });

  // Screenshare state
  const [screenshareLoading, setScreenshareLoading] = useState(false);

  // Co-borrower marital status popup state
  const [maritalStatusDialog, setMaritalStatusDialog] = useState<{
    isOpen: boolean;
  }>({ isOpen: false });


  // Valuation summary dialog state
  const [valuationSummaryDialog, setValuationSummaryDialog] = useState<{
    isOpen: boolean;
    propertyIndex: number | null;
  }>({ isOpen: false, propertyIndex: null });


  // County lookup state
  const [borrowerCountyOptions, setBorrowerCountyOptions] = useState<Array<{value: string, label: string}>>([]);
  const [coBorrowerCountyOptions, setCoBorrowerCountyOptions] = useState<Array<{value: string, label: string}>>([]);
  const [borrowerPriorCountyOptions, setBorrowerPriorCountyOptions] = useState<Array<{value: string, label: string}>>([]);
  const [coBorrowerPriorCountyOptions, setCoBorrowerPriorCountyOptions] = useState<Array<{value: string, label: string}>>([]);
  
  // Employment income county lookup state
  const [borrowerEmployerCountyOptions, setBorrowerEmployerCountyOptions] = useState<Array<{value: string, label: string}>>([]);
  const [borrowerPriorEmployerCountyOptions, setBorrowerPriorEmployerCountyOptions] = useState<Array<{value: string, label: string}>>([]);
  const [coBorrowerEmployerCountyOptions, setCoBorrowerEmployerCountyOptions] = useState<Record<string, Array<{value: string, label: string}>>>({});
  const [coBorrowerPriorEmployerCountyOptions, setCoBorrowerPriorEmployerCountyOptions] = useState<Array<{value: string, label: string}>>([]);
  const [coBorrowerSecondEmployerCountyOptions, setCoBorrowerSecondEmployerCountyOptions] = useState<Record<string, Array<{value: string, label: string}>>>({});
  
  const [countyLookupLoading, setCountyLookupLoading] = useState<{
    borrower: boolean, 
    coBorrower: boolean, 
    borrowerPrior: boolean, 
    coBorrowerPrior: boolean,
    borrowerEmployer: boolean,
    borrowerPriorEmployer: boolean,
    coBorrowerEmployer: Record<string, boolean>,
    coBorrowerPriorEmployer: boolean,
    coBorrowerSecondEmployer: boolean
  }>({
    borrower: false, 
    coBorrower: false, 
    borrowerPrior: false, 
    coBorrowerPrior: false,
    borrowerEmployer: false,
    borrowerPriorEmployer: false,
    coBorrowerEmployer: {},
    coBorrowerPriorEmployer: false,
    coBorrowerSecondEmployer: false
  });

  // Property rental popup dialog state
  const [propertyRentalDialog, setPropertyRentalDialog] = useState<{
    isOpen: boolean;
    type: 'add' | 'remove' | null;
  }>({ isOpen: false, type: null });

  // Property usage change confirmation dialog state
  const [propertyUsageChangeDialog, setPropertyUsageChangeDialog] = useState<{
    isOpen: boolean;
    propertyId: string | undefined;
    newUsage: 'primary' | 'second-home' | 'investment' | undefined;
  }>({ isOpen: false, propertyId: undefined, newUsage: undefined });

  // Add property confirmation dialog state
  const [addPropertyDialog, setAddPropertyDialog] = useState<{
    isOpen: boolean;
    propertyType: 'second-home' | 'investment' | null;
  }>({ isOpen: false, propertyType: null });

  // Mortgage balance field toggle state (per property)
  const [mortgageBalanceFieldType, setMortgageBalanceFieldType] = useState<Record<string, 'statement' | 'payoff'>>({});
  
  // Second mortgage balance field toggle state (per property)
  const [secondMortgageBalanceFieldType, setSecondMortgageBalanceFieldType] = useState<Record<string, 'statement' | 'payoff'>>({});
  
  // Escrow payment field toggle state (per property)
  const [escrowPaymentFieldType, setEscrowPaymentFieldType] = useState<Record<string, 'tax-insurance' | 'property-tax' | 'home-insurance'>>({});

  // Current Second Loan escrow toggle state (3-state cycle)
  const [secondLoanEscrowType, setSecondLoanEscrowType] = useState<'tax-insurance' | 'insurance-only' | 'property-tax-only'>('tax-insurance');

  // Purchase Loan - New Loan conflict prevention state (only for purchase now)
  const [currentNewLoanType, setCurrentNewLoanType] = useState<'refinance' | 'purchase' | null>(null);
  const [showLoanConflictDialog, setShowLoanConflictDialog] = useState(false);

  // Borrower Credit Scores popup dialog state
  const [borrowerCreditScoresDialog, setBorrowerCreditScoresDialog] = useState({
    isOpen: false,
    experian: '',
    midFico: '',
    equifax: '',
    transunion: ''
  });

  // Co-Borrower Credit Scores popup dialog state
  const [coBorrowerCreditScoresDialog, setCoBorrowerCreditScoresDialog] = useState({
    isOpen: false,
    experian: '',
    midFico: '',
    equifax: '',
    transunion: ''
  });

  // Co-Borrower warning dialog state
  const [coBorrowerWarningDialog, setCoBorrowerWarningDialog] = useState(false);

  // ABC card toggle states (Migrated from Brand New Loan - Refinance)
  const [abcFicoType, setAbcFicoType] = useState<'mid-fico' | 'borrower-scores' | 'co-borrower-scores'>('mid-fico');

  // BBB card toggle states
  const [bbbFicoType, setBbbFicoType] = useState<'mid-fico' | 'borrower-scores' | 'co-borrower-scores'>('mid-fico');

  // Helper function to get Current Second Loan escrow label and handle toggle cycling
  const getSecondLoanEscrowLabel = () => {
    switch (secondLoanEscrowType) {
      case 'tax-insurance': return 'Tax & Insurance';
      case 'insurance-only': return 'Insurance Only';
      case 'property-tax-only': return 'Property Tax Only';
      default: return 'Tax & Insurance';
    }
  };

  const cycleSecondLoanEscrowType = () => {
    setSecondLoanEscrowType(current => {
      switch (current) {
        case 'tax-insurance': return 'insurance-only';
        case 'insurance-only': return 'property-tax-only';
        case 'property-tax-only': return 'tax-insurance';
        default: return 'tax-insurance';
      }
    });
  };

  // ABC card FICO label and type cycling functions (Migrated from Brand New Loan - Refinance)
  const getAbcFicoLabel = () => {
    switch (abcFicoType) {
      case 'mid-fico': return 'Mid FICO';
      case 'borrower-scores': return 'Borrower Credit Scores';
      case 'co-borrower-scores': return 'Co-Borrower Credit Scores';
      default: return 'Mid FICO';
    }
  };

  const cycleAbcFicoType = () => {
    setAbcFicoType(current => {
      switch (current) {
        case 'mid-fico': return 'borrower-scores';
        case 'borrower-scores': return 'co-borrower-scores';
        case 'co-borrower-scores': return 'mid-fico';
        default: return 'mid-fico';
      }
    });
  };

  // Calculate Mid FICO value for ABC card based on borrower and co-borrower scores
  const getAbcCalculatedMidFico = () => {
    const borrowerMidFico = borrowerCreditScoresDialog.midFico;
    const coBorrowerMidFico = coBorrowerCreditScoresDialog.midFico;

    // If no Co-Borrower, return Borrower Mid FICO value or "Pending"
    if (!hasCoBorrower) {
      return borrowerMidFico || "Pending";
    }

    // If Co-Borrower exists, both scores must be present to calculate
    if (borrowerMidFico && coBorrowerMidFico) {
      const borrowerScore = parseInt(borrowerMidFico);
      const coBorrowerScore = parseInt(coBorrowerMidFico);
      
      // Return the lower value
      return Math.min(borrowerScore, coBorrowerScore).toString();
    }

    // If either score is missing, return "Pending"
    return "Pending";
  };

  // BBB card FICO label and type cycling functions
  const getBbbFicoLabel = () => {
    switch (bbbFicoType) {
      case 'mid-fico': return 'Mid FICO';
      case 'borrower-scores': return 'Borrower Credit Scores';
      case 'co-borrower-scores': return 'Co-Borrower Credit Scores';
      default: return 'Mid FICO';
    }
  };

  const cycleBbbFicoType = () => {
    setBbbFicoType(current => {
      switch (current) {
        case 'mid-fico': return 'borrower-scores';
        case 'borrower-scores': return 'co-borrower-scores';
        case 'co-borrower-scores': return 'mid-fico';
        default: return 'mid-fico';
      }
    });
  };

  // Calculate Mid FICO value for BBB card based on borrower and co-borrower scores
  const getBbbCalculatedMidFico = () => {
    const borrowerMidFico = borrowerCreditScoresDialog.midFico;
    const coBorrowerMidFico = coBorrowerCreditScoresDialog.midFico;

    // If no Co-Borrower, return Borrower Mid FICO value or "Pending"
    if (!hasCoBorrower) {
      return borrowerMidFico || "Pending";
    }

    // If Co-Borrower exists, both scores must be present to calculate
    if (borrowerMidFico && coBorrowerMidFico) {
      const borrowerScore = parseInt(borrowerMidFico);
      const coBorrowerScore = parseInt(coBorrowerMidFico);
      
      // Return the lower value
      return Math.min(borrowerScore, coBorrowerScore).toString();
    }

    // If either score is missing, return "Pending"
    return "Pending";
  };

  const form = useForm<InsertClient>({
    resolver: zodResolver(insertClientSchema),
    defaultValues: {
      borrower: {
        firstName: '',
        middleName: '',
        lastName: '',
        phone: '',
        email: '',
        maritalStatus: 'Select',
        dateOfBirth: '',
        ssn: '',
        residenceAddress: {
          street: '',
          unit: '',
          city: '',
          state: '',
          zip: '',
        },
        yearsAtAddress: '',
        monthsAtAddress: '',
        priorResidenceAddress: {
          street: '',
          unit: '',
          city: '',
          state: '',
          zip: '',
          county: ''
        },
        priorYearsAtAddress: '',
        priorMonthsAtAddress: '',
        subjectProperty: undefined,
        stage: 'Lead',
        leadRef: '',
        source: 'Select',
        callDate: '',
        startDate: '',
      },
      coBorrower: undefined,
      income: {
        incomeTypes: {
          employment: false,
          secondEmployment: false,
          selfEmployment: false,
          pension: false,
          socialSecurity: false,
          vaBenefits: false,
          disability: false,
          other: false
        },
        employerName: '',
        jobTitle: '',
        monthlyIncome: '',
        yearsEmployedYears: '',
        yearsEmployedMonths: '',
        employerAddress: {
          street: '',
          unit: '',
          city: '',
          state: '',
          zip: '',
          county: ''
        },
        employerPhone: '',
        // Multiple Main Employers (new structure for dynamic cards)
        employers: {
          default: {
            employerName: '',
            jobTitle: '',
            monthlyIncome: '',
            monthlyBonusIncome: '',
            annualBonusIncome: '',
            employmentType: 'Full-Time' as const,
            yearsEmployedYears: '',
            yearsEmployedMonths: '',
            employerAddress: {
              street: '',
              unit: '',
              city: '',
              state: '',
              zip: '',
              county: ''
            },
            employerPhone: '',
            employmentVerificationPhone: '',
            isShowingEmploymentVerification: false,
            employerRemote: ''
          }
        },
        priorEmployerName: '',
        priorJobTitle: '',
        priorMonthlyIncome: '',
        priorYearsEmployedYears: '',
        priorYearsEmployedMonths: '',
        priorEmployerAddress: {
          street: '',
          unit: '',
          city: '',
          state: '',
          zip: '',
          county: ''
        },
        priorEmployerPhone: '',
        secondEmployerName: '',
        secondJobTitle: '',
        secondMonthlyIncome: '',
        secondYearsEmployedYears: '',
        secondYearsEmployedMonths: '',
        secondEmployerAddress: {
          street: '',
          unit: '',
          city: '',
          state: '',
          zip: '',
          county: ''
        },
        secondEmployerPhone: '',
        businessName: '',
        businessMonthlyIncome: '',
        yearsInBusinessYears: '',
        yearsInBusinessMonths: '',
        businessAddress: {
          street: '',
          unit: '',
          city: '',
          state: '',
          zip: '',
          county: ''
        },
        businessPhone: '',
        pensions: [],
        socialSecurityMonthlyAmount: '',
        vaBenefitsMonthlyAmount: '',
        disabilityPayerName: '',
        disabilityMonthlyAmount: '',
        otherIncomeDescription: '',
        otherIncomeMonthlyAmount: '',
        frontDTI: '',
        backDTI: '',
        guidelineDTI: '',
      },
      coBorrowerIncome: {
        incomeTypes: {
          employment: false,
          secondEmployment: false,
          selfEmployment: false,
          pension: false,
          socialSecurity: false,
          vaBenefits: false,
          disability: false,
          other: false
        },
        employerName: '',
        jobTitle: '',
        monthlyIncome: '',
        yearsEmployedYears: '',
        yearsEmployedMonths: '',
        employerAddress: {
          street: '',
          unit: '',
          city: '',
          state: '',
          zip: '',
          county: ''
        },
        employerPhone: '',
        // Multiple Co-Borrower Employers (new structure for dynamic cards)
        employers: {
          default: {
            employerName: '',
            jobTitle: '',
            monthlyIncome: '',
            monthlyBonusIncome: '',
            annualBonusIncome: '',
            employmentType: 'Full-Time' as const,
            yearsEmployedYears: '',
            yearsEmployedMonths: '',
            employerAddress: {
              street: '',
              unit: '',
              city: '',
              state: '',
              zip: '',
              county: ''
            },
            employerPhone: '',
            employmentVerificationPhone: '',
            isShowingEmploymentVerification: false,
            employerRemote: ''
          }
        },
        priorEmployerName: '',
        priorJobTitle: '',
        priorMonthlyIncome: '',
        priorYearsEmployedYears: '',
        priorYearsEmployedMonths: '',
        priorEmployerAddress: {
          street: '',
          unit: '',
          city: '',
          state: '',
          zip: '',
          county: ''
        },
        priorEmployerPhone: '',
        secondEmployerName: '',
        secondJobTitle: '',
        secondMonthlyIncome: '',
        secondYearsEmployedYears: '',
        secondYearsEmployedMonths: '',
        secondEmployerAddress: {
          street: '',
          unit: '',
          city: '',
          state: '',
          zip: '',
          county: ''
        },
        secondEmployerPhone: '',
        businessName: '',
        businessMonthlyIncome: '',
        yearsInBusinessYears: '',
        yearsInBusinessMonths: '',
        businessAddress: {
          street: '',
          unit: '',
          city: '',
          state: '',
          zip: '',
          county: ''
        },
        businessPhone: '',
        pensions: [],
        socialSecurityMonthlyAmount: '',
        vaBenefitsMonthlyAmount: '',
        disabilityPayerName: '',
        disabilityMonthlyAmount: '',
        otherIncomeDescription: '',
        otherIncomeMonthlyAmount: '',
        frontDTI: '',
        backDTI: '',
        guidelineDTI: '',
      },
      property: {
        estimatedLTV: '',
        properties: [],
      },
      currentLoan: {
        currentLender: '',
        loanNumber: '',
        loanStartDate: '',
        remainingTermPerCreditReport: '',
        currentBalance: '',
        currentRate: '',
        principalAndInterestPayment: '',
        escrowPayment: '',
        totalMonthlyPayment: '',
        prepaymentPenalty: 'No' as const,
        statementBalance: {
          mode: 'Statement Balance' as const,
          amount: '',
        },
        attachedToProperty: '' as const,
        propertyAddress: {
          street: '',
          unit: '',
          city: '',
          state: '',
          zipCode: '',
          county: '',
        },
        loanCategory: '',
        loanProgram: '',
        loanTerm: '',
        loanPurpose: '',
      },
      newLoan: {
        loanAmount: '',
        loanProgram: '',
        interestRate: '',
        loanTerm: '',
        loanPurpose: '',
        lockPeriod: '',
      },
      vendors: {
        realtor: '',
        appraiser: '',
        titleCompany: '',
        inspector: '',
        insurance: '',
        attorney: '',
      },
      status: 'active',
    },
  });

  // Function to calculate Estimated LTV
  const calculateEstimatedLTV = () => {
    // Check which new loan card is open
    const hasRefinanceCards = (newRefinanceLoanCards || []).length > 0;
    const hasPurchaseCards = (newPurchaseLoanCards || []).length > 0;
    
    // Get the New Loan Amount from whichever card is open
    let newLoanAmount = '';
    if (hasRefinanceCards) {
      newLoanAmount = form.watch('abc.loanBalance') || '';
    } else if (hasPurchaseCards) {
      newLoanAmount = form.watch('bbb.loanBalance') || '';
    }
    
    // Find the Primary Residence property
    const properties = form.watch('property.properties') || [];
    const primaryResidence = properties.find(p => p.use === 'primary');
    
    // If no primary residence or new loan amount, return empty
    if (!primaryResidence || !newLoanAmount || newLoanAmount.trim() === '') {
      return '';
    }
    
    // Get estimated value from primary residence
    const estimatedValue = primaryResidence.estimatedValue || '';
    
    if (!estimatedValue || estimatedValue.trim() === '') {
      return '';
    }
    
    // Parse values (handle currency formatting)
    const parseValue = (value: string) => {
      const cleaned = value.replace(/[$,]/g, '');
      return cleaned ? parseFloat(cleaned) : 0;
    };
    
    const loanNum = parseValue(newLoanAmount);
    const valueNum = parseValue(estimatedValue);
    
    if (loanNum === 0 || valueNum === 0) {
      return '';
    }
    
    // Calculate LTV percentage
    const ltv = (loanNum / valueNum) * 100;
    return Math.round(ltv).toString() + '%';
  };

  const addClientMutation = useMutation({
    mutationFn: async (data: InsertClient) => {
      return apiRequest('POST', '/api/admin/clients', data);
    },
    onSuccess: () => {
      toast({
        title: "Client Added Successfully",
        description: "The new client has been added to the system.",
      });
      queryClient.invalidateQueries({ queryKey: ['/api/admin/clients'] });
      setLocation('/admin/dashboard');
    },
    onError: (error) => {
      toast({
        title: "Error",
        description: error instanceof Error ? error.message : "Failed to add client",
        variant: "destructive",
      });
    },
  });

  // Screenleap integration functionality
  const handleScreenshare = async () => {
    setScreenshareLoading(true);
    
    try {
      // Remove any existing screenleap script
      const existingScript = document.querySelector('script[src*="screenleap.js"]');
      if (existingScript) {
        existingScript.remove();
      }
      
      // Create and inject screenleap script for presenter role
      const script = document.createElement('script');
      script.async = true;
      script.src = 'https://integration.screenleap.com/screenleap.js';
      script.setAttribute('data-param', 'userId=438165&role=presenter');
      
      // Add script to document head
      document.head.appendChild(script);
      
      // Wait for script to load and initialize
      script.onload = () => {
        toast({
          title: 'Screenshare Ready',
          description: 'Screenleap presenter mode activated. You can now start screen sharing.',
        });
        setScreenshareLoading(false);
      };
      
      script.onerror = () => {
        toast({
          title: 'Screenshare Error',
          description: 'Failed to load screenleap integration',
          variant: 'destructive',
        });
        setScreenshareLoading(false);
      };
      
    } catch (error: any) {
      toast({
        title: 'Screenshare Error',
        description: error.message || 'Failed to initialize screenleap',
        variant: 'destructive',
      });
      setScreenshareLoading(false);
    }
  };

  const onSubmit = (data: InsertClient) => {
    // Clean up co-borrower data if not needed
    if (!hasCoBorrower) {
      data.coBorrower = undefined;
      data.coBorrowerIncome = undefined;
    }
    addClientMutation.mutate(data);
  };

  const addCoBorrower = () => {
    setHasCoBorrower(true);
    form.setValue('coBorrower', {
      firstName: '',
      middleName: '',
      lastName: '',
      phone: '',
      email: '',
      maritalStatus: 'Select',
      dateOfBirth: '',
      ssn: '',
      residenceAddress: {
        street: '',
        unit: '',
        city: '',
        state: '',
        zip: '',
      },
      yearsAtAddress: '',
      monthsAtAddress: '',
    });
  };


  const removeCoBorrower = () => {
    setConfirmRemovalDialog({
      isOpen: true,
      type: 'co-borrower',
      onConfirm: () => {
        setHasCoBorrower(false);
        form.setValue('coBorrower', undefined);
        form.setValue('coBorrowerIncome', undefined);
        setConfirmRemovalDialog({ isOpen: false, type: null });
      }
    });
  };

  const copyResidenceToSubjectProperty = () => {
    const residenceAddress = form.getValues('borrower.residenceAddress');
    form.setValue('borrower.subjectProperty', residenceAddress);
  };

  // Format currency values for display
  const formatCurrency = (value: string | number | undefined): string => {
    if (!value || value === '') return 'Not entered';
    
    // If it's already formatted as currency, return as is
    if (typeof value === 'string' && value.includes('$')) {
      return value;
    }
    
    // Convert to number and format
    const numValue = typeof value === 'string' ? parseFloat(value.replace(/[^\d.-]/g, '')) : value;
    if (isNaN(numValue) || numValue === 0) return 'Not entered';
    
    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: 'USD',
      minimumFractionDigits: 0,
      maximumFractionDigits: 0
    }).format(numValue);
  };

  // Ensure all properties have stable IDs and valid use values
  useEffect(() => {
    const properties = form.watch('property.properties') || [];
    const validUseValues = ['primary', 'home-purchase', 'second-home', 'investment'];
    let needsUpdate = false;
    
    // Filter out orphaned properties and ensure all have IDs
    const updatedProperties = properties
      .filter(property => {
        // Keep only properties with valid use values
        if (!property.use || !validUseValues.includes(property.use)) {
          console.warn(`Removing orphaned property with invalid use value:`, property.use);
          needsUpdate = true;
          return false;
        }
        return true;
      })
      .map(property => {
        if (!property.id) {
          needsUpdate = true;
          return { ...property, id: nanoid() };
        }
        return property;
      });
    
    if (needsUpdate) {
      form.setValue('property.properties', updatedProperties);
    }
  }, [form.watch('property.properties')]);

  // Auto-copy borrower residence address to primary residence property
  const autoCopyBorrowerAddressToPrimaryProperty = () => {
    const borrowerAddress = form.getValues('borrower.residenceAddress');
    const properties = form.watch('property.properties') || [];
    const primaryPropertyIndex = properties.findIndex(p => p.use === 'primary');
    
    if (primaryPropertyIndex >= 0 && borrowerAddress) {
      form.setValue(`property.properties.${primaryPropertyIndex}.address`, {
        street: borrowerAddress.street || '',
        unit: borrowerAddress.unit || '',
        city: borrowerAddress.city || '',
        state: borrowerAddress.state || '',
        zip: borrowerAddress.zip || '',
        county: borrowerAddress.county || ''
      });
    }
  };

  // Auto-copy co-borrower residence address to co-borrower property
  const autoCopyCoBorrowerAddressToProperty = () => {
    const coBorrowerAddress = form.getValues('coBorrower.residenceAddress');
    const properties = form.watch('property.properties') || [];
    // Find a non-primary property for co-borrower (second home or investment)
    const coBorrowerPropertyIndex = properties.findIndex(p => p.use !== 'primary');
    
    if (coBorrowerPropertyIndex >= 0 && coBorrowerAddress) {
      form.setValue(`property.properties.${coBorrowerPropertyIndex}.address`, {
        street: coBorrowerAddress.street || '',
        unit: coBorrowerAddress.unit || '',
        city: coBorrowerAddress.city || '',
        state: coBorrowerAddress.state || '',
        zip: coBorrowerAddress.zip || '',
        county: coBorrowerAddress.county || ''
      });
    }
  };

  const copyBorrowerToCoResidence = () => {
    const borrowerResidenceAddress = form.getValues('borrower.residenceAddress');
    const borrowerYearsAtAddress = form.getValues('borrower.yearsAtAddress');
    const borrowerMonthsAtAddress = form.getValues('borrower.monthsAtAddress');
    
    form.setValue('coBorrower.residenceAddress', borrowerResidenceAddress);
    form.setValue('coBorrower.yearsAtAddress', borrowerYearsAtAddress);
    form.setValue('coBorrower.monthsAtAddress', borrowerMonthsAtAddress);
  };

  // Phone number formatting - allows complete erasure
  const formatPhoneNumber = (value: string) => {
    // Remove all non-numeric characters
    const phoneNumber = value.replace(/\D/g, '');
    
    // Allow empty string for complete erasure
    if (phoneNumber.length === 0) {
      return '';
    }
    
    // Format as (XXX) XXX-XXXX
    if (phoneNumber.length >= 10) {
      return `(${phoneNumber.slice(0, 3)}) ${phoneNumber.slice(3, 6)}-${phoneNumber.slice(6, 10)}`;
    } else if (phoneNumber.length >= 6) {
      return `(${phoneNumber.slice(0, 3)}) ${phoneNumber.slice(3, 6)}-${phoneNumber.slice(6)}`;
    } else if (phoneNumber.length >= 3) {
      return `(${phoneNumber.slice(0, 3)}) ${phoneNumber.slice(3)}`;
    }
    
    return phoneNumber;
  };

  const handlePhoneChange = (fieldName: string, value: string) => {
    const formatted = formatPhoneNumber(value);
    form.setValue(fieldName as any, formatted);
  };

  // Parse monetary value and convert to number
  const parseMonetaryValue = (value: string | undefined): number => {
    if (!value || value.trim() === '') return 0;
    // Remove $ signs, commas, and convert to number
    const cleaned = value.replace(/[$,]/g, '');
    const parsed = parseFloat(cleaned);
    return isNaN(parsed) ? 0 : parsed;
  };



  // Format percentage value for display only
  const formatPercentageDisplay = (value: string | number | undefined): string => {
    if (!value && value !== 0) return '';
    const numericValue = typeof value === 'string' ? value.replace(/[^0-9.]/g, '') : value.toString();
    if (numericValue === '' || numericValue === '0') return numericValue === '0' ? '0%' : '';
    return `${numericValue}%`;
  };

  // Parse percentage input and return raw numeric value
  const parsePercentageInput = (input: string): string => {
    const numericValue = input.replace(/[^0-9.]/g, '');
    return numericValue;
  };

  // Format dollar value for display only
  const formatDollarDisplay = (value: string | number | undefined): string => {
    if (!value && value !== 0) return '';
    const numericValue = typeof value === 'string' ? value.replace(/[^0-9.]/g, '') : value.toString();
    if (numericValue === '' || numericValue === '0') return numericValue === '0' ? '$0' : '';
    return `$${numericValue}`;
  };

  // Parse dollar input and return raw numeric value
  const parseDollarInput = (input: string): string => {
    const numericValue = input.replace(/[^0-9.]/g, '');
    return numericValue;
  };


  // Sub-component for Current Loan 1 preview modal - read-only display with live updates
  interface CurrentLoanPreviewProps {
    control: any; // Control from parent useForm
  }

  const CurrentLoanPreview: React.FC<CurrentLoanPreviewProps> = ({ control }) => {
    // Use useWatch to get live data updates for preview
    const currentLenderName = useWatch({ control, name: 'currentLoan.currentLender' }) || '';
    const loanNumber = useWatch({ control, name: 'currentLoan.loanNumber' }) || '';
    const loanCategory = useWatch({ control, name: 'currentLoan.loanCategory' }) || '';
    const loanProgram = useWatch({ control, name: 'currentLoan.loanProgram' }) || '';
    const loanTerm = useWatch({ control, name: 'currentLoan.loanTerm' }) || '';
    const loanPurpose = useWatch({ control, name: 'currentLoan.loanPurpose' }) || '';
    const statementBalance = useWatch({ control, name: 'currentLoan.statementBalance.amount' }) || '';
    const currentRate = useWatch({ control, name: 'currentLoan.currentRate' }) || '';
    const principalPayment = useWatch({ control, name: 'currentLoan.principalAndInterestPayment' }) || '';
    const escrowPayment = useWatch({ control, name: 'currentLoan.escrowPayment' }) || '';
    const prepaymentPenalty = useWatch({ control, name: 'currentLoan.prepaymentPenalty' }) || '';
    const attachedToProperty = useWatch({ control, name: 'currentLoan.attachedToProperty' }) || '';
    
    // Get all properties to look up address by ID
    const properties = useWatch({ control, name: 'property.properties' }) || [];
    
    // Function to get property address display from property ID
    const getPropertyAddressDisplay = (propertyId: string) => {
      if (!propertyId || propertyId === 'Other' || propertyId === 'Select') {
        return propertyId || 'Not specified';
      }
      
      const property = properties.find((prop: any) => prop.id === propertyId);
      if (!property) return 'Property not found';
      
      const address = property.address;
      if (!address) return 'Address not specified';
      
      // Build address string from components (street address only)
      let addressParts = [];
      if (address.street) addressParts.push(address.street);
      if (address.unit) addressParts.push(`Unit ${address.unit}`);
      
      return addressParts.length > 0 ? addressParts.join(' ') : 'Address not specified';
    };

    // Format monetary values for display
    const formatCurrency = (value: string) => {
      if (!value || value.trim() === '') return '';
      const cleaned = value.replace(/[^0-9.]/g, '');
      const num = parseFloat(cleaned);
      return isNaN(num) ? value : `$${num.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`;
    };

    return (
      <Card className="border-l-4 border-l-blue-500 hover:border-blue-500 focus-within:border-blue-500 transition-colors duration-200">
        <CardContent className="space-y-4">
          {/* Row 1: Lender Name, Loan Number, Loan Category, Loan Program */}
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
            <div className="space-y-2">
              <Label className="text-sm font-medium text-muted-foreground">Lender Name</Label>
              <div className="p-2 bg-gray-50 rounded-md border">
                <span className="text-sm">{currentLenderName || 'Not specified'}</span>
              </div>
            </div>
            <div className="space-y-2">
              <Label className="text-sm font-medium text-muted-foreground">Loan Number</Label>
              <div className="p-2 bg-gray-50 rounded-md border">
                <span className="text-sm">{loanNumber || 'Not specified'}</span>
              </div>
            </div>
            <div className="space-y-2">
              <Label className="text-sm font-medium text-muted-foreground">Loan Category</Label>
              <div className="p-2 bg-gray-50 rounded-md border">
                <span className="text-sm">{loanCategory || 'Not specified'}</span>
              </div>
            </div>
            <div className="space-y-2">
              <Label className="text-sm font-medium text-muted-foreground">Loan Program</Label>
              <div className="p-2 bg-gray-50 rounded-md border">
                <span className="text-sm">{loanProgram || 'Not specified'}</span>
              </div>
            </div>
          </div>

          {/* Row 2: Loan Term, Loan Purpose, Statement Balance, Current Rate */}
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
            <div className="space-y-2">
              <Label className="text-sm font-medium text-muted-foreground">Loan Term</Label>
              <div className="p-2 bg-gray-50 rounded-md border">
                <span className="text-sm">{loanTerm || 'Not specified'}</span>
              </div>
            </div>
            <div className="space-y-2">
              <Label className="text-sm font-medium text-muted-foreground">Loan Purpose</Label>
              <div className="p-2 bg-gray-50 rounded-md border">
                <span className="text-sm">{loanPurpose || 'Not specified'}</span>
              </div>
            </div>
            <div className="space-y-2">
              <Label className="text-sm font-medium text-muted-foreground">Statement Balance</Label>
              <div className="p-2 bg-gray-50 rounded-md border">
                <span className="text-sm">{formatCurrency(statementBalance) || 'Not specified'}</span>
              </div>
            </div>
            <div className="space-y-2">
              <Label className="text-sm font-medium text-muted-foreground">Loan Rate</Label>
              <div className="p-2 bg-gray-50 rounded-md border">
                <span className="text-sm">{currentRate ? `${currentRate}%` : 'Not specified'}</span>
              </div>
            </div>
          </div>

          {/* Row 3: Payment Fields with Total */}
          <div className="grid grid-cols-1 md:grid-cols-5 gap-4">
            <div className="space-y-2">
              <Label className="text-sm font-medium text-muted-foreground">Principal & Interest Payment</Label>
              <div className="p-2 bg-gray-50 rounded-md border">
                <span className="text-sm">{formatCurrency(principalPayment) || 'Not specified'}</span>
              </div>
            </div>
            <div className="space-y-2">
              <Label className="text-sm font-medium text-muted-foreground">Escrow Payment</Label>
              <div className="p-2 bg-gray-50 rounded-md border">
                <span className="text-sm">{formatCurrency(escrowPayment) || 'Not specified'}</span>
              </div>
            </div>
            <div className="space-y-2">
              <Label className="text-sm font-medium text-muted-foreground">Total Monthly Payment</Label>
              <div className="p-2 bg-gray-50 rounded-md border">
                <span className="text-sm">{formatCurrency(useWatch({ control, name: 'currentLoan.totalMonthlyPayment' }) || '') || 'Not specified'}</span>
              </div>
            </div>
            <div className="space-y-2">
              <Label className="text-sm font-medium text-muted-foreground">Pre-Payment Penalty</Label>
              <div className="p-2 bg-gray-50 rounded-md border">
                <span className="text-sm">{prepaymentPenalty || 'Not specified'}</span>
              </div>
            </div>
            <div className="space-y-2">
              <Label className="text-sm font-medium text-muted-foreground">Attached to Property</Label>
              <div className="p-2 bg-gray-50 rounded-md border">
                <span className="text-sm">{getPropertyAddressDisplay(attachedToProperty)}</span>
              </div>
            </div>
          </div>
        </CardContent>
      </Card>
    );
  };

  // Sub-component for Current Loan 2 preview modal - read-only display with live updates
  interface CurrentSecondLoanPreviewProps {
    control: any; // Control from parent useForm
  }

  const CurrentSecondLoanPreview: React.FC<CurrentSecondLoanPreviewProps> = ({ control }) => {
    // Use useWatch to get live data updates for preview
    const lenderName = useWatch({ control, name: 'secondLoan.lenderName' }) || '';
    const loanNumber = useWatch({ control, name: 'secondLoan.loanNumber' }) || '';
    const loanCategory = useWatch({ control, name: 'secondLoan.loanCategory' }) || '';
    const loanProgram = useWatch({ control, name: 'secondLoan.loanProgram' }) || '';
    const loanTerm = useWatch({ control, name: 'secondLoan.loanTerm' }) || '';
    const loanPurpose = useWatch({ control, name: 'secondLoan.loanPurpose' }) || '';
    const statementBalance = useWatch({ control, name: 'secondLoan.statementBalance.amount' }) || '';
    const currentRate = useWatch({ control, name: 'secondLoan.currentRate' }) || '';
    const principalPayment = useWatch({ control, name: 'secondLoan.principalAndInterestPayment' }) || '';
    const escrowPayment = useWatch({ control, name: 'secondLoan.escrowPayment' }) || '';
    const prepaymentPenalty = useWatch({ control, name: 'secondLoan.prepaymentPenalty' }) || '';
    const attachedToProperty = useWatch({ control, name: 'secondLoan.attachedToProperty' }) || '';

    // Format monetary values for display
    const formatCurrency = (value: string) => {
      if (!value || value.trim() === '') return '';
      const cleaned = value.replace(/[^0-9.]/g, '');
      const num = parseFloat(cleaned);
      return isNaN(num) ? value : `$${num.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`;
    };

    // Total payment calculation component for second loan
    const TotalSecondLoanPayment = () => {
      const principalAmount = useWatch({ control, name: 'secondLoan.principalAndInterestPayment' }) || '';
      const escrowAmount = useWatch({ control, name: 'secondLoan.escrowPayment' }) || '';
      
      const principal = parseMonetaryValue(principalAmount);
      const escrow = parseMonetaryValue(escrowAmount);
      const total = principal + escrow;
      
      return (
        <div className="space-y-2">
          <Label className="text-sm font-medium text-muted-foreground">Total Monthly Payment</Label>
          <div className="p-2 bg-orange-50 rounded-md border border-orange-200">
            <span className="text-sm font-semibold text-orange-700">
              ${total.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
            </span>
          </div>
        </div>
      );
    };

    // Get all properties to look up address by ID
    const properties = useWatch({ control, name: 'property.properties' }) || [];
    
    // Function to get property address display from property ID
    const getPropertyAddressDisplay = (propertyId: string) => {
      if (!propertyId || propertyId === 'Other' || propertyId === 'Select') {
        return propertyId || 'Not specified';
      }
      
      const property = properties.find((prop: any) => prop.id === propertyId);
      if (!property) return 'Property not found';
      
      const address = property.address;
      if (!address) return 'Address not specified';
      
      // Build address string from components (street address only)
      let addressParts = [];
      if (address.street) addressParts.push(address.street);
      if (address.unit) addressParts.push(`Unit ${address.unit}`);
      
      return addressParts.length > 0 ? addressParts.join(' ') : 'Address not specified';
    };

    return (
      <Card className="border-l-4 border-l-purple-500 hover:border-purple-500 focus-within:border-purple-500 transition-colors duration-200">
        <CardContent className="space-y-4">
          {/* Row 1: Lender Name, Loan Number, Loan Category, Loan Program */}
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
            <div className="space-y-2">
              <Label className="text-sm font-medium text-muted-foreground">Lender Name</Label>
              <div className="p-2 bg-gray-50 rounded-md border">
                <span className="text-sm">{lenderName || 'Not specified'}</span>
              </div>
            </div>
            <div className="space-y-2">
              <Label className="text-sm font-medium text-muted-foreground">Loan Number</Label>
              <div className="p-2 bg-gray-50 rounded-md border">
                <span className="text-sm">{loanNumber || 'Not specified'}</span>
              </div>
            </div>
            <div className="space-y-2">
              <Label className="text-sm font-medium text-muted-foreground">Loan Category</Label>
              <div className="p-2 bg-gray-50 rounded-md border">
                <span className="text-sm">{loanCategory || 'Not specified'}</span>
              </div>
            </div>
            <div className="space-y-2">
              <Label className="text-sm font-medium text-muted-foreground">Loan Program</Label>
              <div className="p-2 bg-gray-50 rounded-md border">
                <span className="text-sm">{loanProgram || 'Not specified'}</span>
              </div>
            </div>
          </div>

          {/* Row 2: Loan Term, Loan Purpose, Statement Balance, Current Rate */}
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
            <div className="space-y-2">
              <Label className="text-sm font-medium text-muted-foreground">Loan Term</Label>
              <div className="p-2 bg-gray-50 rounded-md border">
                <span className="text-sm">{loanTerm || 'Not specified'}</span>
              </div>
            </div>
            <div className="space-y-2">
              <Label className="text-sm font-medium text-muted-foreground">Loan Purpose</Label>
              <div className="p-2 bg-gray-50 rounded-md border">
                <span className="text-sm">{loanPurpose || 'Not specified'}</span>
              </div>
            </div>
            <div className="space-y-2">
              <Label className="text-sm font-medium text-muted-foreground">Statement Balance</Label>
              <div className="p-2 bg-gray-50 rounded-md border">
                <span className="text-sm">{formatCurrency(statementBalance) || 'Not specified'}</span>
              </div>
            </div>
            <div className="space-y-2">
              <Label className="text-sm font-medium text-muted-foreground">Loan Rate</Label>
              <div className="p-2 bg-gray-50 rounded-md border">
                <span className="text-sm">{currentRate ? `${currentRate}%` : 'Not specified'}</span>
              </div>
            </div>
          </div>

          {/* Row 3: Payment Fields with Total */}
          <div className="grid grid-cols-1 md:grid-cols-5 gap-4">
            <div className="space-y-2">
              <Label className="text-sm font-medium text-muted-foreground">Principal & Interest Payment</Label>
              <div className="p-2 bg-gray-50 rounded-md border">
                <span className="text-sm">{formatCurrency(principalPayment) || 'Not specified'}</span>
              </div>
            </div>
            <div className="space-y-2">
              <Label className="text-sm font-medium text-muted-foreground">Escrow Payment</Label>
              <div className="p-2 bg-gray-50 rounded-md border">
                <span className="text-sm">{formatCurrency(escrowPayment) || 'Not specified'}</span>
              </div>
            </div>
            <div className="col-span-1">
              <TotalSecondLoanPayment />
            </div>
            <div className="space-y-2">
              <Label className="text-sm font-medium text-muted-foreground">Pre-Payment Penalty</Label>
              <div className="p-2 bg-gray-50 rounded-md border">
                <span className="text-sm">{prepaymentPenalty || 'Not specified'}</span>
              </div>
            </div>
            <div className="space-y-2">
              <Label className="text-sm font-medium text-muted-foreground">Attached to Property</Label>
              <div className="p-2 bg-gray-50 rounded-md border">
                <span className="text-sm">{getPropertyAddressDisplay(attachedToProperty)}</span>
              </div>
            </div>
          </div>
        </CardContent>
      </Card>
    );
  };

  // Sub-component for Current Third Loan preview modal - read-only display with live updates
  interface CurrentThirdLoanPreviewProps {
    control: any; // Control from parent useForm
  }

  const CurrentThirdLoanPreview: React.FC<CurrentThirdLoanPreviewProps> = ({ control }) => {
    // Use useWatch to get live data updates for preview
    const lenderName = useWatch({ control, name: 'thirdLoan.lenderName' }) || '';
    const loanNumber = useWatch({ control, name: 'thirdLoan.loanNumber' }) || '';
    const loanCategory = useWatch({ control, name: 'thirdLoan.loanCategory' }) || '';
    const loanProgram = useWatch({ control, name: 'thirdLoan.loanProgram' }) || '';
    const loanTerm = useWatch({ control, name: 'thirdLoan.loanTerm' }) || '';
    const loanPurpose = useWatch({ control, name: 'thirdLoan.loanPurpose' }) || '';
    const statementBalance = useWatch({ control, name: 'thirdLoan.statementBalance.amount' }) || '';
    const currentRate = useWatch({ control, name: 'thirdLoan.currentRate' }) || '';
    const principalPayment = useWatch({ control, name: 'thirdLoan.principalAndInterestPayment' }) || '';
    const escrowPayment = useWatch({ control, name: 'thirdLoan.escrowPayment' }) || '';
    const prepaymentPenalty = useWatch({ control, name: 'thirdLoan.prepaymentPenalty' }) || '';
    const attachedToProperty = useWatch({ control, name: 'thirdLoan.attachedToProperty' }) || '';

    // Format monetary values for display
    const formatCurrency = (value: string) => {
      if (!value || value.trim() === '') return '';
      const cleaned = value.replace(/[^0-9.]/g, '');
      const num = parseFloat(cleaned);
      return isNaN(num) ? value : `$${num.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`;
    };

    // Get all properties to look up address by ID
    const properties = useWatch({ control, name: 'property.properties' }) || [];
    
    // Function to get property address display from property ID
    const getPropertyAddressDisplay = (propertyId: string) => {
      if (!propertyId || propertyId === 'Other' || propertyId === 'Select') {
        return propertyId || 'Not specified';
      }
      
      const property = properties.find((prop: any) => prop.id === propertyId);
      if (!property) return 'Property not found';
      
      const address = property.address;
      if (!address) return 'Address not specified';
      
      // Build address string from components (street address only)
      let addressParts = [];
      if (address.street) addressParts.push(address.street);
      if (address.unit) addressParts.push(`Unit ${address.unit}`);
      
      return addressParts.length > 0 ? addressParts.join(' ') : 'Address not specified';
    };

    // Total payment calculation component for third loan
    const TotalThirdLoanPayment = () => {
      const principalAmount = useWatch({ control, name: 'thirdLoan.principalAndInterestPayment' }) || '';
      const escrowAmount = useWatch({ control, name: 'thirdLoan.escrowPayment' }) || '';
      
      const principal = parseMonetaryValue(principalAmount);
      const escrow = parseMonetaryValue(escrowAmount);
      const total = principal + escrow;
      
      return (
        <div className="space-y-2">
          <Label className="text-sm font-medium text-muted-foreground">Total Monthly Payment</Label>
          <div className="p-2 bg-orange-50 rounded-md border border-orange-200">
            <span className="text-sm font-semibold text-orange-700">
              ${total.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
            </span>
          </div>
        </div>
      );
    };

    return (
      <Card className="border-l-4 border-l-orange-500 hover:border-orange-500 focus-within:border-orange-500 transition-colors duration-200">
        <CardContent className="space-y-4">
          {/* Row 1: Lender Name, Loan Number, Loan Category, Loan Program */}
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
            <div className="space-y-2">
              <Label className="text-sm font-medium text-muted-foreground">Lender Name</Label>
              <div className="p-2 bg-gray-50 rounded-md border">
                <span className="text-sm">{lenderName || 'Not specified'}</span>
              </div>
            </div>
            <div className="space-y-2">
              <Label className="text-sm font-medium text-muted-foreground">Loan Number</Label>
              <div className="p-2 bg-gray-50 rounded-md border">
                <span className="text-sm">{loanNumber || 'Not specified'}</span>
              </div>
            </div>
            <div className="space-y-2">
              <Label className="text-sm font-medium text-muted-foreground">Loan Category</Label>
              <div className="p-2 bg-gray-50 rounded-md border">
                <span className="text-sm">{loanCategory || 'Not specified'}</span>
              </div>
            </div>
            <div className="space-y-2">
              <Label className="text-sm font-medium text-muted-foreground">Loan Program</Label>
              <div className="p-2 bg-gray-50 rounded-md border">
                <span className="text-sm">{loanProgram || 'Not specified'}</span>
              </div>
            </div>
          </div>

          {/* Row 2: Loan Term, Loan Purpose, Statement Balance, Current Rate */}
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
            <div className="space-y-2">
              <Label className="text-sm font-medium text-muted-foreground">Loan Term</Label>
              <div className="p-2 bg-gray-50 rounded-md border">
                <span className="text-sm">{loanTerm || 'Not specified'}</span>
              </div>
            </div>
            <div className="space-y-2">
              <Label className="text-sm font-medium text-muted-foreground">Loan Purpose</Label>
              <div className="p-2 bg-gray-50 rounded-md border">
                <span className="text-sm">{loanPurpose || 'Not specified'}</span>
              </div>
            </div>
            <div className="space-y-2">
              <Label className="text-sm font-medium text-muted-foreground">Statement Balance</Label>
              <div className="p-2 bg-gray-50 rounded-md border">
                <span className="text-sm">{formatCurrency(statementBalance) || 'Not specified'}</span>
              </div>
            </div>
            <div className="space-y-2">
              <Label className="text-sm font-medium text-muted-foreground">Loan Rate</Label>
              <div className="p-2 bg-gray-50 rounded-md border">
                <span className="text-sm">{currentRate ? `${currentRate}%` : 'Not specified'}</span>
              </div>
            </div>
          </div>

          {/* Row 3: Payment Fields with Total */}
          <div className="grid grid-cols-1 md:grid-cols-5 gap-4">
            <div className="space-y-2">
              <Label className="text-sm font-medium text-muted-foreground">Principal & Interest Payment</Label>
              <div className="p-2 bg-gray-50 rounded-md border">
                <span className="text-sm">{formatCurrency(principalPayment) || 'Not specified'}</span>
              </div>
            </div>
            <div className="space-y-2">
              <Label className="text-sm font-medium text-muted-foreground">Escrow Payment</Label>
              <div className="p-2 bg-gray-50 rounded-md border">
                <span className="text-sm">{formatCurrency(escrowPayment) || 'Not specified'}</span>
              </div>
            </div>
            <div className="col-span-1">
              <TotalThirdLoanPayment />
            </div>
            <div className="space-y-2">
              <Label className="text-sm font-medium text-muted-foreground">Pre-Payment Penalty</Label>
              <div className="p-2 bg-gray-50 rounded-md border">
                <span className="text-sm">{prepaymentPenalty || 'Not specified'}</span>
              </div>
            </div>
            <div className="space-y-2">
              <Label className="text-sm font-medium text-muted-foreground">Attached to Property</Label>
              <div className="p-2 bg-gray-50 rounded-md border">
                <span className="text-sm">{getPropertyAddressDisplay(attachedToProperty)}</span>
              </div>
            </div>
          </div>
        </CardContent>
      </Card>
    );
  };

  // Sub-component for Additional Loan preview modal - generic for any additional loan
  interface AdditionalLoanPreviewProps {
    control: any; // Control from parent useForm
    loanId: string; // Dynamic loan ID (loan4, loan5, etc.)
  }

  const AdditionalLoanPreview: React.FC<AdditionalLoanPreviewProps> = ({ control, loanId }) => {
    // Use useWatch to get live data updates for preview
    const lenderName = useWatch({ control, name: `${loanId}.lenderName` }) || '';
    const loanNumber = useWatch({ control, name: `${loanId}.loanNumber` }) || '';
    const loanCategory = useWatch({ control, name: `${loanId}.loanCategory` }) || '';
    const loanProgram = useWatch({ control, name: `${loanId}.loanProgram` }) || '';
    const loanTerm = useWatch({ control, name: `${loanId}.loanTerm` }) || '';
    const loanPurpose = useWatch({ control, name: `${loanId}.loanPurpose` }) || '';
    const statementBalance = useWatch({ control, name: `${loanId}.statementBalance.amount` }) || '';
    const currentRate = useWatch({ control, name: `${loanId}.currentRate` }) || '';
    const principalPayment = useWatch({ control, name: `${loanId}.principalAndInterestPayment` }) || '';
    const escrowPayment = useWatch({ control, name: `${loanId}.escrowPayment` }) || '';
    const prepaymentPenalty = useWatch({ control, name: `${loanId}.prepaymentPenalty` }) || '';
    const attachedToProperty = useWatch({ control, name: `${loanId}.attachedToProperty` }) || '';

    // Format monetary values for display
    const formatCurrency = (value: string) => {
      if (!value || value.trim() === '') return '';
      const cleaned = value.replace(/[^0-9.]/g, '');
      const num = parseFloat(cleaned);
      return isNaN(num) ? value : `$${num.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`;
    };

    // Total payment calculation component for additional loan
    const TotalAdditionalLoanPayment = () => {
      const principalAmount = useWatch({ control, name: `${loanId}.principalAndInterestPayment` }) || '';
      const escrowAmount = useWatch({ control, name: `${loanId}.escrowPayment` }) || '';
      
      const principal = parseMonetaryValue(principalAmount);
      const escrow = parseMonetaryValue(escrowAmount);
      const total = principal + escrow;
      
      return (
        <div className="space-y-2">
          <Label className="text-sm font-medium text-muted-foreground">Total Monthly Payment</Label>
          <div className="p-2 bg-purple-50 rounded-md border border-purple-200">
            <span className="text-sm font-semibold text-purple-700">
              ${total.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
            </span>
          </div>
        </div>
      );
    };

    // Generate display name from loan ID
    const displayName = loanId.charAt(0).toUpperCase() + loanId.slice(1).replace(/([A-Z])/g, ' $1');

    return (
      <Card className="border-l-4 border-l-purple-500 hover:border-purple-500 focus-within:border-purple-500 transition-colors duration-200">
        <CardHeader>
          <CardTitle>{displayName} Preview</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          {/* Row 1: Lender Name, Loan Number, Loan Category, Loan Program */}
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
            <div className="space-y-2">
              <Label className="text-sm font-medium text-muted-foreground">Lender Name</Label>
              <div className="p-2 bg-gray-50 rounded-md border">
                <span className="text-sm">{lenderName || 'Not specified'}</span>
              </div>
            </div>
            <div className="space-y-2">
              <Label className="text-sm font-medium text-muted-foreground">Loan Number</Label>
              <div className="p-2 bg-gray-50 rounded-md border">
                <span className="text-sm">{loanNumber || 'Not specified'}</span>
              </div>
            </div>
            <div className="space-y-2">
              <Label className="text-sm font-medium text-muted-foreground">Loan Category</Label>
              <div className="p-2 bg-gray-50 rounded-md border">
                <span className="text-sm">{loanCategory || 'Not specified'}</span>
              </div>
            </div>
            <div className="space-y-2">
              <Label className="text-sm font-medium text-muted-foreground">Loan Program</Label>
              <div className="p-2 bg-gray-50 rounded-md border">
                <span className="text-sm">{loanProgram || 'Not specified'}</span>
              </div>
            </div>
          </div>

          {/* Row 2: Loan Term, Loan Purpose, Statement Balance, Current Rate */}
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
            <div className="space-y-2">
              <Label className="text-sm font-medium text-muted-foreground">Loan Term</Label>
              <div className="p-2 bg-gray-50 rounded-md border">
                <span className="text-sm">{loanTerm || 'Not specified'}</span>
              </div>
            </div>
            <div className="space-y-2">
              <Label className="text-sm font-medium text-muted-foreground">Loan Purpose</Label>
              <div className="p-2 bg-gray-50 rounded-md border">
                <span className="text-sm">{loanPurpose || 'Not specified'}</span>
              </div>
            </div>
            <div className="space-y-2">
              <Label className="text-sm font-medium text-muted-foreground">Statement Balance</Label>
              <div className="p-2 bg-gray-50 rounded-md border">
                <span className="text-sm">{formatCurrency(statementBalance) || 'Not specified'}</span>
              </div>
            </div>
            <div className="space-y-2">
              <Label className="text-sm font-medium text-muted-foreground">Loan Rate</Label>
              <div className="p-2 bg-gray-50 rounded-md border">
                <span className="text-sm">{currentRate ? `${currentRate}%` : 'Not specified'}</span>
              </div>
            </div>
          </div>

          {/* Row 3: Principal & Interest Payment, Escrow Payment, Total Payment, Pre-Payment Penalty */}
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
            <div className="space-y-2">
              <Label className="text-sm font-medium text-muted-foreground">Principal & Interest Payment</Label>
              <div className="p-2 bg-gray-50 rounded-md border">
                <span className="text-sm">{formatCurrency(principalPayment) || 'Not specified'}</span>
              </div>
            </div>
            <div className="space-y-2">
              <Label className="text-sm font-medium text-muted-foreground">Escrow Payment</Label>
              <div className="p-2 bg-gray-50 rounded-md border">
                <span className="text-sm">{formatCurrency(escrowPayment) || 'Not specified'}</span>
              </div>
            </div>
            <div className="col-span-1">
              <TotalAdditionalLoanPayment />
            </div>
            <div className="space-y-2">
              <Label className="text-sm font-medium text-muted-foreground">Pre-Payment Penalty</Label>
              <div className="p-2 bg-gray-50 rounded-md border">
                <span className="text-sm">{prepaymentPenalty || 'Not specified'}</span>
              </div>
            </div>
          </div>

          {/* Row 4: Attached to Property */}
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
            <div className="space-y-2">
              <Label className="text-sm font-medium text-muted-foreground">Attached to Property</Label>
              <div className="p-2 bg-gray-50 rounded-md border">
                <span className="text-sm">{attachedToProperty || 'Not specified'}</span>
              </div>
            </div>
          </div>
        </CardContent>
      </Card>
    );
  };

  // Calculate total monthly income - optimized with useMemo
  const borrowerIncomeData = form.watch('income');
  const borrowerEmployersData = form.watch('income.employers');
  
  // Watch all individual employer income fields dynamically
  const allEmployerIncomes = borrowerEmployerCards.map(cardId => 
    form.watch(getEmployerFieldPath(cardId, 'monthlyIncome'))
  );
  
  const totalBorrowerIncome = useMemo(() => {
    // Calculate total main employment income from all employer cards
    const employmentIncome = borrowerIncomeData?.employers && typeof borrowerIncomeData.employers === 'object'
      ? Object.values(borrowerIncomeData.employers).reduce((total, employer) => {
          return total + (employer && typeof employer === 'object' ? parseMonetaryValue(employer.monthlyIncome) : 0);
        }, 0)
      : parseMonetaryValue(borrowerIncomeData?.monthlyIncome); // fallback for backward compatibility
    
    // Calculate total second employment income from all cards
    const secondEmploymentIncome = borrowerIncomeData?.secondEmployers && typeof borrowerIncomeData.secondEmployers === 'object'
      ? Object.values(borrowerIncomeData.secondEmployers).reduce((total, employer) => {
          return total + (employer && typeof employer === 'object' ? parseMonetaryValue(employer.monthlyIncome) : 0);
        }, 0)
      : parseMonetaryValue(borrowerIncomeData?.secondMonthlyIncome); // fallback for backward compatibility
    
    // Calculate total self-employment income from all cards
    const businessIncome = borrowerIncomeData?.selfEmployers && typeof borrowerIncomeData.selfEmployers === 'object'
      ? Object.values(borrowerIncomeData.selfEmployers).reduce((total, business) => {
          return total + (business && typeof business === 'object' ? parseMonetaryValue(business.businessMonthlyIncome) : 0);
        }, 0)
      : parseMonetaryValue(borrowerIncomeData?.businessMonthlyIncome); // fallback for backward compatibility
    const pensionIncome = borrowerIncomeData?.pensions?.reduce((total, pension) => total + parseMonetaryValue(pension.monthlyAmount), 0) || 0;
    const socialSecurityIncome = parseMonetaryValue(borrowerIncomeData?.socialSecurityMonthlyAmount);
    const vaBenefitsIncome = parseMonetaryValue(borrowerIncomeData?.vaBenefitsMonthlyAmount);
    const disabilityIncome = parseMonetaryValue(borrowerIncomeData?.disabilityMonthlyAmount);
    const otherIncome = parseMonetaryValue(borrowerIncomeData?.otherIncomeMonthlyAmount);
    
    const total = employmentIncome + secondEmploymentIncome + businessIncome + 
                  pensionIncome + socialSecurityIncome + vaBenefitsIncome + 
                  disabilityIncome + otherIncome;
    
    return total;
  }, [borrowerIncomeData, borrowerEmployersData, allEmployerIncomes]);
  
  const totalBorrowerIncomeFormatted = useMemo(() => 
    `$${totalBorrowerIncome.toLocaleString('en-US', { minimumFractionDigits: 0, maximumFractionDigits: 0 })}`,
    [totalBorrowerIncome]
  );


  // Calculate co-borrower income - optimized with useMemo
  const coBorrowerIncomeData = form.watch('coBorrowerIncome');
  const coBorrowerEmployersData = form.watch('coBorrowerIncome.employers');
  
  // Watch all individual co-borrower employer income fields dynamically
  const allCoBorrowerEmployerIncomes = coBorrowerEmployerCards.map(cardId => 
    form.watch(getCoBorrowerEmployerFieldPath(cardId, 'monthlyIncome'))
  );
  
  const totalCoBorrowerIncome = useMemo(() => {
    // Calculate total co-borrower main employment income from all employer cards
    const employmentIncome = coBorrowerIncomeData?.employers && typeof coBorrowerIncomeData.employers === 'object'
      ? Object.values(coBorrowerIncomeData.employers).reduce((total, employer) => {
          return total + (employer && typeof employer === 'object' ? parseMonetaryValue(employer.monthlyIncome) : 0);
        }, 0)
      : parseMonetaryValue(coBorrowerIncomeData?.monthlyIncome); // fallback for backward compatibility
    // Calculate total co-borrower second employment income from all cards
    const secondEmploymentIncome = coBorrowerIncomeData?.secondEmployers && typeof coBorrowerIncomeData.secondEmployers === 'object'
      ? Object.values(coBorrowerIncomeData.secondEmployers).reduce((total, employer) => {
          return total + (employer && typeof employer === 'object' ? parseMonetaryValue(employer.monthlyIncome) : 0);
        }, 0)
      : parseMonetaryValue(coBorrowerIncomeData?.secondMonthlyIncome); // fallback for backward compatibility
    // Calculate total co-borrower self-employment income from all cards
    const businessIncome = coBorrowerIncomeData?.selfEmployers && typeof coBorrowerIncomeData.selfEmployers === 'object'
      ? Object.values(coBorrowerIncomeData.selfEmployers).reduce((total, business) => {
          return total + (business && typeof business === 'object' ? parseMonetaryValue(business.businessMonthlyIncome) : 0);
        }, 0)
      : parseMonetaryValue(coBorrowerIncomeData?.businessMonthlyIncome); // fallback for backward compatibility
    const pensionIncome = coBorrowerIncomeData?.pensions?.reduce((total, pension) => total + parseMonetaryValue(pension.monthlyAmount), 0) || 0;
    const socialSecurityIncome = parseMonetaryValue(coBorrowerIncomeData?.socialSecurityMonthlyAmount);
    const vaBenefitsIncome = parseMonetaryValue(coBorrowerIncomeData?.vaBenefitsMonthlyAmount);
    const disabilityIncome = parseMonetaryValue(coBorrowerIncomeData?.disabilityMonthlyAmount);
    const otherIncome = parseMonetaryValue(coBorrowerIncomeData?.otherIncomeMonthlyAmount);
    
    const total = employmentIncome + secondEmploymentIncome + businessIncome + 
                  pensionIncome + socialSecurityIncome + vaBenefitsIncome + 
                  disabilityIncome + otherIncome;
    
    return total;
  }, [coBorrowerIncomeData, coBorrowerEmployersData, allCoBorrowerEmployerIncomes]);
  
  const totalCoBorrowerIncomeFormatted = useMemo(() => 
    `$${totalCoBorrowerIncome.toLocaleString('en-US', { minimumFractionDigits: 0, maximumFractionDigits: 0 })}`,
    [totalCoBorrowerIncome]
  );

  // Current Loan auto sum now handled by isolated TotalCurrentLoanPayment component

  // Auto-sync rental property income with property data
  useEffect(() => {
    const properties = form.watch('property.properties') || [];
    const investmentProperties = properties.filter(p => p.use === 'investment' && p.loan && p.loan.monthlyIncome);
    
    if (investmentProperties.length > 0) {
      // Auto-check Property Rental checkbox
      form.setValue('income.incomeTypes.other', true);
      
      // Calculate total rental income including negative values
      const totalRentalIncome = investmentProperties.reduce((total, property) => {
        return total + parseMonetaryValue(property.loan?.monthlyIncome || '');
      }, 0);
      
      const addressList = investmentProperties.map((p, index) => {
        const propertyTitle = `Investment Property ${index + 1}`;
        return p.address?.street ? `${propertyTitle} (${p.address.street})` : propertyTitle;
      }).join(', ');
      
      // Update rental income fields with proper negative formatting
      const formattedAmount = totalRentalIncome >= 0 
        ? `$${totalRentalIncome.toLocaleString('en-US', { minimumFractionDigits: 0, maximumFractionDigits: 0 })}`
        : `-$${Math.abs(totalRentalIncome).toLocaleString('en-US', { minimumFractionDigits: 0, maximumFractionDigits: 0 })}`;
      
      form.setValue('income.otherIncomeDescription', addressList);
      form.setValue('income.otherIncomeMonthlyAmount', formattedAmount);
    } else {
      // No rental properties, uncheck the box
      form.setValue('income.incomeTypes.other', false);
      form.setValue('income.otherIncomeDescription', '');
      form.setValue('income.otherIncomeMonthlyAmount', '');
    }
  }, [form.watch('property.properties')]);

  // Animation effect for first-time page entry
  useEffect(() => {
    // Trigger animation on initial component mount
    const timer = setTimeout(() => {
      setShowEntryAnimation(false); // Turn off animation after first load
    }, 1000); // Animation lasts 1 second

    return () => clearTimeout(timer);
  }, []); // Empty dependency array means this runs only once on mount

  // Bidirectional sync between Property Tab (Primary Residence) and Loan Tab (Current Loan 1)
  const syncInProgress = useRef(false);
  
  // DISABLED: Bidirectional sync - Removed to improve typing performance
  // This was causing slow typing due to heavy processing on every keystroke
  // Now using simplified one-way flow: Loan Tab -> Property Tab (read-only display)
  
  // useEffect(() => {
  //   // Field mapping configuration
  //   const fieldMappings = [
  //     {
  //       propertyPath: 'loan.lenderName',
  //       loanPath: 'currentLender'
  //     },
  //     {
  //       propertyPath: 'loan.loanNumber',
  //       loanPath: 'loanNumber'
  //     },
  //     {
  //       propertyPath: 'loan.mortgageBalance',
  //       loanPath: 'statementBalance.amount'
  //     },
  //     {
  //       propertyPath: 'loan.piPayment',
  //       loanPath: 'principalAndInterestPayment'
  //     },
  //     {
  //       propertyPath: 'loan.escrowPayment',
  //       loanPath: 'escrowPayment'
  //     }
  //   ];

  //   const subscription = form.watch((value, { name }) => {
  //     if (!name || syncInProgress.current) return;
      
  //     const properties = value.property?.properties || [];
  //     const primaryPropertyIndex = properties.findIndex(p => p?.use === 'primary');
      
  //     if (primaryPropertyIndex < 0) return;
      
  //     syncInProgress.current = true;
      
  //     // Check if the changed field is a property field that should sync to loan
  //     for (const mapping of fieldMappings) {
  //       const propertyFieldPath = `property.properties.${primaryPropertyIndex}.${mapping.propertyPath}`;
  //       const loanFieldPath = `currentLoan.${mapping.loanPath}`;
        
  //       if (name === propertyFieldPath) {
  //         const sourceValue = getNestedValue(value, propertyFieldPath) ?? '';
  //         const targetValue = getNestedValue(value, loanFieldPath) ?? '';
          
  //         if (sourceValue !== targetValue) {
  //           form.setValue(loanFieldPath as any, sourceValue, { shouldDirty: true });
  //         }
  //         break;
  //       }
        
  //       // Check if the changed field is a loan field that should sync to property
  //       if (name === loanFieldPath) {
  //         const sourceValue = getNestedValue(value, loanFieldPath) ?? '';
  //         const targetValue = getNestedValue(value, propertyFieldPath) ?? '';
          
  //         if (sourceValue !== targetValue) {
  //           form.setValue(propertyFieldPath as any, sourceValue, { shouldDirty: true });
  //         }
  //         break;
  //       }
  //     }
      
  //     syncInProgress.current = false;
  //   });

  //   return subscription.unsubscribe;
  // }, []);
  
  // REMOVED: Auto-sync logic between Loan and Property tabs
  // Loan cards are now exclusive to Loan tab, Property tab dropdown is independent
  
  // Helper function to get nested value from object path
  const getNestedValue = (obj: any, path: string): string | undefined => {
    return path.split('.').reduce((current, key) => current?.[key], obj);
  };

  // Simplified hook for field binding - canonical mode only
  const useFieldBinding = (name: string, idPrefix: string = '', formInstance: any = null) => {
    const contextForm = useFormContext();
    const targetForm = formInstance || contextForm;
    
    // Safety check for form availability
    if (!targetForm) {
      console.error('useFieldBinding: No form instance available');
      return {
        field: { name: '', onChange: () => {}, onBlur: () => {}, ref: () => {} },
        id: `${idPrefix}${name.replace(/\./g, '-')}`,
        'data-testid': `input-${idPrefix}${name.replace(/\./g, '-')}`
      };
    }
    
    // Normal field registration - let register handle everything
    const registration = targetForm.register(name as any);
    return {
      field: registration,
      id: `${idPrefix}${name.replace(/\./g, '-')}`,
      'data-testid': `input-${idPrefix}${name.replace(/\./g, '-')}`
    };
  };

  // Simplified hook for select field binding - canonical mode only
  const useSelectFieldBinding = (name: string, idPrefix: string = '', formInstance: any = null) => {
    const contextForm = useFormContext();
    const targetForm = formInstance || contextForm;
    
    // Safety check for form availability
    if (!targetForm) {
      console.error('useSelectFieldBinding: No form instance available');
      return {
        value: '',
        onValueChange: () => {},
        'data-testid': `select-${idPrefix}${name.replace(/\./g, '-')}`
      };
    }
    
    return {
      value: targetForm.watch(name as any) || '',
      onValueChange: (value: string) => {
        targetForm.setValue(name as any, value, { shouldDirty: true, shouldTouch: true, shouldValidate: true });
      },
      'data-testid': `select-${idPrefix}${name.replace(/\./g, '-')}`
    };
  };

  // Isolated Loan Start Date component to prevent typing lag
  const LoanPurchaseDateInput = React.memo<{ form: any; idPrefix: string }>(({ form, idPrefix }) => {
    const purchaseDate = useWatch({ control: form.control, name: 'currentLoan.purchaseDate' });

    return (
      <div className="space-y-2">
        <Label htmlFor={`${idPrefix}currentLoan-purchaseDate`}>Loan Start Date</Label>
        <Input
          id={`${idPrefix}currentLoan-purchaseDate`}
          value={purchaseDate || ''}
          onChange={(e) => {
            const value = e.target.value.replace(/\D/g, '');
            let formatted = '';
            if (value.length > 0) {
              formatted = value.substring(0, 2);
              if (value.length > 2) {
                formatted += '/' + value.substring(2, 4);
                if (value.length > 4) {
                  formatted += '/' + value.substring(4, 8);
                }
              }
            }
            form.setValue('currentLoan.purchaseDate', formatted);
          }}
          placeholder="MM/DD/YYYY"
          maxLength={10}
          data-testid={`input-currentLoan-purchaseDate-${idPrefix}`}
        />
      </div>
    );
  });

  // Isolated Total Monthly Payment component to prevent typing lag
  const TotalMonthlyPaymentField = React.memo<{ form: any }>(({ form }) => {
    const [principal, tax] = useWatch({
      control: form.control,
      name: ["currentLoan.principalAndInterestPayment", "currentLoan.newField1"]
    });

    const total = useMemo(() => {
      const pNum = Number((principal || "").toString().replace(/[^\d]/g, "")) || 0;
      const tNum = Number((tax || "").toString().replace(/[^\d]/g, "")) || 0;
      return (pNum + tNum).toLocaleString();
    }, [principal, tax]);

    useEffect(() => {
      const currentTotal = form.getValues("currentLoan.newField2");
      if (currentTotal !== total) {
        form.setValue("currentLoan.newField2", total, {
          shouldDirty: true,
          shouldTouch: false,
          shouldValidate: false
        });
      }
    }, [total, form]);

    return (
      <div className="space-y-2 md:col-span-2">
        <Label htmlFor="currentLoan-newField2">Total Monthly Payment</Label>
        <div className="flex items-center border border-input bg-background px-3 rounded-md">
          <span className="text-muted-foreground text-sm">$</span>
          <Input
            id="currentLoan-newField2"
            type="text"
            placeholder="0"
            value={total}
            readOnly
            className="border-0 bg-transparent px-2 focus-visible:ring-0"
            data-testid="input-currentLoan-newField2"
          />
        </div>
      </div>
    );
  });

  // CurrentLoanCard component - canonical mode only
  const CurrentLoanCard = ({ 
    idPrefix = '', 
    borderVariant, 
    isOpen, 
    setIsOpen, 
    onRemove,
    onAutoCopyAddress,
    formInstance 
  }: {
    idPrefix?: string;
    borderVariant: 'blue' | 'none';
    isOpen: boolean;
    setIsOpen: (open: boolean) => void;
    onRemove?: () => void;
    onAutoCopyAddress?: () => void;
    formInstance?: any;
  }) => {
    const contextForm = useFormContext();
    const targetForm = formInstance || contextForm;
    
    // State for property address collapse
    const [isPropertyAddressOpen, setIsPropertyAddressOpen] = useState(true);
    const currentLenderBinding = useFieldBinding('currentLoan.currentLender', idPrefix, targetForm);
    const loanNumberBinding = useFieldBinding('currentLoan.loanNumber', idPrefix, targetForm);
    const remainingTermBinding = useFieldBinding('currentLoan.remainingTermPerCreditReport', idPrefix, targetForm);
    const loanCategoryBinding = useSelectFieldBinding('currentLoan.loanCategory', idPrefix, targetForm);
    const loanProgramBinding = useSelectFieldBinding('currentLoan.loanProgram', idPrefix, targetForm);
    const loanTermBinding = useSelectFieldBinding('currentLoan.loanTerm', idPrefix, targetForm);
    const loanPurposeBinding = useSelectFieldBinding('currentLoan.loanPurpose', idPrefix, targetForm);
    const prepaymentPenaltyBinding = useSelectFieldBinding('currentLoan.prepaymentPenalty', idPrefix, targetForm);
    const statementBalanceBinding = useFieldBinding('currentLoan.statementBalance.amount', idPrefix, targetForm);
    const attachedToPropertyBinding = useSelectFieldBinding('currentLoan.attachedToProperty', idPrefix, targetForm);
    
    // Payment field bindings - optimized for performance
    const currentRateBinding = useFieldBinding('currentLoan.currentRate', idPrefix, targetForm);
    // REMOVED: principalInterestPaymentBinding and escrowPaymentBinding - now using direct form.register() for better performance
    const totalMonthlyPaymentBinding = useFieldBinding('currentLoan.totalMonthlyPayment', idPrefix, targetForm);
    
    // Property address bindings
    const propertyStreetBinding = useFieldBinding('currentLoan.propertyAddress.street', idPrefix, targetForm);
    const propertyUnitBinding = useFieldBinding('currentLoan.propertyAddress.unit', idPrefix, targetForm);
    const propertyCityBinding = useFieldBinding('currentLoan.propertyAddress.city', idPrefix, targetForm);
    const propertyStateBinding = useSelectFieldBinding('currentLoan.propertyAddress.state', idPrefix, targetForm);
    const propertyZipBinding = useFieldBinding('currentLoan.propertyAddress.zipCode', idPrefix, targetForm);
    const propertyCountyBinding = useFieldBinding('currentLoan.propertyAddress.county', idPrefix, targetForm);
    
    const cardClassName = borderVariant === 'blue' ? 'border-l-4 border-l-blue-500 hover:border-blue-500 focus-within:border-blue-500 transition-colors duration-200' : '';
    
    return (
      <Card className={cardClassName}>
        <Collapsible open={isOpen} onOpenChange={setIsOpen}>
          <CardHeader>
            <div className="flex items-center justify-between">
              <CardTitle>Existing Primary Loan</CardTitle>
              <div className="flex items-center gap-2">
                {/* Add Current Loan Button */}
                <Button
                  type="button"
                  variant="outline"
                  size="sm"
                  onClick={() => {
                    // Generate a unique ID for the new loan card
                    const newLoanId = `current-primary-loan-${Date.now()}`;
                    
                    // Add to cards array
                    setCurrentPrimaryLoanCards(prev => [...(prev || []), newLoanId]);
                    
                    // Initialize data state for new card
                    setCurrentPrimaryLoanData(prev => ({ 
                      ...prev, 
                      [newLoanId]: { isDefaultCard: false } 
                    }));
                    
                    // Initialize per-card collapsible state (auto-expand like Property cards)
                    setCurrentLoanCardStates(prev => ({ ...prev, [newLoanId]: true }));
                    
                    // Auto-expand the loan card
                    setShowCurrentLoan(true);
                    
                    // Trigger animation for newly created loan card grey box
                    setTimeout(() => {
                      const cardIndex = (currentPrimaryLoanCards || []).length - 1; // Array length minus 1 = actual index
                      const animationKey = `card-${cardIndex}-`;
                      setShowCurrentLoanCardAnimation(prev => ({ ...prev, [animationKey]: true }));
                      setTimeout(() => {
                        setShowCurrentLoanCardAnimation(prev => ({ ...prev, [animationKey]: false }));
                      }, 800);
                    }, 200);
                  }}
                  className="hover:bg-blue-500 hover:text-white"
                  data-testid="button-add-current-loan"
                  title="Add Another Primary Loan"
                >
                  <Plus className="h-4 w-4 mr-2" />
                  Add Another Primary Loan
                </Button>
                
                {/* Remove Button */}
                {onRemove && (
                  <Button
                    type="button"
                    variant="outline"
                    size="sm"
                    onClick={onRemove}
                    className="hover:bg-red-500 hover:text-white"
                    data-testid="button-remove-current-loan"
                    title="Remove Current Loan"
                  >
                    <Minus className="h-4 w-4 mr-2" />
                    Remove
                  </Button>
                )}
                
                <CollapsibleTrigger asChild>
                  <Button 
                    variant="ghost" 
                    size="sm" 
                    className="hover:bg-orange-500 hover:text-white" 
                    data-testid={`button-toggle-current-loan-${idPrefix}`}
                    title={isOpen ? 'Minimize' : 'Expand'}
                  >
                    {isOpen ? <Minus className="h-4 w-4" /> : <Plus className="h-4 w-4" />}
                  </Button>
                </CollapsibleTrigger>
              </div>
            </div>
          </CardHeader>
          <CollapsibleContent>
            <CardContent className="space-y-6 pt-[1.7rem]">
              {/* Row 1: Current Lender, Loan Number, Loan Purpose, Pre-Payment Penalty, Remaining Term On Credit Report */}
              <div className="grid grid-cols-1 md:grid-cols-5 gap-4">
                <div className="space-y-2">
                  <Label htmlFor={currentLenderBinding.id}>Lender Name</Label>
                  <Input
                    id={currentLenderBinding.id}
                    {...currentLenderBinding.field}
                    data-testid={currentLenderBinding['data-testid']}
                  />
                </div>
                
                <div className="space-y-2">
                  <Label htmlFor="currentLoan-loanNumber">Loan Number</Label>
                  <Input
                    id="currentLoan-loanNumber"
                    {...form.register('currentLoan.loanNumber')}
                    data-testid="input-currentLoan-loanNumber"
                  />
                </div>
                
                <div className="space-y-2">
                  <Label htmlFor={`${idPrefix}currentLoan-loanPurpose`}>Loan Purpose</Label>
                  <Select {...loanPurposeBinding}>
                    <SelectTrigger data-testid={loanPurposeBinding['data-testid']}>
                      <SelectValue placeholder="Select" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="select">Select</SelectItem>
                      <SelectItem value="purchase">Purchase</SelectItem>
                      <SelectItem value="refinance-rate-term">Refinance Rate & Term</SelectItem>
                      <SelectItem value="refinance-cash-out">Refinance Cash Out</SelectItem>
                      <SelectItem value="construction">Construction</SelectItem>
                      <SelectItem value="other">Other</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                
                <LoanPurchaseDateInput form={targetForm} idPrefix={idPrefix} />
                
                <div className="space-y-2">
                  <Label htmlFor={remainingTermBinding.id}>Remaining Term On Credit Report</Label>
                  <Input
                    id={remainingTermBinding.id}
                    {...remainingTermBinding.field}
                    placeholder="Years/Months"
                    data-testid={remainingTermBinding['data-testid']}
                  />
                </div>
              </div>
              
              {/* Row 2: Loan Category, Loan Balance, Loan Term, Loan Duration, Pre-Payment Penalty */}
              <div className="grid grid-cols-1 md:grid-cols-5 gap-4">
                <div className="space-y-2">
                  <Label htmlFor={`${idPrefix}currentLoan-loanCategory`}>Loan Category</Label>
                  <Select {...loanCategoryBinding}>
                    <SelectTrigger data-testid={loanCategoryBinding['data-testid']}>
                      <SelectValue placeholder="Select" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="select">Select</SelectItem>
                      <SelectItem value="conventional">Conventional</SelectItem>
                      <SelectItem value="conventional-jumbo">Conventional Jumbo</SelectItem>
                      <SelectItem value="fha">FHA</SelectItem>
                      <SelectItem value="va">VA</SelectItem>
                      <SelectItem value="va-jumbo">VA Jumbo</SelectItem>
                      <SelectItem value="other">Other</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                
                <div className="space-y-2">
                  <Label htmlFor="currentLoan-currentBalance">Loan Balance</Label>
                  <Controller
                    control={form.control}
                    name="currentLoan.statementBalance.amount"
                    defaultValue=""
                    render={({ field }) => {
                      const numVal = field.value ? field.value.replace(/[^\d]/g, '') : '';
                      const displayValue = numVal ? numVal.replace(/\B(?=(\d{3})+(?!\d))/g, ',') : '';
                      
                      return (
                        <div className="flex items-center border border-input bg-background px-3 rounded-md">
                          <span className="text-muted-foreground text-sm">$</span>
                          <Input
                            id="currentLoan-currentBalance"
                            type="text"
                            placeholder="0"
                            value={displayValue}
                            onChange={(e) => {
                              const value = e.target.value.replace(/[^\d]/g, '');
                              field.onChange(value);
                            }}
                            className="border-0 bg-transparent px-2 focus-visible:ring-0"
                            data-testid="input-currentLoan-currentBalance"
                          />
                        </div>
                      );
                    }}
                  />
                </div>
                
                <div className="space-y-2">
                  <Label htmlFor={`${idPrefix}currentLoan-loanProgram`}>Loan Term</Label>
                  <Select {...loanProgramBinding}>
                    <SelectTrigger data-testid={loanProgramBinding['data-testid']}>
                      <SelectValue placeholder="Select" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="select">Select</SelectItem>
                      <SelectItem value="fixed-rate">Fixed Rate</SelectItem>
                      <SelectItem value="adjustable">Adjustable</SelectItem>
                      <SelectItem value="other">Other</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                
                <div className="space-y-2">
                  <Label htmlFor={`${idPrefix}currentLoan-loanTerm`}>Loan Duration</Label>
                  <Select {...loanTermBinding}>
                    <SelectTrigger data-testid={loanTermBinding['data-testid']}>
                      <SelectValue placeholder="Select" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="select">Select</SelectItem>
                      <SelectItem value="30-years">30 years</SelectItem>
                      <SelectItem value="25-years">25 years</SelectItem>
                      <SelectItem value="20-years">20 years</SelectItem>
                      <SelectItem value="15-years">15 years</SelectItem>
                      <SelectItem value="10-years">10 years</SelectItem>
                      <SelectItem value="other">Other</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                
                <div className="space-y-2">
                  <Label htmlFor={`${idPrefix}currentLoan-prepaymentPenalty`}>Pre-Payment Penalty</Label>
                  <Select {...prepaymentPenaltyBinding}>
                    <SelectTrigger data-testid={prepaymentPenaltyBinding['data-testid']}>
                      <SelectValue placeholder="Select" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="select">Select</SelectItem>
                      <SelectItem value="Yes - see notes">Yes - see notes</SelectItem>
                      <SelectItem value="No">No</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>
              
              {/* Row 3: Principal & Interest Payment, Attached to Property */}
              <Card className={`bg-muted ${
                showCurrentLoanCardAnimation[idPrefix] ? 'animate-roll-up-grey-box' : ''
              }`}>
                <CardContent className="pt-6">
                  <div className="grid grid-cols-1 md:grid-cols-10 gap-4">
                <div className="space-y-2 md:col-span-1">
                  <Label htmlFor="currentLoan-currentRate">Interest Rate</Label>
                  <Controller
                    control={form.control}
                    name="currentLoan.currentRate"
                    defaultValue=""
                    render={({ field }) => {
                      const numVal = field.value ? field.value.replace(/[^\d.]/g, '') : '';
                      const parts = numVal.split('.');
                      let displayValue = parts[0];
                      if (parts.length > 1) {
                        displayValue += '.' + parts[1].substring(0, 3);
                      }
                      
                      return (
                        <div className="flex items-center border border-input bg-background px-3 rounded-md">
                          <Input
                            id="currentLoan-currentRate"
                            type="text"
                            placeholder="0.000"
                            value={displayValue}
                            onChange={(e) => {
                              const value = e.target.value.replace(/[^\d.]/g, '');
                              const parts = value.split('.');
                              if (parts.length > 2) return;
                              if (parts.length === 2 && parts[1].length > 3) return;
                              field.onChange(value);
                            }}
                            className="border-0 bg-transparent px-2 focus-visible:ring-0"
                            data-testid="input-currentLoan-currentRate"
                          />
                          <span className="text-muted-foreground text-sm">%</span>
                        </div>
                      );
                    }}
                  />
                </div>
                
                <div className="space-y-2 md:col-span-2">
                  <Label htmlFor="currentLoan-principalInterestPayment">Principal & Interest Payment</Label>
                  <Controller
                    control={form.control}
                    name="currentLoan.principalAndInterestPayment"
                    defaultValue=""
                    render={({ field }) => (
                      <div className="flex items-center border border-input bg-background px-3 rounded-md">
                        <span className="text-muted-foreground text-sm">$</span>
                        <Input
                          id="currentLoan-principalInterestPayment"
                          type="text"
                          placeholder="0"
                          value={field.value}
                          onChange={(e) => {
                            const value = e.target.value.replace(/[^\d]/g, '');
                            field.onChange(value);
                          }}
                          onBlur={(e) => {
                            const value = e.target.value.replace(/[^\d]/g, '');
                            const formatted = value ? Number(value).toLocaleString() : '';
                            form.setValue("currentLoan.principalAndInterestPayment", formatted);
                          }}
                          className="border-0 bg-transparent px-2 focus-visible:ring-0"
                          data-testid="input-currentLoan-principalInterestPayment"
                        />
                      </div>
                    )}
                  />
                </div>
                
                <div className="space-y-2 md:col-span-2">
                  <Label htmlFor="currentLoan-newField1">Tax & Insurance Payment</Label>
                  <Controller
                    control={form.control}
                    name="currentLoan.newField1"
                    defaultValue=""
                    render={({ field }) => (
                      <div className="flex items-center border border-input bg-background px-3 rounded-md">
                        <span className="text-muted-foreground text-sm">$</span>
                        <Input
                          id="currentLoan-newField1"
                          type="text"
                          placeholder="0"
                          value={field.value}
                          onChange={(e) => {
                            const value = e.target.value.replace(/[^\d]/g, '');
                            field.onChange(value);
                          }}
                          onBlur={(e) => {
                            const value = e.target.value.replace(/[^\d]/g, '');
                            const formatted = value ? Number(value).toLocaleString() : '';
                            form.setValue("currentLoan.newField1", formatted);
                          }}
                          className="border-0 bg-transparent px-2 focus-visible:ring-0"
                          data-testid="input-currentLoan-newField1"
                        />
                      </div>
                    )}
                  />
                </div>
                
                <TotalMonthlyPaymentField form={form} />
                
                <div className="space-y-2 md:col-span-3">
                  <Label htmlFor={`${idPrefix}currentLoan-attachedToProperty`}>Attached to Property</Label>
                  <Select 
                    {...attachedToPropertyBinding}
                    onValueChange={(value) => {
                      attachedToPropertyBinding.onValueChange(value);
                      if (value && value !== '' && onAutoCopyAddress) {
                        setTimeout(() => onAutoCopyAddress(), 100);
                      }
                    }}
                  >
                    <SelectTrigger data-testid={attachedToPropertyBinding['data-testid']}>
                      <SelectValue placeholder="Select" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="select">Select</SelectItem>
                      {(() => {
                        const properties = targetForm.watch('property.properties') || [];
                        
                        // Get all attached properties from other Existing Primary Loan cards
                        const attachedPropertyIds = new Set<string>();
                        (currentPrimaryLoanCards || []).forEach((otherCardId, otherIndex) => {
                          // Skip the current card
                          if (`card-${otherIndex}-` !== idPrefix) {
                            const attachedProp = targetForm.watch(`card-${otherIndex}-currentLoan.attachedToProperty`);
                            if (attachedProp && attachedProp !== 'select' && attachedProp !== 'Other') {
                              attachedPropertyIds.add(attachedProp);
                            }
                          }
                        });
                        
                        return properties
                          .filter((property: any) => {
                            // Exclude Home Purchase properties
                            if (property.use === 'home-purchase') return false;
                            // Exclude properties already attached to other loan cards
                            if (attachedPropertyIds.has(property.id)) return false;
                            // Show properties with addresses or primary residence
                            return property.address?.street || property.use === 'primary';
                          })
                          .map((property: any, index: number) => {
                            const address = property.address;
                            const streetAddress = address?.street;
                            const city = address?.city;
                            const state = address?.state;
                            const zipCode = address?.zip;
                            
                            // Build display text using address components for uniqueness
                            let displayText;
                            
                            // Special handling for Primary Residence without address
                            if (property.use === 'primary' && !streetAddress) {
                              displayText = 'Primary Residence';
                            } else {
                              displayText = streetAddress || 'Property';
                              if (city && state) {
                                displayText += `, ${city}, ${state}`;
                              } else if (city) {
                                displayText += `, ${city}`;
                              } else if (state) {
                                displayText += `, ${state}`;
                              }
                              if (zipCode) {
                                displayText += ` ${zipCode}`;
                              }
                            }
                            
                            return (
                              <SelectItem key={`property-${property.id}`} value={property.id}>
                                {displayText}
                              </SelectItem>
                            );
                          });
                      })()}
                      <SelectItem value="Other">Other</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                  </div>
                </CardContent>
              </Card>
            </CardContent>
          </CollapsibleContent>
        </Collapsible>
      </Card>
    );
  };

  // CurrentSecondLoanCard component - using Current Third Loan structure
  const CurrentSecondLoanCard = ({ 
    cardId,
    idPrefix = '', 
    borderVariant, 
    isOpen, 
    setIsOpen, 
    onRemove,
    onAutoCopyAddress,
    onAddAdditionalLoan,
    formInstance 
  }: {
    cardId: string;
    idPrefix?: string;
    borderVariant: 'blue' | 'none';
    isOpen: boolean;
    setIsOpen: (open: boolean) => void;
    onRemove?: () => void;
    onAutoCopyAddress?: () => void;
    onAddAdditionalLoan?: () => void;
    formInstance?: any;
  }) => {
    const contextForm = useFormContext();
    const targetForm = formInstance || contextForm;
    const [isPropertyAddressOpen, setIsPropertyAddressOpen] = useState(false);
    
    const cardClassName = borderVariant === 'blue' ? 'border-l-4 border-l-purple-500 hover:border-purple-500 focus-within:border-purple-500 transition-colors duration-200' : '';
    
    return (
      <Card className={cardClassName}>
        <Collapsible open={isOpen} onOpenChange={setIsOpen}>
          <CardHeader>
            <div className="flex items-center justify-between">
              <CardTitle>Existing Second Loan</CardTitle>
              <div className="flex items-center gap-2">
                {/* Add Current Second Loan Button */}
                <Button
                  type="button"
                  variant="outline"
                  size="sm"
                  onClick={() => {
                    // Generate a unique ID for the new loan card
                    const newLoanId = `current-second-loan-${Date.now()}`;
                    
                    // Add to cards array
                    setCurrentSecondLoanCards(prev => [...(prev || []), newLoanId]);
                    
                    // Initialize data state for new card
                    setCurrentSecondLoanData(prev => ({ 
                      ...prev, 
                      [newLoanId]: { isDefaultCard: false } 
                    }));
                    
                    // Initialize per-card collapsible state (auto-expand like Property cards)
                    setSecondLoanCardStates(prev => ({ ...prev, [newLoanId]: true }));
                    
                    // Auto-expand the loan card
                    setShowSecondLoan(true);
                    
                    // Trigger animation for newly created loan card grey box
                    setTimeout(() => {
                      const cardIndex = (currentSecondLoanCards || []).length - 1; // Array length minus 1 = actual index
                      const animationKey = `second-card-${cardIndex}-`;
                      setShowSecondLoanCardAnimation(prev => ({ ...prev, [animationKey]: true }));
                      setTimeout(() => {
                        setShowSecondLoanCardAnimation(prev => ({ ...prev, [animationKey]: false }));
                      }, 800);
                    }, 200);
                  }}
                  className="hover:bg-blue-500 hover:text-white"
                  data-testid="button-add-current-second-loan"
                  title="Add Another Second Loan"
                >
                  <Plus className="h-4 w-4 mr-2" />
                  Add Another Second Loan
                </Button>
                
                {/* Remove Button */}
                {onRemove && (
                  <Button
                    type="button"
                    variant="outline"
                    size="sm"
                    onClick={onRemove}
                    className="hover:bg-red-500 hover:text-white"
                    data-testid={`button-remove-second-loan-${idPrefix}`}
                    title="Remove Current Second Loan"
                  >
                    <Minus className="h-4 w-4 mr-2" />
                    Remove
                  </Button>
                )}
                
                <CollapsibleTrigger asChild>
                  <Button 
                    variant="ghost" 
                    size="sm" 
                    className="hover:bg-orange-500 hover:text-white" 
                    data-testid={`button-toggle-second-loan-${idPrefix}`}
                    title={isOpen ? 'Minimize' : 'Expand'}
                  >
                    {isOpen ? <Minus className="h-4 w-4" /> : <Plus className="h-4 w-4" />}
                  </Button>
                </CollapsibleTrigger>
              </div>
            </div>
          </CardHeader>
          <CollapsibleContent>
            <CardContent className="space-y-6 pt-[1.7rem]">
              {/* Row 1: Lender Name, Loan Number, Loan Category, Loan Term, Loan Duration */}
              <div className="grid grid-cols-1 md:grid-cols-5 gap-4">
                <div className="space-y-2">
                  <Label htmlFor={`${cardId}-lenderName`}>Lender Name</Label>
                  <Input
                    id={`${cardId}-lenderName`}
                    {...targetForm.register(`${cardId}.lenderName`)}
                    data-testid={`input-${cardId}-lenderName`}
                  />
                </div>
                
                <div className="space-y-2">
                  <Label htmlFor={`${cardId}-loanNumber`}>Loan Number</Label>
                  <Input
                    id={`${cardId}-loanNumber`}
                    {...targetForm.register(`${cardId}.loanNumber`)}
                    data-testid={`input-${cardId}-loanNumber`}
                  />
                </div>
                
                <div className="space-y-2">
                  <Label htmlFor={`${cardId}-loanCategory`}>Loan Category</Label>
                  <Select value={targetForm.watch(`${cardId}.loanCategory`) || ''} onValueChange={(value) => targetForm.setValue(`${cardId}.loanCategory`, value)}>
                    <SelectTrigger data-testid={`select-${cardId}-loanCategory`}>
                      <SelectValue placeholder="Select" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="select">Select</SelectItem>
                      <SelectItem value="heloc">HELOC</SelectItem>
                      <SelectItem value="fixed">FIXED</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                
                <div className="space-y-2">
                  <Label htmlFor={`${cardId}-loanProgram`}>Loan Term</Label>
                  <Select value={targetForm.watch(`${cardId}.loanProgram`) || ''} onValueChange={(value) => targetForm.setValue(`${cardId}.loanProgram`, value)}>
                    <SelectTrigger data-testid={`select-${cardId}-loanProgram`}>
                      <SelectValue placeholder="Select" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="select">Select</SelectItem>
                      <SelectItem value="heloc">HELOC</SelectItem>
                      <SelectItem value="fixed-second-loan">Fixed Second Loan</SelectItem>
                      <SelectItem value="adjustable-second-loan">Adjustable Second Loan</SelectItem>
                      <SelectItem value="home-improvement-loan">Home Improvement Loan</SelectItem>
                      <SelectItem value="other">Other</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                
                <div className="space-y-2">
                  <Label htmlFor={`${cardId}-loanDuration`}>Loan Duration</Label>
                  <Select value={targetForm.watch(`${cardId}.loanDuration`) || ''} onValueChange={(value) => targetForm.setValue(`${cardId}.loanDuration`, value)}>
                    <SelectTrigger data-testid={`select-${cardId}-loanDuration`}>
                      <SelectValue placeholder="Select" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="select">Select</SelectItem>
                      <SelectItem value="30-years">30 Years</SelectItem>
                      <SelectItem value="25-years">25 Years</SelectItem>
                      <SelectItem value="20-years">20 Years</SelectItem>
                      <SelectItem value="15-years">15 Years</SelectItem>
                      <SelectItem value="10-years">10 Years</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>
              
              {/* Row 2: Principal & Interest Payment, Escrow Payment, Total Monthly Payment, Pre-Payment Penalty, Attached to Property */}
              <Card className={`bg-muted ${
                showSecondLoanCardAnimation[idPrefix] ? 'animate-roll-up-grey-box' : ''
              }`}>
                <CardContent className="pt-6">
                  <div className="grid grid-cols-1 md:grid-cols-10 gap-4">
                <div className="space-y-2 md:col-span-1">
                  <Label htmlFor={`${cardId}-interestRate`}>Interest Rate</Label>
                  <div className="flex items-center border border-input bg-background px-3 rounded-md">
                    <Input
                      id={`${cardId}-interestRate`}
                      {...targetForm.register(`${cardId}.interestRate`)}
                      placeholder="0.00"
                      className="border-0 bg-transparent px-2 focus-visible:ring-0"
                      data-testid={`input-${cardId}-interestRate`}
                    />
                    <span className="text-muted-foreground text-sm">%</span>
                  </div>
                </div>
                
                <div className="space-y-2 md:col-span-2">
                  <Label htmlFor={`${cardId}-principalInterestPayment`}>Loan Balance</Label>
                  <Controller
                    control={targetForm.control}
                    name={`${cardId}.principalAndInterestPayment` as any}
                    defaultValue=""
                    render={({ field }) => {
                      const numVal = field.value ? field.value.replace(/[^\d]/g, '') : '';
                      const displayValue = numVal ? numVal.replace(/\B(?=(\d{3})+(?!\d))/g, ',') : '';
                      
                      return (
                        <div className="flex items-center border border-input bg-background px-3 rounded-md">
                          <span className="text-muted-foreground text-sm">$</span>
                          <Input
                            id={`${cardId}-principalInterestPayment`}
                            type="text"
                            placeholder="0"
                            value={displayValue}
                            onChange={(e) => {
                              const value = e.target.value.replace(/[^\d]/g, '');
                              field.onChange(value);
                            }}
                            className="border-0 bg-transparent px-2 focus-visible:ring-0"
                            data-testid={`input-${cardId}-principalInterestPayment`}
                          />
                        </div>
                      );
                    }}
                  />
                </div>
                
                <div className="space-y-2 md:col-span-2">
                  <Label htmlFor={`${cardId}-monthlyEscrow`}>Monthly Payment</Label>
                  <Controller
                    control={targetForm.control}
                    name={`${cardId}.escrowPayment` as any}
                    defaultValue=""
                    render={({ field }) => {
                      const numVal = field.value ? field.value.replace(/[^\d]/g, '') : '';
                      const displayValue = numVal ? numVal.replace(/\B(?=(\d{3})+(?!\d))/g, ',') : '';
                      
                      return (
                        <div className="flex items-center border border-input bg-background px-3 rounded-md">
                          <span className="text-muted-foreground text-sm">$</span>
                          <Input
                            id={`${cardId}-monthlyEscrow`}
                            type="text"
                            placeholder="0"
                            value={displayValue}
                            onChange={(e) => {
                              const value = e.target.value.replace(/[^\d]/g, '');
                              field.onChange(value);
                            }}
                            className="border-0 bg-transparent px-2 focus-visible:ring-0"
                            data-testid={`input-${cardId}-monthlyEscrow`}
                          />
                        </div>
                      );
                    }}
                  />
                </div>
                
                <div className="space-y-2 md:col-span-2">
                  <Label htmlFor={`${cardId}-prePaymentPenalty`}>Pre-Payment Penalty</Label>
                  <Select value={targetForm.watch(`${cardId}.prePaymentPenalty`) || ''} onValueChange={(value) => {
                    targetForm.setValue(`${cardId}.prePaymentPenalty`, value);
                  }}>
                    <SelectTrigger data-testid={`select-${cardId}-prePaymentPenalty`}>
                      <SelectValue placeholder="select" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="select">select</SelectItem>
                      <SelectItem value="No">No</SelectItem>
                      <SelectItem value="Yes - See Loan Notes">Yes - See Loan Notes</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                
                <div className="space-y-2 md:col-span-3">
                  <Label htmlFor={`${cardId}-attachedToProperty`}>Attached to Property</Label>
                  <Select value={targetForm.watch(`${cardId}.attachedToProperty`) || ''} onValueChange={(value) => {
                    targetForm.setValue(`${cardId}.attachedToProperty`, value as any);
                    if (value && value !== 'Other' && value !== 'select') {
                      setTimeout(() => onAutoCopyAddress?.(), 100);
                    } else if (value === 'Other' || value === 'select') {
                      // Clear address fields for Other or empty
                      targetForm.setValue(`${cardId}.propertyAddress.street`, '');
                      targetForm.setValue(`${cardId}.propertyAddress.unit`, '');
                      targetForm.setValue(`${cardId}.propertyAddress.city`, '');
                      targetForm.setValue(`${cardId}.propertyAddress.state`, '');
                      targetForm.setValue(`${cardId}.propertyAddress.zipCode`, '');
                      targetForm.setValue(`${cardId}.propertyAddress.county`, '');
                    }
                  }}>
                    <SelectTrigger data-testid={`select-${cardId}-attachedToProperty`}>
                      <SelectValue placeholder="Select" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="select">Select</SelectItem>
                      {(() => {
                        const properties = targetForm.watch('property.properties') || [];
                        
                        // Get all attached properties from other Existing Second Loan cards
                        const attachedPropertyIds = new Set<string>();
                        (currentSecondLoanCards || []).forEach((otherCardId) => {
                          // Skip the current card
                          if (otherCardId !== cardId) {
                            const attachedProp = targetForm.watch(`${otherCardId}.attachedToProperty`);
                            if (attachedProp && attachedProp !== 'select' && attachedProp !== 'Other') {
                              attachedPropertyIds.add(attachedProp);
                            }
                          }
                        });
                        
                        return properties
                          .filter((property: any) => {
                            // Exclude Home Purchase properties
                            if (property.use === 'home-purchase') return false;
                            // Exclude properties already attached to other loan cards
                            if (attachedPropertyIds.has(property.id)) return false;
                            // Show properties with addresses or primary residence
                            return property.address?.street || property.use === 'primary';
                          })
                          .map((property: any, index: number) => {
                            const address = property.address;
                            const streetAddress = address?.street;
                            const city = address?.city;
                            const state = address?.state;
                            const zipCode = address?.zip;
                            
                            // Build display text using address components for uniqueness
                            let displayText;
                            
                            // Special handling for Primary Residence without address
                            if (property.use === 'primary' && !streetAddress) {
                              displayText = 'Primary Residence';
                            } else {
                              displayText = streetAddress || 'Property';
                              if (city && state) {
                                displayText += `, ${city}, ${state}`;
                              } else if (city) {
                                displayText += `, ${city}`;
                              } else if (state) {
                                displayText += `, ${state}`;
                              }
                              if (zipCode) {
                                displayText += ` ${zipCode}`;
                              }
                            }
                            
                            return (
                              <SelectItem key={`property-${property.id}`} value={property.id}>
                                {displayText}
                              </SelectItem>
                            );
                          });
                      })()}
                      <SelectItem value="Other">Other</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                  </div>
                </CardContent>
              </Card>
            </CardContent>
          </CollapsibleContent>
        </Collapsible>
      </Card>
    );
  };

  // CurrentThirdLoanCard component - using Current Third Loan structure with multiple card support
  const CurrentThirdLoanCard = ({ 
    cardId,
    idPrefix = '', 
    borderVariant, 
    isOpen, 
    setIsOpen, 
    onRemove,
    onAutoCopyAddress,
    onAddAdditionalLoan,
    formInstance 
  }: {
    cardId: string;
    idPrefix?: string;
    borderVariant: 'blue' | 'none';
    isOpen: boolean;
    setIsOpen: (open: boolean) => void;
    onRemove?: () => void;
    onAutoCopyAddress?: () => void;
    onAddAdditionalLoan?: () => void;
    formInstance?: any;
  }) => {
    const contextForm = useFormContext();
    const targetForm = formInstance || contextForm;
    const [isPropertyAddressOpen, setIsPropertyAddressOpen] = useState(false);
    
    const cardClassName = 'border-l-4 border-l-orange-500 hover:border-orange-500 focus-within:border-orange-500 transition-colors duration-200';
    
    return (
      <Card className={cardClassName}>
        <Collapsible open={isOpen} onOpenChange={setIsOpen}>
          <CardHeader>
            <div className="flex items-center justify-between">
              <CardTitle>Existing Third Loan</CardTitle>
              <div className="flex items-center gap-2">
                {/* Add Current Loan Button */}
                <Button
                  type="button"
                  variant="outline"
                  size="sm"
                  onClick={() => {
                    // Generate a unique ID for the new loan card
                    const newLoanId = `current-third-loan-${Date.now()}`;
                    
                    // Add to cards array
                    setCurrentThirdLoanCards(prev => [...(prev || []), newLoanId]);
                    
                    // Initialize data state for new card
                    setCurrentThirdLoanData(prev => ({ 
                      ...prev, 
                      [newLoanId]: { isDefaultCard: false } 
                    }));
                    
                    // Initialize per-card collapsible state (auto-expand like Property cards)
                    setThirdLoanCardStates(prev => ({ ...prev, [newLoanId]: true }));
                    
                    // Auto-expand the loan card
                    setShowThirdLoan(true);
                    
                    // Trigger animation for newly created loan card grey box
                    setTimeout(() => {
                      const cardIndex = (currentThirdLoanCards || []).length - 1; // Array length minus 1 = actual index
                      const animationKey = `third-card-${cardIndex}-`;
                      setShowThirdLoanCardAnimation(prev => ({ ...prev, [animationKey]: true }));
                      setTimeout(() => {
                        setShowThirdLoanCardAnimation(prev => ({ ...prev, [animationKey]: false }));
                      }, 800);
                    }, 200);
                  }}
                  className="hover:bg-blue-500 hover:text-white"
                  data-testid="button-add-current-loan"
                  title="Add Another Third Loan"
                >
                  <Plus className="h-4 w-4 mr-2" />
                  Add Another Third Loan
                </Button>
                
                {/* Remove Button */}
                {onRemove && (
                  <Button
                    type="button"
                    variant="outline"
                    size="sm"
                    onClick={onRemove}
                    className="hover:bg-red-500 hover:text-white"
                    data-testid="button-remove-current-loan"
                    title="Remove Current Loan"
                  >
                    <Minus className="h-4 w-4 mr-2" />
                    Remove
                  </Button>
                )}
                
                <CollapsibleTrigger asChild>
                  <Button 
                    variant="ghost" 
                    size="sm" 
                    className="hover:bg-orange-500 hover:text-white" 
                    data-testid={`button-toggle-third-loan-${idPrefix}`}
                    title={isOpen ? 'Minimize' : 'Expand'}
                  >
                    {isOpen ? <Minus className="h-4 w-4" /> : <Plus className="h-4 w-4" />}
                  </Button>
                </CollapsibleTrigger>
              </div>
            </div>
          </CardHeader>
          <CollapsibleContent>
            <CardContent className="space-y-6 pt-[1.7rem]">
              {/* Row 1: Lender Name, Loan Number, Loan Category, Loan Term, Loan Duration */}
              <div className="grid grid-cols-1 md:grid-cols-5 gap-4">
                <div className="space-y-2">
                  <Label htmlFor={`${cardId}-lenderName`}>Lender Name</Label>
                  <Input
                    id={`${cardId}-lenderName`}
                    {...targetForm.register(`${cardId}.lenderName`)}
                    data-testid={`input-${cardId}-lenderName`}
                  />
                </div>
                
                <div className="space-y-2">
                  <Label htmlFor={`${cardId}-loanNumber`}>Loan Number</Label>
                  <Input
                    id={`${cardId}-loanNumber`}
                    {...targetForm.register(`${cardId}.loanNumber`)}
                    data-testid={`input-${cardId}-loanNumber`}
                  />
                </div>
                
                <div className="space-y-2">
                  <Label htmlFor={`${cardId}-loanCategory`}>Loan Category</Label>
                  <Select value={targetForm.watch(`${cardId}.loanCategory`) || ''} onValueChange={(value) => targetForm.setValue(`${cardId}.loanCategory`, value)}>
                    <SelectTrigger data-testid={`select-${cardId}-loanCategory`}>
                      <SelectValue placeholder="Select" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="select">Select</SelectItem>
                      <SelectItem value="heloc">HELOC</SelectItem>
                      <SelectItem value="fixed">FIXED</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                
                <div className="space-y-2">
                  <Label htmlFor={`${cardId}-loanProgram`}>Loan Term</Label>
                  <Select value={targetForm.watch(`${cardId}.loanProgram`) || ''} onValueChange={(value) => targetForm.setValue(`${cardId}.loanProgram`, value)}>
                    <SelectTrigger data-testid={`select-${cardId}-loanProgram`}>
                      <SelectValue placeholder="Select" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="select">Select</SelectItem>
                      <SelectItem value="heloc">HELOC</SelectItem>
                      <SelectItem value="fixed-second-loan">Fixed Second Loan</SelectItem>
                      <SelectItem value="adjustable-second-loan">Adjustable Second Loan</SelectItem>
                      <SelectItem value="home-improvement-loan">Home Improvement Loan</SelectItem>
                      <SelectItem value="other">Other</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                
                <div className="space-y-2">
                  <Label htmlFor={`${cardId}-loanDuration`}>Loan Duration</Label>
                  <Select value={targetForm.watch(`${cardId}.loanDuration`) || ''} onValueChange={(value) => targetForm.setValue(`${cardId}.loanDuration`, value)}>
                    <SelectTrigger data-testid={`select-${cardId}-loanDuration`}>
                      <SelectValue placeholder="Select" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="select">Select</SelectItem>
                      <SelectItem value="30-years">30 Years</SelectItem>
                      <SelectItem value="25-years">25 Years</SelectItem>
                      <SelectItem value="20-years">20 Years</SelectItem>
                      <SelectItem value="15-years">15 Years</SelectItem>
                      <SelectItem value="10-years">10 Years</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>
              
              {/* Row 2: Principal & Interest Payment, Escrow Payment, Total Monthly Payment, Pre-Payment Penalty, Attached to Property */}
              <Card className={`bg-muted ${
                showThirdLoanCardAnimation[idPrefix] ? 'animate-roll-up-grey-box' : ''
              }`}>
                <CardContent className="pt-6">
                  <div className="grid grid-cols-1 md:grid-cols-10 gap-4">
                <div className="space-y-2 md:col-span-1">
                  <Label htmlFor={`${cardId}-interestRate`}>Interest Rate</Label>
                  <div className="flex items-center border border-input bg-background px-3 rounded-md">
                    <Input
                      id={`${cardId}-interestRate`}
                      {...targetForm.register(`${cardId}.interestRate`)}
                      placeholder="0.00"
                      className="border-0 bg-transparent px-2 focus-visible:ring-0"
                      data-testid={`input-${cardId}-interestRate`}
                    />
                    <span className="text-muted-foreground text-sm">%</span>
                  </div>
                </div>
                
                <div className="space-y-2 md:col-span-2">
                  <Label htmlFor={`${cardId}-principalInterestPayment`}>Loan Balance</Label>
                  <Controller
                    control={targetForm.control}
                    name={`${cardId}.principalAndInterestPayment` as any}
                    defaultValue=""
                    render={({ field }) => {
                      const numVal = field.value ? field.value.replace(/[^\d]/g, '') : '';
                      const displayValue = numVal ? numVal.replace(/\B(?=(\d{3})+(?!\d))/g, ',') : '';
                      
                      return (
                        <div className="flex items-center border border-input bg-background px-3 rounded-md">
                          <span className="text-muted-foreground text-sm">$</span>
                          <Input
                            id={`${cardId}-principalInterestPayment`}
                            type="text"
                            placeholder="0"
                            value={displayValue}
                            onChange={(e) => {
                              const value = e.target.value.replace(/[^\d]/g, '');
                              field.onChange(value);
                            }}
                            className="border-0 bg-transparent px-2 focus-visible:ring-0"
                            data-testid={`input-${cardId}-principalInterestPayment`}
                          />
                        </div>
                      );
                    }}
                  />
                </div>
                
                <div className="space-y-2 md:col-span-2">
                  <Label htmlFor={`${cardId}-monthlyEscrow`}>Monthly Payment</Label>
                  <Controller
                    control={targetForm.control}
                    name={`${cardId}.escrowPayment` as any}
                    defaultValue=""
                    render={({ field }) => {
                      const numVal = field.value ? field.value.replace(/[^\d]/g, '') : '';
                      const displayValue = numVal ? numVal.replace(/\B(?=(\d{3})+(?!\d))/g, ',') : '';
                      
                      return (
                        <div className="flex items-center border border-input bg-background px-3 rounded-md">
                          <span className="text-muted-foreground text-sm">$</span>
                          <Input
                            id={`${cardId}-monthlyEscrow`}
                            type="text"
                            placeholder="0"
                            value={displayValue}
                            onChange={(e) => {
                              const value = e.target.value.replace(/[^\d]/g, '');
                              field.onChange(value);
                            }}
                            className="border-0 bg-transparent px-2 focus-visible:ring-0"
                            data-testid={`input-${cardId}-monthlyEscrow`}
                          />
                        </div>
                      );
                    }}
                  />
                </div>
                
                <div className="space-y-2 md:col-span-2">
                  <Label htmlFor={`${cardId}-prePaymentPenalty`}>Pre-Payment Penalty</Label>
                  <Select value={targetForm.watch(`${cardId}.prePaymentPenalty`) || ''} onValueChange={(value) => {
                    targetForm.setValue(`${cardId}.prePaymentPenalty`, value);
                  }}>
                    <SelectTrigger data-testid={`select-${cardId}-prePaymentPenalty`}>
                      <SelectValue placeholder="select" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="select">select</SelectItem>
                      <SelectItem value="No">No</SelectItem>
                      <SelectItem value="Yes - See Loan Notes">Yes - See Loan Notes</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                
                <div className="space-y-2 md:col-span-3">
                  <Label htmlFor={`${cardId}-attachedToProperty`}>Attached to Property</Label>
                  <Select value={targetForm.watch(`${cardId}.attachedToProperty`) || ''} onValueChange={(value) => {
                    targetForm.setValue(`${cardId}.attachedToProperty`, value as any);
                    if (value && value !== 'Other' && value !== 'select') {
                      setTimeout(() => onAutoCopyAddress?.(), 100);
                    } else if (value === 'Other' || value === 'select') {
                      // Clear address fields for Other or empty
                      targetForm.setValue(`${cardId}.propertyAddress.street`, '');
                      targetForm.setValue(`${cardId}.propertyAddress.unit`, '');
                      targetForm.setValue(`${cardId}.propertyAddress.city`, '');
                      targetForm.setValue(`${cardId}.propertyAddress.state`, '');
                      targetForm.setValue(`${cardId}.propertyAddress.zipCode`, '');
                      targetForm.setValue(`${cardId}.propertyAddress.county`, '');
                    }
                  }}>
                    <SelectTrigger data-testid={`select-${cardId}-attachedToProperty`}>
                      <SelectValue placeholder="Select" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="select">Select</SelectItem>
                      {(() => {
                        const properties = targetForm.watch('property.properties') || [];
                        
                        // Get all attached properties from other Existing Third Loan cards
                        const attachedPropertyIds = new Set<string>();
                        (currentThirdLoanCards || []).forEach((otherCardId) => {
                          // Skip the current card
                          if (otherCardId !== cardId) {
                            const attachedProp = targetForm.watch(`${otherCardId}.attachedToProperty`);
                            if (attachedProp && attachedProp !== 'select' && attachedProp !== 'Other') {
                              attachedPropertyIds.add(attachedProp);
                            }
                          }
                        });
                        
                        return properties
                          .filter((property: any) => {
                            // Exclude Home Purchase properties
                            if (property.use === 'home-purchase') return false;
                            // Exclude properties already attached to other loan cards
                            if (attachedPropertyIds.has(property.id)) return false;
                            // Show properties with addresses or primary residence
                            return property.address?.street || property.use === 'primary';
                          })
                          .map((property: any, index: number) => {
                            const address = property.address;
                            const streetAddress = address?.street;
                            const city = address?.city;
                            const state = address?.state;
                            const zipCode = address?.zip;
                            
                            // Build display text using address components for uniqueness
                            let displayText;
                            
                            // Special handling for Primary Residence without address
                            if (property.use === 'primary' && !streetAddress) {
                              displayText = 'Primary Residence';
                            } else {
                              displayText = streetAddress || 'Property';
                              if (city && state) {
                                displayText += `, ${city}, ${state}`;
                              } else if (city) {
                                displayText += `, ${city}`;
                              } else if (state) {
                                displayText += `, ${state}`;
                              }
                              if (zipCode) {
                                displayText += ` ${zipCode}`;
                              }
                            }
                            
                            return (
                              <SelectItem key={`property-${property.id}`} value={property.id}>
                                {displayText}
                              </SelectItem>
                            );
                          });
                      })()}
                      <SelectItem value="Other">Other</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                  </div>
                </CardContent>
              </Card>
              
            </CardContent>
          </CollapsibleContent>
        </Collapsible>
      </Card>
    );
  };

  // AdditionalLoanCard component - using Current Loan 2 structure
  const AdditionalLoanCard = ({ 
    loanId,
    loanNumber,
    isOpen, 
    setIsOpen, 
    onRemove,
    onAddAdditionalLoan,
    onAutoCopyAddress,
    formInstance 
  }: {
    loanId: string;
    loanNumber: number;
    isOpen: boolean;
    setIsOpen: (open: boolean) => void;
    onRemove?: () => void;
    onAddAdditionalLoan?: () => void;
    onAutoCopyAddress?: () => void;
    formInstance?: any;
  }) => {
    const { toast } = useToast();
    const contextForm = useFormContext();
    const targetForm = formInstance || contextForm;
    const [isPropertyAddressOpen, setIsPropertyAddressOpen] = useState(false);
    
    const cardClassName = 'border-l-4 border-l-orange-500 hover:border-orange-500 focus-within:border-orange-500 transition-colors duration-200';
    
    return (
      <Card className={cardClassName}>
        <Collapsible open={isOpen} onOpenChange={setIsOpen}>
          <CardHeader>
            <div className="flex items-center justify-between">
              <CardTitle>{loanNumber === 3 ? 'Current Third Loan' : `Current Loan ${loanNumber}`}</CardTitle>
              <div className="flex items-center gap-2">
                {onRemove && (
                  <Button
                    type="button"
                    variant="outline"
                    size="sm"
                    onClick={onRemove}
                    className="hover:bg-red-500 hover:text-white"
                    data-testid={`button-remove-additional-loan-${loanId}`}
                    title="Delete"
                  >
                    <Minus className="h-4 w-4" />
                  </Button>
                )}
                <CollapsibleTrigger asChild>
                  <Button 
                    variant="ghost" 
                    size="sm" 
                    className="hover:bg-orange-500 hover:text-white" 
                    data-testid={`button-toggle-additional-loan-${loanId}`}
                    title={isOpen ? 'Minimize' : 'Expand'}
                  >
                    {isOpen ? <Minus className="h-4 w-4" /> : <Plus className="h-4 w-4" />}
                  </Button>
                </CollapsibleTrigger>
              </div>
            </div>
          </CardHeader>
          <CollapsibleContent>
            <CardContent className="space-y-4">
              {/* Row 1: Lender Name, Loan Number, Loan Category, Loan Program, Loan Duration */}
              <div className="grid grid-cols-1 md:grid-cols-5 gap-4">
                <div className="space-y-2">
                  <Label htmlFor={`${loanId}-lenderName`}>Lender Name</Label>
                  <Input
                    id={`${loanId}-lenderName`}
                    {...targetForm.register(`${loanId}.lenderName`)}
                    placeholder="Enter lender name"
                    data-testid={`input-${loanId}-lenderName`}
                  />
                </div>
                
                <div className="space-y-2">
                  <Label htmlFor={`${loanId}-loanNumber`}>Loan Number</Label>
                  <Input
                    id={`${loanId}-loanNumber`}
                    {...targetForm.register(`${loanId}.loanNumber`)}
                    placeholder="Enter loan number"
                    data-testid={`input-${loanId}-loanNumber`}
                  />
                </div>
                
                <div className="space-y-2">
                  <Label htmlFor={`${loanId}-loanCategory`}>Loan Category</Label>
                  <Select value={targetForm.watch(`${loanId}.loanCategory`) || ''} onValueChange={(value) => targetForm.setValue(`${loanId}.loanCategory`, value)}>
                    <SelectTrigger data-testid={`select-${loanId}-loanCategory`}>
                      <SelectValue placeholder="Select" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="select">Select</SelectItem>
                      <SelectItem value="heloc">HELOC</SelectItem>
                      <SelectItem value="fixed">FIXED</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                
                <div className="space-y-2">
                  <Label htmlFor={`${loanId}-loanProgram`}>Loan Term</Label>
                  <Select value={targetForm.watch(`${loanId}.loanProgram`) || ''} onValueChange={(value) => targetForm.setValue(`${loanId}.loanProgram`, value)}>
                    <SelectTrigger data-testid={`select-${loanId}-loanProgram`}>
                      <SelectValue placeholder="Select" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="select">Select</SelectItem>
                      <SelectItem value="heloc">HELOC</SelectItem>
                      <SelectItem value="fixed-second-loan">Fixed Second Loan</SelectItem>
                      <SelectItem value="adjustable-second-loan">Adjustable Second Loan</SelectItem>
                      <SelectItem value="home-improvement-loan">Home Improvement Loan</SelectItem>
                      <SelectItem value="other">Other</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                
                <div className="space-y-2">
                  <Label htmlFor={`${loanId}-loanDuration`}>Loan Duration</Label>
                  <Select value={targetForm.watch(`${loanId}.loanDuration`) || ''} onValueChange={(value) => targetForm.setValue(`${loanId}.loanDuration`, value)}>
                    <SelectTrigger data-testid={`select-${loanId}-loanDuration`}>
                      <SelectValue placeholder="Select" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="select">Select</SelectItem>
                      <SelectItem value="30-years">30 Years</SelectItem>
                      <SelectItem value="25-years">25 Years</SelectItem>
                      <SelectItem value="20-years">20 Years</SelectItem>
                      <SelectItem value="15-years">15 Years</SelectItem>
                      <SelectItem value="10-years">10 Years</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>
              
              {/* Row 2: Current Balance, Current Rate, Monthly Payment, Pre-Payment Penalty, Attached to Property */}
              <div className="grid grid-cols-1 md:grid-cols-5 gap-4">
                <div className="space-y-2">
                  <Label htmlFor={`${loanId}-currentBalance`}>Loan Balance</Label>
                  <div className="flex items-center border border-input bg-background px-3 rounded-md">
                    <span className="text-muted-foreground text-sm">$</span>
                    <Input
                      id={`${loanId}-currentBalance`}
                      {...targetForm.register(`${loanId}.currentBalance`)}
                      placeholder="0.00"
                      className="border-0 bg-transparent px-2 focus-visible:ring-0"
                      data-testid={`input-${loanId}-currentBalance`}
                    />
                  </div>
                </div>
                
                <div className="space-y-2">
                  <Label htmlFor={`${loanId}-currentRate`}>Interest Rate</Label>
                  <div className="flex items-center border border-input bg-background px-3 rounded-md">
                    <Input
                      id={`${loanId}-currentRate`}
                      {...targetForm.register(`${loanId}.currentRate`)}
                      placeholder="0.00"
                      className="border-0 bg-transparent px-2 focus-visible:ring-0"
                      data-testid={`input-${loanId}-currentRate`}
                    />
                    <span className="text-muted-foreground text-sm">%</span>
                  </div>
                </div>
                
                <div className="space-y-2">
                  <Label htmlFor={`${loanId}-monthlyPayment`}>Monthly Payment</Label>
                  <div className="flex items-center border border-input bg-background px-3 rounded-md">
                    <span className="text-muted-foreground text-sm">$</span>
                    <Input
                      id={`${loanId}-monthlyPayment`}
                      {...targetForm.register(`${loanId}.monthlyPayment`)}
                      placeholder="0.00"
                      className="border-0 bg-transparent px-2 focus-visible:ring-0"
                      data-testid={`input-${loanId}-monthlyPayment`}
                    />
                  </div>
                </div>
                
                <div className="space-y-2">
                  <Label htmlFor={`${loanId}-prepaymentPenalty`}>Pre-Payment Penalty</Label>
                  <Select value={targetForm.watch(`${loanId}.prepaymentPenalty`) || ''} onValueChange={(value: 'Yes - see notes' | 'No') => targetForm.setValue(`${loanId}.prepaymentPenalty`, value)}>
                    <SelectTrigger data-testid={`select-${loanId}-prepaymentPenalty`}>
                      <SelectValue placeholder="Select" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="No">No</SelectItem>
                      <SelectItem value="Yes - see notes">Yes - see notes</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                
                <div className="space-y-2">
                  <Label htmlFor={`${loanId}-attachedToProperty`}>Attached to Property</Label>
                  <Select value={targetForm.watch(`${loanId}.attachedToProperty`) || ''} onValueChange={(value) => {
                    targetForm.setValue(`${loanId}.attachedToProperty`, value as any);
                    if (value && value !== 'Other' && value !== 'select') {
                      setTimeout(() => onAutoCopyAddress?.(), 100);
                    } else if (value === 'Other' || value === 'select') {
                      // Clear address fields for Other or empty
                      targetForm.setValue(`${loanId}.propertyAddress.street`, '');
                      targetForm.setValue(`${loanId}.propertyAddress.unit`, '');
                      targetForm.setValue(`${loanId}.propertyAddress.city`, '');
                      targetForm.setValue(`${loanId}.propertyAddress.state`, '');
                      targetForm.setValue(`${loanId}.propertyAddress.zipCode`, '');
                      targetForm.setValue(`${loanId}.propertyAddress.county`, '');
                    }
                  }}>
                    <SelectTrigger data-testid={`select-${loanId}-attachedToProperty`}>
                      <SelectValue placeholder="Select" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="select">Select</SelectItem>
                      {(() => {
                        const properties = targetForm.watch('property.properties') || [];
                        return properties
                          .filter((property: any) => property.use !== 'home-purchase' && (property.address?.street || property.use === 'primary')) // Exclude Home Purchase, show existing properties only
                          .map((property: any, index: number) => {
                            const address = property.address;
                            const streetAddress = address?.street;
                            const city = address?.city;
                            const state = address?.state;
                            const zipCode = address?.zip;
                            
                            // Build display text using address components for uniqueness
                            let displayText;
                            
                            // Special handling for Primary Residence without address
                            if (property.use === 'primary' && !streetAddress) {
                              displayText = 'Primary Residence';
                            } else {
                              displayText = streetAddress || 'Property';
                              if (city && state) {
                                displayText += `, ${city}, ${state}`;
                              } else if (city) {
                                displayText += `, ${city}`;
                              } else if (state) {
                                displayText += `, ${state}`;
                              }
                              if (zipCode) {
                                displayText += ` ${zipCode}`;
                              }
                            }
                            
                            return (
                              <SelectItem key={`property-${property.id}`} value={property.id}>
                                {displayText}
                              </SelectItem>
                            );
                          });
                      })()}
                      <SelectItem value="Other">Other</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>
              
              
              {/* Conditional Property Address Fields - Show when Attached to Property is selected */}
              {targetForm.watch(`${loanId}.attachedToProperty`) && targetForm.watch(`${loanId}.attachedToProperty`) !== 'select' && (
                <div className="mt-4 p-4 border-t border-gray-200">
                  <Collapsible open={isPropertyAddressOpen} onOpenChange={setIsPropertyAddressOpen}>
                    <div className="flex items-center justify-between mb-3">
                      <Label className="text-sm font-medium text-gray-700">
                        Property Address ({(() => {
                          const attachedPropertyId = targetForm.watch(`${loanId}.attachedToProperty`);
                          if (attachedPropertyId === 'Other') return 'Other';
                          const properties = targetForm.watch('property.properties') || [];
                          const selectedProperty = properties.find((p: any) => p.id === attachedPropertyId);
                          return selectedProperty?.address?.street || attachedPropertyId;
                        })()})
                      </Label>
                      <CollapsibleTrigger asChild>
                        <Button
                          type="button"
                          variant="ghost"
                          size="sm"
                          className="hover:bg-orange-500 hover:text-white"
                          data-testid={`button-toggle-property-address-${loanId}`}
                        >
                          {isPropertyAddressOpen ? <Minus className="h-4 w-4" /> : <Plus className="h-4 w-4" />}
                        </Button>
                      </CollapsibleTrigger>
                    </div>
                    <CollapsibleContent>
                      <div className="grid grid-cols-1 md:grid-cols-12 gap-4">
                        <div className="space-y-2 md:col-span-3">
                          <Label htmlFor={`${loanId}-property-street`}>Street Address</Label>
                          <Input
                            id={`${loanId}-property-street`}
                            {...targetForm.register(`${loanId}.propertyAddress.street`)}
                            data-testid={`input-${loanId}-property-street`}
                            readOnly={targetForm.watch(`${loanId}.attachedToProperty`) !== 'Other'}
                            className={targetForm.watch(`${loanId}.attachedToProperty`) !== 'Other' ? 'bg-gray-50' : ''}
                            onClick={(e) => {
                              if (targetForm.watch(`${loanId}.attachedToProperty`) !== 'Other') {
                                e.preventDefault();
                                toast({
                              title: "Address is read-only",
                              description: "Please edit property address information using the Property tab",
                              variant: "default",
                            });
                              }
                            }}
                          />
                        </div>
                        
                        <div className="space-y-2 md:col-span-1">
                          <Label htmlFor={`${loanId}-property-unit`}>Unit/Apt</Label>
                          <Input
                            id={`${loanId}-property-unit`}
                            {...targetForm.register(`${loanId}.propertyAddress.unit`)}
                            data-testid={`input-${loanId}-property-unit`}
                            readOnly={targetForm.watch(`${loanId}.attachedToProperty`) !== 'Other'}
                            className={targetForm.watch(`${loanId}.attachedToProperty`) !== 'Other' ? 'bg-gray-50' : ''}
                            onClick={(e) => {
                              if (targetForm.watch(`${loanId}.attachedToProperty`) !== 'Other') {
                                e.preventDefault();
                                toast({
                              title: "Address is read-only",
                              description: "Please edit property address information using the Property tab",
                              variant: "default",
                            });
                              }
                            }}
                          />
                        </div>
                        
                        <div className="space-y-2 md:col-span-2">
                          <Label htmlFor={`${loanId}-property-city`}>City</Label>
                          <Input
                            id={`${loanId}-property-city`}
                            {...targetForm.register(`${loanId}.propertyAddress.city`)}
                            data-testid={`input-${loanId}-property-city`}
                            readOnly={targetForm.watch(`${loanId}.attachedToProperty`) !== 'Other'}
                            className={targetForm.watch(`${loanId}.attachedToProperty`) !== 'Other' ? 'bg-gray-50' : ''}
                            onClick={(e) => {
                              if (targetForm.watch(`${loanId}.attachedToProperty`) !== 'Other') {
                                e.preventDefault();
                                toast({
                              title: "Address is read-only",
                              description: "Please edit property address information using the Property tab",
                              variant: "default",
                            });
                              }
                            }}
                          />
                        </div>
                        
                        <div className="space-y-2 md:col-span-1">
                          <Label htmlFor={`${loanId}-property-state`}>State</Label>
                          <Select
                            value={targetForm.watch(`${loanId}.propertyAddress.state`) || ''}
                            onValueChange={(value) => targetForm.setValue(`${loanId}.propertyAddress.state`, value)}
                            disabled={targetForm.watch(`${loanId}.attachedToProperty`) !== 'Other'}
                          >
                            <SelectTrigger
                              data-testid={`select-${loanId}-property-state`}
                              className={targetForm.watch(`${loanId}.attachedToProperty`) !== 'Other' ? 'bg-gray-50' : ''}
                              onClick={(e) => {
                                if (targetForm.watch(`${loanId}.attachedToProperty`) !== 'Other') {
                                  e.preventDefault();
                                  toast({
                              title: "Address is read-only",
                              description: "Please edit property address information using the Property tab",
                              variant: "default",
                            });
                                }
                              }}
                            >
                              <SelectValue placeholder="State" />
                            </SelectTrigger>
                            <SelectContent>
                              {US_STATES.map(state => (
                                <SelectItem key={state.value} value={state.value}>
                                  {state.value}
                                </SelectItem>
                              ))}
                            </SelectContent>
                          </Select>
                        </div>
                        
                        <div className="space-y-2 md:col-span-1">
                          <Label htmlFor={`${loanId}-property-zipCode`}>ZIP Code</Label>
                          <Input
                            id={`${loanId}-property-zipCode`}
                            {...targetForm.register(`${loanId}.propertyAddress.zipCode`)}
                            data-testid={`input-${loanId}-property-zipCode`}
                            readOnly={targetForm.watch(`${loanId}.attachedToProperty`) !== 'Other'}
                            className={targetForm.watch(`${loanId}.attachedToProperty`) !== 'Other' ? 'bg-gray-50' : ''}
                            onClick={(e) => {
                              if (targetForm.watch(`${loanId}.attachedToProperty`) !== 'Other') {
                                e.preventDefault();
                                toast({
                              title: "Address is read-only",
                              description: "Please edit property address information using the Property tab",
                              variant: "default",
                            });
                              }
                            }}
                          />
                        </div>
                        
                        <div className="space-y-2 md:col-span-1">
                          <Label htmlFor={`${loanId}-property-county`}>County</Label>
                          <Input
                            id={`${loanId}-property-county`}
                            {...targetForm.register(`${loanId}.propertyAddress.county`)}
                            data-testid={`input-${loanId}-property-county`}
                            readOnly={targetForm.watch(`${loanId}.attachedToProperty`) !== 'Other'}
                            className={targetForm.watch(`${loanId}.attachedToProperty`) !== 'Other' ? 'bg-gray-50' : ''}
                            onClick={(e) => {
                              if (targetForm.watch(`${loanId}.attachedToProperty`) !== 'Other') {
                                e.preventDefault();
                                toast({
                              title: "Address is read-only",
                              description: "Please edit property address information using the Property tab",
                              variant: "default",
                            });
                              }
                            }}
                          />
                        </div>
                        
                        <div className="space-y-2 md:col-span-2">
                          <Label htmlFor={`${loanId}-property-type`}>Property Type</Label>
                          <Input
                            id={`${loanId}-property-type`}
                            {...targetForm.register(`${loanId}.propertyAddress.propertyType`)}
                            data-testid={`input-${loanId}-property-type`}
                            readOnly={targetForm.watch(`${loanId}.attachedToProperty`) !== 'Other'}
                            className={targetForm.watch(`${loanId}.attachedToProperty`) !== 'Other' ? 'bg-gray-50' : ''}
                            onClick={(e) => {
                              if (targetForm.watch(`${loanId}.attachedToProperty`) !== 'Other') {
                                e.preventDefault();
                                toast({
                              title: "Address is read-only",
                              description: "Please edit property address information using the Property tab",
                              variant: "default",
                            });
                              }
                            }}
                          />
                        </div>
                      </div>
                    </CollapsibleContent>
                  </Collapsible>
                </div>
              )}
              
              {/* Add Additional Loan Button - positioned at bottom right */}
              {onAddAdditionalLoan && (
                <div className="flex justify-end mt-4">
                  <Button 
                    type="button" 
                    variant="outline" 
                    size="sm" 
                    onClick={onAddAdditionalLoan}
                    className="hover:bg-orange-500 hover:text-white hover:border-orange-500 no-default-hover-elevate no-default-active-elevate"
                    data-testid={`button-add-additional-loan-${loanId}`}
                  >
                    <Plus className="h-4 w-4 mr-2" />
                    Additional Loan
                  </Button>
                </div>
              )}
              
            </CardContent>
          </CollapsibleContent>
        </Collapsible>
      </Card>
    );
  };

  // Read-only version of Current Loan card for Property Tab
  const ReadOnlyCurrentLoanCard = ({ 
    idPrefix = 'readonly-', 
    isOpen, 
    setIsOpen, 
    formInstance 
  }: {
    idPrefix?: string;
    isOpen: boolean;
    setIsOpen: (open: boolean) => void;
    formInstance?: any;
  }) => {
    const { toast } = useToast();
    const contextForm = useFormContext();
    const targetForm = formInstance || contextForm;
    
    // Watch all current loan values for display
    const currentLender = targetForm.watch('currentLoan.currentLender') || '';
    const loanNumber = targetForm.watch('currentLoan.loanNumber') || '';
    const loanStartDate = targetForm.watch('currentLoan.loanStartDate') || '';
    const remainingTerm = targetForm.watch('currentLoan.remainingTermPerCreditReport') || '';
    const loanCategory = targetForm.watch('currentLoan.loanCategory') || '';
    const loanProgram = targetForm.watch('currentLoan.loanProgram') || '';
    const loanTerm = targetForm.watch('currentLoan.loanTerm') || '';
    const statementBalance = targetForm.watch('currentLoan.statementBalance.amount') || '';
    const currentRate = targetForm.watch('currentLoan.currentRate') || '';
    const principalInterestPayment = targetForm.watch('currentLoan.principalAndInterestPayment') || '';
    const escrowPayment = targetForm.watch('currentLoan.escrowPayment') || '';
    const totalMonthlyPayment = targetForm.watch('currentLoan.totalMonthlyPayment') || '';
    
    // Click handler to show message
    const handleFieldClick = () => {
      toast({
        description: "Please enter or change data in the loan page"
      });
    };
    
    return (
      <Card>
        <Collapsible open={isOpen} onOpenChange={setIsOpen}>
          <CardHeader>
            <div className="flex items-center justify-between">
              <CardTitle>Current Loan 1 (Read-only)</CardTitle>
              <CollapsibleTrigger asChild>
                <Button 
                  variant="ghost" 
                  size="sm" 
                  data-testid={`button-toggle-readonly-current-loan-${idPrefix}`}
                  title={isOpen ? 'Minimize' : 'Expand'}
                >
                  {isOpen ? <Minus className="h-4 w-4" /> : <Plus className="h-4 w-4" />}
                </Button>
              </CollapsibleTrigger>
            </div>
          </CardHeader>
          <CollapsibleContent>
            <CardContent className="space-y-4">
              {/* Row 1: Current Lender, Loan Number, Loan Start Date, Remaining Term */}
              <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
                <div className="space-y-2">
                  <Label>Lender Name</Label>
                  <Input
                    value={currentLender}
                    readOnly
                    onClick={handleFieldClick}
                    className="bg-gray-50 cursor-pointer"
                    data-testid={`input-readonly-current-lender-${idPrefix}`}
                  />
                </div>
                
                <div className="space-y-2">
                  <Label>Loan Number</Label>
                  <Input
                    value={loanNumber}
                    readOnly
                    onClick={handleFieldClick}
                    className="bg-gray-50 cursor-pointer"
                    data-testid={`input-readonly-loan-number-${idPrefix}`}
                  />
                </div>
                
                <div className="space-y-2">
                  <Label>Loan Start Date</Label>
                  <Input
                    value={loanStartDate}
                    readOnly
                    onClick={handleFieldClick}
                    className="bg-gray-50 cursor-pointer"
                    data-testid={`input-readonly-loan-start-date-${idPrefix}`}
                  />
                </div>
                
                <div className="space-y-2">
                  <Label>Remaining Term Per Credit Report</Label>
                  <Input
                    value={remainingTerm}
                    readOnly
                    onClick={handleFieldClick}
                    className="bg-gray-50 cursor-pointer"
                    data-testid={`input-readonly-remaining-term-${idPrefix}`}
                  />
                </div>
              </div>
              
              {/* Row 2: Loan Category, Loan Program, Loan Term, Current Balance */}
              <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
                <div className="space-y-2">
                  <Label>Loan Category</Label>
                  <Input
                    value={loanCategory}
                    readOnly
                    onClick={handleFieldClick}
                    className="bg-gray-50 cursor-pointer"
                    data-testid={`input-readonly-loan-category-${idPrefix}`}
                  />
                </div>
                
                <div className="space-y-2">
                  <Label>Loan Program</Label>
                  <Input
                    value={loanProgram}
                    readOnly
                    onClick={handleFieldClick}
                    className="bg-gray-50 cursor-pointer"
                    data-testid={`input-readonly-loan-program-${idPrefix}`}
                  />
                </div>
                
                <div className="space-y-2">
                  <Label>Loan Duration</Label>
                  <Input
                    value={loanTerm}
                    readOnly
                    onClick={handleFieldClick}
                    className="bg-gray-50 cursor-pointer"
                    data-testid={`input-readonly-loan-term-${idPrefix}`}
                  />
                </div>
                
                <div className="space-y-2">
                  <Label>Current Balance</Label>
                  <Input
                    value={statementBalance}
                    readOnly
                    onClick={handleFieldClick}
                    className="bg-gray-50 cursor-pointer"
                    data-testid={`input-readonly-statement-balance-${idPrefix}`}
                  />
                </div>
              </div>
              
              {/* Row 3: Payment Details */}
              <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
                <div className="space-y-2">
                  <Label>Current Rate</Label>
                  <Input
                    value={currentRate ? `${currentRate}%` : ''}
                    readOnly
                    onClick={handleFieldClick}
                    className="bg-gray-50 cursor-pointer"
                    data-testid={`input-readonly-current-rate-${idPrefix}`}
                  />
                </div>
                
                <div className="space-y-2">
                  <Label>Principal & Interest Payment</Label>
                  <Input
                    value={principalInterestPayment}
                    readOnly
                    onClick={handleFieldClick}
                    className="bg-gray-50 cursor-pointer"
                    data-testid={`input-readonly-principal-interest-payment-${idPrefix}`}
                  />
                </div>
                
                <div className="space-y-2">
                  <Label>Escrow Payment</Label>
                  <Input
                    value={escrowPayment}
                    readOnly
                    onClick={handleFieldClick}
                    className="bg-gray-50 cursor-pointer"
                    data-testid={`input-readonly-escrow-payment-${idPrefix}`}
                  />
                </div>
                
                <div className="space-y-2">
                  <Label>Total Monthly Payment</Label>
                  <Input
                    value={totalMonthlyPayment}
                    readOnly
                    onClick={handleFieldClick}
                    className="bg-gray-50 cursor-pointer"
                    data-testid={`input-readonly-total-monthly-payment-${idPrefix}`}
                  />
                </div>
              </div>
            </CardContent>
          </CollapsibleContent>
        </Collapsible>
      </Card>
    );
  };


  // Pension management helper functions
  const generateUniqueId = (): string => {
    return `pension-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
  };

  const addBorrowerPension = () => {
    const currentPensions = form.watch('income.pensions') || [];
    const newPension = {
      id: generateUniqueId(),
      payerName: '',
      monthlyAmount: '',
    };
    form.setValue('income.pensions', [...currentPensions, newPension]);
  };

  const removeBorrowerPension = (pensionId: string) => {
    const currentPensions = form.watch('income.pensions') || [];
    const pension = currentPensions.find(p => p.id === pensionId);
    
    // Special handling for default pension card
    if (pension?.isDefault) {
      setConfirmRemovalDialog({
        isOpen: true,
        type: 'income',
        itemId: pensionId,
        itemType: 'default pension',
        onConfirm: () => {
          // Remove ALL pension cards and uncheck the pension checkbox
          form.setValue('income.pensions', []);
          // Uncheck pension checkbox when default card is removed
          form.setValue('income.incomeTypes.pension', false);
          setConfirmRemovalDialog({ isOpen: false, type: null });
        }
      });
    } else {
      // Normal removal for additional pension cards
      setConfirmRemovalDialog({
        isOpen: true,
        type: 'income',
        itemId: pensionId,
        itemType: 'pension',
        onConfirm: () => {
          const updatedPensions = currentPensions.filter(pension => pension.id !== pensionId);
          form.setValue('income.pensions', updatedPensions);
          setConfirmRemovalDialog({ isOpen: false, type: null });
        }
      });
    }
  };

  // Function to handle removal of default pension card from header
  const removeDefaultBorrowerPension = () => {
    const currentPensions = form.watch('income.pensions') || [];
    const hasDefaultCard = currentPensions.some(p => p.isDefault);
    
    if (hasDefaultCard) {
      setConfirmRemovalDialog({
        isOpen: true,
        type: 'income',
        itemType: 'default pension',
        onConfirm: () => {
          // Remove ALL pension cards and uncheck the pension checkbox
          form.setValue('income.pensions', []);
          // Uncheck pension checkbox when default card is removed
          form.setValue('income.incomeTypes.pension', false);
          setConfirmRemovalDialog({ isOpen: false, type: null });
        }
      });
    }
  };

  const addCoBorrowerPension = () => {
    const currentPensions = form.watch('coBorrowerIncome.pensions') || [];
    const newPension = {
      id: generateUniqueId(),
      payerName: '',
      monthlyAmount: '',
    };
    form.setValue('coBorrowerIncome.pensions', [...currentPensions, newPension]);
  };

  const removeCoBorrowerPension = (pensionId: string) => {
    const currentPensions = form.watch('coBorrowerIncome.pensions') || [];
    const pension = currentPensions.find(p => p.id === pensionId);
    
    // Special handling for default pension card
    if (pension?.isDefault) {
      setConfirmRemovalDialog({
        isOpen: true,
        type: 'income',
        itemId: pensionId,
        itemType: 'default co-borrower pension',
        onConfirm: () => {
          // Remove ALL co-borrower pension cards and uncheck the pension checkbox
          form.setValue('coBorrowerIncome.pensions', []);
          // Uncheck pension checkbox when default card is removed
          form.setValue('coBorrowerIncome.incomeTypes.pension', false);
          setConfirmRemovalDialog({ isOpen: false, type: null });
        }
      });
    } else {
      // Normal removal for additional pension cards
      setConfirmRemovalDialog({
        isOpen: true,
        type: 'income',
        itemId: pensionId,
        itemType: 'co-borrower pension',
        onConfirm: () => {
          const updatedPensions = currentPensions.filter(pension => pension.id !== pensionId);
          form.setValue('coBorrowerIncome.pensions', updatedPensions);
          setConfirmRemovalDialog({ isOpen: false, type: null });
        }
      });
    }
  };

  // Function to handle removal of default co-borrower pension card from header
  const removeDefaultCoBorrowerPension = () => {
    const currentPensions = form.watch('coBorrowerIncome.pensions') || [];
    const hasDefaultCard = currentPensions.some(p => p.isDefault);
    
    if (hasDefaultCard) {
      setConfirmRemovalDialog({
        isOpen: true,
        type: 'income',
        itemType: 'default co-borrower pension',
        onConfirm: () => {
          // Remove ALL co-borrower pension cards and uncheck the pension checkbox
          form.setValue('coBorrowerIncome.pensions', []);
          // Uncheck pension checkbox when default card is removed
          form.setValue('coBorrowerIncome.incomeTypes.pension', false);
          setConfirmRemovalDialog({ isOpen: false, type: null });
        }
      });
    }
  };

  // Property valuation handlers
  const openValuationDialog = (service: 'zillow' | 'redfin' | 'realtor', propertyIndex: number) => {
    const currentValue = form.watch(`property.properties.${propertyIndex}.valuations.${service}`) || '';
    setValuationInput(currentValue);
    setValuationDialog({
      isOpen: true,
      service,
      propertyIndex,
      currentValue
    });
  };

  const closeValuationDialog = () => {
    setValuationDialog({ isOpen: false, service: null, propertyIndex: null, currentValue: '' });
    setValuationInput('');
  };

  const saveValuation = () => {
    if (valuationDialog.propertyIndex !== null && valuationDialog.service) {
      form.setValue(`property.properties.${valuationDialog.propertyIndex}.valuations.${valuationDialog.service}`, valuationInput);
      closeValuationDialog();
    }
  };

  const saveAndApplyValuation = () => {
    if (valuationDialog.propertyIndex !== null && valuationDialog.service) {
      form.setValue(`property.properties.${valuationDialog.propertyIndex}.valuations.${valuationDialog.service}`, valuationInput);
      form.setValue(`property.properties.${valuationDialog.propertyIndex}.estimatedValue`, valuationInput);
      closeValuationDialog();
    }
  };

  // Business description popup handlers
  const openBusinessDescriptionDialog = (cardId: string) => {
    const currentValue = form.getValues('income.businessDescription') || '';
    setBusinessDescriptionInput(currentValue);
    setBusinessDescriptionDialog({
      isOpen: true,
      cardId,
      currentValue,
      type: 'borrower'
    });
  };

  const closeBusinessDescriptionDialog = () => {
    setBusinessDescriptionDialog({ isOpen: false, cardId: null, currentValue: '', type: 'borrower' });
    setBusinessDescriptionInput('');
  };

  const saveBusinessDescription = () => {
    if (businessDescriptionDialog.cardId) {
      form.setValue('income.businessDescription', businessDescriptionInput, { shouldDirty: true });
      closeBusinessDescriptionDialog();
    }
  };

  // Co-borrower Business description popup handlers
  const openCoBorrowerBusinessDescriptionDialog = (cardId: string) => {
    const currentValue = form.getValues('coBorrowerIncome.businessDescription') || '';
    setBusinessDescriptionInput(currentValue);
    setBusinessDescriptionDialog({
      isOpen: true,
      cardId,
      currentValue,
      type: 'co-borrower'
    });
  };

  const saveCoBorrowerBusinessDescription = () => {
    if (businessDescriptionDialog.cardId) {
      form.setValue('coBorrowerIncome.businessDescription', businessDescriptionInput, { shouldDirty: true });
      closeBusinessDescriptionDialog();
    }
  };

  // Tax preparer popup handlers
  const openTaxPreparerDialog = (cardId: string) => {
    const currentValue = form.getValues('income.taxesPreparedBy') || '';
    setTaxPreparerInput(currentValue);
    setTaxPreparerDialog({
      isOpen: true,
      cardId,
      currentValue,
      type: 'borrower'
    });
  };

  const closeTaxPreparerDialog = () => {
    setTaxPreparerDialog({ isOpen: false, cardId: null, currentValue: '', type: 'borrower' });
    setTaxPreparerInput('');
  };

  const saveTaxPreparer = () => {
    if (taxPreparerDialog.cardId) {
      // Clear the value if "Select" is chosen, otherwise save the value
      const valueToSave = taxPreparerInput === 'Select' ? '' : taxPreparerInput;
      form.setValue('income.taxesPreparedBy', valueToSave, { shouldDirty: true });
      closeTaxPreparerDialog();
    }
  };

  // Co-borrower Tax preparer popup handlers
  const openCoBorrowerTaxPreparerDialog = (cardId: string) => {
    const currentValue = form.getValues('coBorrowerIncome.taxesPreparedBy') || '';
    setTaxPreparerInput(currentValue);
    setTaxPreparerDialog({
      isOpen: true,
      cardId,
      currentValue,
      type: 'co-borrower'
    });
  };

  const saveCoBorrowerTaxPreparer = () => {
    if (taxPreparerDialog.cardId) {
      // Clear the value if "Select" is chosen, otherwise save the value
      const valueToSave = taxPreparerInput === 'Select' ? '' : taxPreparerInput;
      form.setValue('coBorrowerIncome.taxesPreparedBy', valueToSave, { shouldDirty: true });
      closeTaxPreparerDialog();
    }
  };

  // Property valuation hover handlers
  const handleValuationHover = (service: 'zillow' | 'redfin' | 'realtor', propertyIndex: number, event: React.MouseEvent) => {
    const savedValue = form.watch(`property.properties.${propertyIndex}.valuations.${service}`) || '';
    const rect = event.currentTarget.getBoundingClientRect();
    // Position tooltip higher above the icon with increased distance for better spacing
    const tooltipHeight = 120;
    const extraSpacing = 50; // Additional spacing to move tooltip higher
    setValuationHover({
      isVisible: true,
      service,
      propertyIndex,
      value: savedValue,
      position: { 
        x: rect.left + window.scrollX, 
        y: rect.top + window.scrollY - tooltipHeight - extraSpacing 
      }
    });
  };

  const handleValuationHoverLeave = () => {
    setValuationHover({ isVisible: false, service: null, propertyIndex: null, value: '', position: { x: 0, y: 0 } });
  };

  // Open valuation summary dialog
  const openValuationSummary = (propertyIndex: number) => {
    setValuationSummaryDialog({ isOpen: true, propertyIndex });
  };

  const closeValuationSummary = () => {
    setValuationSummaryDialog({ isOpen: false, propertyIndex: null });
  };

  
  
  

  // Property management helper functions
  const addProperty = (use: 'primary' | 'second-home' | 'investment' | 'home-purchase') => {
    const currentProperties = form.watch('property.properties') || [];
    const newProperty = {
      id: nanoid(),
      use,
      isSubject: false,
      address: {},
      propertyType: '',
      estimatedValue: '',
      valuations: {
        zillow: '',
        redfin: '',
        realtor: '',
      },
      appraisedValue: '',
      ownedSince: '',
      purchasePrice: '',
      loan: {
        lenderName: '',
        loanNumber: '',
        mortgageBalance: '',
        piPayment: '',
        escrowPayment: '',
        totalMonthlyPayment: '',
      },
      activeSecondLoan: '',
      secondLoan: {
        lenderName: '',
        loanNumber: '',
        mortgageBalance: '',
        piPayment: '',
        escrowPayment: '',
        totalMonthlyPayment: '',
      },
    };
    form.setValue('property.properties', [...currentProperties, newProperty]);
    // Set initial collapsible state for new property - expand all property types by default
    setPropertyCardStates(prev => ({ ...prev, [newProperty.id!]: true }));
  };

  const removeProperty = (propertyId: string) => {
    setConfirmRemovalDialog({
      isOpen: true,
      type: 'property',
      itemId: propertyId,
      onConfirm: () => {
        const currentProperties = form.watch('property.properties') || [];
        const updatedProperties = currentProperties.filter(property => property.id !== propertyId);
        form.setValue('property.properties', updatedProperties);
        
        // Remove collapsible state for removed property
        setPropertyCardStates(prev => {
          const { [propertyId]: _, ...rest } = prev;
          return rest;
        });
        setConfirmRemovalDialog({ isOpen: false, type: null });
      }
    });
  };

  const setSubjectProperty = (propertyId: string) => {
    const currentProperties = form.watch('property.properties') || [];
    
    // Check if another property is already selected as subject
    const currentSubjectProperty = currentProperties.find(property => property.isSubject === true);
    
    if (currentSubjectProperty && currentSubjectProperty.id !== propertyId) {
      // Show confirmation dialog
      setSubjectConfirmDialog({
        isOpen: true,
        newSubjectPropertyId: propertyId
      });
      return;
    }
    
    // No existing subject property or same property selected, proceed with change
    const updatedProperties = currentProperties.map(property => ({
      ...property,
      isSubject: property.id === propertyId,
    }));
    form.setValue('property.properties', updatedProperties);
  };

  // Handle subject property confirmation
  const handleSubjectPropertyConfirmation = (confirmed: boolean) => {
    if (confirmed && subjectConfirmDialog.newSubjectPropertyId) {
      const currentProperties = form.watch('property.properties') || [];
      const updatedProperties = currentProperties.map(property => ({
        ...property,
        isSubject: property.id === subjectConfirmDialog.newSubjectPropertyId,
      }));
      form.setValue('property.properties', updatedProperties);
    }
    
    // Close dialog
    setSubjectConfirmDialog({ isOpen: false, newSubjectPropertyId: null });
  };

  // Handle property usage change request
  const requestPropertyUsageChange = (propertyId: string, newUsage: 'primary' | 'second-home' | 'investment') => {
    const currentProperties = form.watch('property.properties') || [];
    const property = currentProperties.find(p => p.id === propertyId);
    
    if (!property || property.use === newUsage) return;
    
    // Check if changing to primary residence and one already exists
    if (newUsage === 'primary') {
      const hasExistingPrimary = currentProperties.some(p => p.use === 'primary' && p.id !== propertyId);
      if (hasExistingPrimary) {
        alert('You can only have one Primary Residence property.');
        return;
      }
    }
    
    setPropertyUsageChangeDialog({
      isOpen: true,
      propertyId,
      newUsage
    });
  };

  // Handle property usage change confirmation
  const handlePropertyUsageChangeConfirmation = (confirmed: boolean) => {
    if (confirmed && propertyUsageChangeDialog.propertyId && propertyUsageChangeDialog.newUsage) {
      const currentProperties = form.watch('property.properties') || [];
      const updatedProperties = currentProperties.map(property => 
        property.id === propertyUsageChangeDialog.propertyId 
          ? { ...property, use: propertyUsageChangeDialog.newUsage }
          : property
      );
      form.setValue('property.properties', updatedProperties);
    }
    
    // Close dialog
    setPropertyUsageChangeDialog({ isOpen: false, propertyId: undefined, newUsage: undefined });
  };

  // Helper function to handle property type changes with card management (similar to handleIncomeTypeChange)
  const handlePropertyTypeChange = (checked: boolean, type: 'primary' | 'second-home' | 'investment' | 'home-purchase') => {
    if (!checked) {
      // Special handling for primary residence and second home - don't allow unchecking if cards already exist
      if (type === 'primary') {
        const hasCards = (primaryResidenceCards || []).length > 0;
        
        if (hasCards) {
          // Cards already exist, prevent unchecking - all removal must be done through card buttons
          return;
        }
      } else if (type === 'second-home') {
        const hasCards = (secondHomeCards || []).length > 0;
        
        if (hasCards) {
          // Cards already exist, prevent unchecking - all removal must be done through card buttons
          return;
        }
      } else if (type === 'investment') {
        const hasCards = (investmentCards || []).length > 0;
        
        if (hasCards) {
          // Cards already exist, prevent unchecking - all removal must be done through card buttons
          return;
        }
      } else if (type === 'home-purchase') {
        const currentProperties = form.watch('property.properties') || [];
        const hasHomePurchaseCards = currentProperties.some(p => p.use === 'home-purchase');
        
        if (hasHomePurchaseCards) {
          // Cards already exist, prevent unchecking - all removal must be done through card buttons
          return;
        }
      }
      
      // For now, still allow unchecking other property types through the old system
      removePropertyType(type);
    } else {
      // When checking, auto-create default property card
      if (type === 'primary') {
        const hasCards = (primaryResidenceCards || []).length > 0;
        
        // Only create default property card if none exist yet
        if (!hasCards) {
          // Create entry in main form's property array
          addProperty('primary');
          
          // Get the ID of the newly created property
          setTimeout(() => {
            const currentProperties = form.watch('property.properties') || [];
            const newProperty = currentProperties.find(p => p.use === 'primary');
            const newPropertyId = newProperty?.id;
            
            if (newPropertyId) {
              setPrimaryResidenceCards([newPropertyId]);
              
              // Initialize data state for default card
              setPrimaryResidenceData(prev => ({ 
                ...prev, 
                [newPropertyId]: { isSubjectProperty: null } 
              }));
              
              // Auto-expand the property card
              setPropertyCardStates(prev => ({ ...prev, [newPropertyId]: true }));
              
              // Trigger animation for newly created property card
              setTimeout(() => {
                setShowSubjectPropertyAnimation(prev => ({ ...prev, [newPropertyId]: true }));
                setTimeout(() => {
                  setShowSubjectPropertyAnimation(prev => ({ ...prev, [newPropertyId]: false }));
                }, 800);
              }, 200);
            }
          }, 50); // Small delay to ensure form state is updated
        }
      } else if (type === 'second-home') {
        const hasCards = (secondHomeCards || []).length > 0;
        
        // Only create default property card if none exist yet
        if (!hasCards) {
          // Create entry in main form's property array
          addProperty('second-home');
          
          // Get the ID of the newly created property
          setTimeout(() => {
            const currentProperties = form.watch('property.properties') || [];
            const newProperty = currentProperties.find(p => p.use === 'second-home');
            const newPropertyId = newProperty?.id;
            
            if (newPropertyId) {
              setSecondHomeCards([newPropertyId]);
              
              // Initialize data state for default card
              setSecondHomeData(prev => ({ 
                ...prev, 
                [newPropertyId]: { isSubjectProperty: null } 
              }));
              
              // Auto-expand the property card
              setPropertyCardStates(prev => ({ ...prev, [newPropertyId]: true }));
              
              // Trigger animation for newly created property card
              setTimeout(() => {
                setShowSubjectPropertyAnimation(prev => ({ ...prev, [newPropertyId]: true }));
                setTimeout(() => {
                  setShowSubjectPropertyAnimation(prev => ({ ...prev, [newPropertyId]: false }));
                }, 800);
              }, 200);
            }
          }, 50); // Small delay to ensure form state is updated
        }
      } else if (type === 'investment') {
        const hasCards = (investmentCards || []).length > 0;
        
        // Only create default property card if none exist yet
        if (!hasCards) {
          // Create entry in main form's property array
          addProperty('investment');
          
          // Get the ID of the newly created property
          setTimeout(() => {
            const currentProperties = form.watch('property.properties') || [];
            const newProperty = currentProperties.find(p => p.use === 'investment');
            const newPropertyId = newProperty?.id;
            
            if (newPropertyId) {
              setInvestmentCards([newPropertyId]);
              
              // Initialize data state for default card
              setInvestmentData(prev => ({ 
                ...prev, 
                [newPropertyId]: { isSubjectProperty: null } 
              }));
              
              // Auto-expand the property card
              setPropertyCardStates(prev => ({ ...prev, [newPropertyId]: true }));
              
              // Trigger animation for newly created property card
              setTimeout(() => {
                setShowSubjectPropertyAnimation(prev => ({ ...prev, [newPropertyId]: true }));
                setTimeout(() => {
                  setShowSubjectPropertyAnimation(prev => ({ ...prev, [newPropertyId]: false }));
                }, 800);
              }, 200);
            }
          }, 50); // Small delay to ensure form state is updated
        }
      } else if (type === 'home-purchase') {
        // Check if home-purchase cards already exist
        const currentProperties = form.watch('property.properties') || [];
        const hasHomePurchaseCards = currentProperties.some(p => p.use === 'home-purchase');
        
        // Only create default property card if none exist yet
        if (!hasHomePurchaseCards) {
          // Create entry in main form's property array
          addProperty('home-purchase');
          
          // Get the ID of the newly created property
          setTimeout(() => {
            const currentProperties = form.watch('property.properties') || [];
            const newProperty = currentProperties.find(p => p.use === 'home-purchase');
            const newPropertyId = newProperty?.id;
            
            if (newPropertyId) {
              // Auto-expand the property card
              setPropertyCardStates(prev => ({ ...prev, [newPropertyId]: true }));
              
              // Trigger animation for newly created property card
              setTimeout(() => {
                setShowSubjectPropertyAnimation(prev => ({ ...prev, [newPropertyId]: true }));
                setTimeout(() => {
                  setShowSubjectPropertyAnimation(prev => ({ ...prev, [newPropertyId]: false }));
                }, 800);
              }, 200);
            }
          }, 50); // Small delay to ensure form state is updated
        }
      } else {
        // For other property types, use the old system for now
        addPropertyType(type);
      }
    }
  };

  // Helper function to handle Current Primary Loan type changes with card management (similar to handlePropertyTypeChange)
  const handleCurrentPrimaryLoanTypeChange = (checked: boolean) => {
    if (!checked) {
      // Special handling for Current Primary Loan - don't allow unchecking if cards already exist
      const hasCards = (currentPrimaryLoanCards || []).length > 0;
      
      if (hasCards) {
        // Cards already exist, prevent unchecking - all removal must be done through card buttons
        return;
      }
    } else {
      // When checking, auto-create default loan card
      const hasCards = (currentPrimaryLoanCards || []).length > 0;
      
      // Only create default loan card if none exist yet
      if (!hasCards) {
        // Generate a unique ID for the new loan card
        const newLoanId = `current-primary-loan-${Date.now()}`;
        
        // Set the loan cards state
        setCurrentPrimaryLoanCards([newLoanId]);
        
        // Initialize data state for default card
        setCurrentPrimaryLoanData(prev => ({ 
          ...prev, 
          [newLoanId]: { isDefaultCard: true } 
        }));
        
        // Initialize per-card collapsible state (auto-expand like Property cards)
        setCurrentLoanCardStates(prev => ({ ...prev, [newLoanId]: true }));
        
        // Auto-expand the loan card
        setShowCurrentLoan(true);
        
        // Auto-attach to subject property if one exists
        const properties = form.watch('property.properties') || [];
        const subjectProperty = properties.find(p => p.isSubject);
        if (subjectProperty?.id) {
          form.setValue('currentLoan.attachedToProperty', subjectProperty.id);
        }
        
        // Trigger animation for newly created loan card grey box
        setTimeout(() => {
          setShowCurrentLoanCardAnimation(prev => ({ ...prev, 'card-0-': true }));
          setTimeout(() => {
            setShowCurrentLoanCardAnimation(prev => ({ ...prev, 'card-0-': false }));
          }, 800);
        }, 200);
      }
    }
  };

  // Handle removing current primary loan cards (new system)
  const removeCurrentPrimaryLoanCard = (cardId: string) => {
    // Remove the specific card from cards array
    setCurrentPrimaryLoanCards(prev => prev.filter(id => id !== cardId));
    
    // Remove data state for this card
    setCurrentPrimaryLoanData(prev => {
      const { [cardId]: _, ...rest } = prev;
      return rest;
    });
    
    // Remove per-card collapsible state
    setCurrentLoanCardStates(prev => {
      const { [cardId]: _, ...rest } = prev;
      return rest;
    });
    
    // If no cards remain, hide the current loan section
    const remainingCards = currentPrimaryLoanCards.filter(id => id !== cardId);
    if (remainingCards.length === 0) {
      setShowCurrentLoan(false);
    }
    
    // Close the dialog
    setDeleteCurrentPrimaryLoanDialog({ isOpen: false, cardId: '' });
  };

  // Helper function to handle Current Second Loan type changes with card management (similar to Current Primary Loan)
  const handleCurrentSecondLoanTypeChange = (checked: boolean) => {
    if (!checked) {
      // Special handling for Current Second Loan - don't allow unchecking if cards already exist
      const hasCards = (currentSecondLoanCards || []).length > 0;
      
      if (hasCards) {
        // Cards already exist, prevent unchecking - all removal must be done through card buttons
        return;
      }
    } else {
      // When checking, auto-create default loan card
      const hasCards = (currentSecondLoanCards || []).length > 0;
      
      // Only create default loan card if none exist yet
      if (!hasCards) {
        // Generate a unique ID for the default loan card
        const newLoanId = `current-second-loan-${Date.now()}`;
        
        // Add to cards array
        setCurrentSecondLoanCards(prev => [...(prev || []), newLoanId]);
        
        // Initialize data state for new card  
        setCurrentSecondLoanData(prev => ({ 
          ...prev, 
          [newLoanId]: { isDefaultCard: true } 
        }));
        
        // Initialize per-card collapsible state (auto-expand like Property cards)
        setSecondLoanCardStates(prev => ({ ...prev, [newLoanId]: true }));
        
        // Auto-expand the loan card
        setShowSecondLoan(true);
        
        // Auto-attach to subject property if one exists
        const properties = form.watch('property.properties') || [];
        const subjectProperty = properties.find(p => p.isSubject);
        if (subjectProperty?.id) {
          form.setValue('secondLoan.attachedToProperty', subjectProperty.id);
        }
        
        // Trigger animation for newly created loan card (copied from Primary Loan)
        setTimeout(() => {
          setShowSecondLoanCardAnimation(prev => ({ ...prev, 'second-card-0-': true }));
          setTimeout(() => {
            setShowSecondLoanCardAnimation(prev => ({ ...prev, 'second-card-0-': false }));
          }, 800);
        }, 200);
      }
    }
  };

  // Handle removing current second loan cards (new system)
  const removeCurrentSecondLoanCard = (cardId: string) => {
    // Remove the specific card from cards array
    setCurrentSecondLoanCards(prev => prev.filter(id => id !== cardId));
    
    // Remove data state for this card
    setCurrentSecondLoanData(prev => {
      const { [cardId]: _, ...rest } = prev;
      return rest;
    });
    
    // Remove per-card collapsible state
    setSecondLoanCardStates(prev => {
      const { [cardId]: _, ...rest } = prev;
      return rest;
    });
    
    // If no cards remain, hide the second loan section
    const remainingCards = currentSecondLoanCards.filter(id => id !== cardId);
    if (remainingCards.length === 0) {
      setShowSecondLoan(false);
    }
    
    // Close the dialog
    setDeleteCurrentSecondLoanDialog({ isOpen: false, cardId: '' });
  };

  // Helper function to handle Current Third Loan type changes with card management (similar to Current Primary and Second Loan)
  const handleCurrentThirdLoanTypeChange = (checked: boolean) => {
    if (!checked) {
      // Special handling for Current Third Loan - don't allow unchecking if cards already exist
      const hasCards = (currentThirdLoanCards || []).length > 0;
      
      if (hasCards) {
        // Cards already exist, prevent unchecking - all removal must be done through card buttons
        return;
      }
    } else {
      // When checking, auto-create default loan card
      const hasCards = (currentThirdLoanCards || []).length > 0;
      
      // Only create default loan card if none exist yet
      if (!hasCards) {
        // Generate a unique ID for the default loan card
        const newLoanId = `current-third-loan-${Date.now()}`;
        
        // Add to cards array
        setCurrentThirdLoanCards(prev => [...(prev || []), newLoanId]);
        
        // Initialize data state for new card  
        setCurrentThirdLoanData(prev => ({ 
          ...prev, 
          [newLoanId]: { isDefaultCard: true } 
        }));
        
        // Initialize per-card collapsible state (auto-expand like Property cards)
        setThirdLoanCardStates(prev => ({ ...prev, [newLoanId]: true }));
        
        // Auto-expand the loan card
        setShowThirdLoan(true);
        
        // Auto-attach to subject property if one exists
        const properties = form.watch('property.properties') || [];
        const subjectProperty = properties.find(p => p.isSubject);
        if (subjectProperty?.id) {
          form.setValue('thirdLoan.attachedToProperty', subjectProperty.id);
        }
        
        // Trigger animation for newly created loan card (copied from Primary Loan)
        setTimeout(() => {
          setShowThirdLoanCardAnimation(prev => ({ ...prev, 'third-card-0-': true }));
          setTimeout(() => {
            setShowThirdLoanCardAnimation(prev => ({ ...prev, 'third-card-0-': false }));
          }, 800);
        }, 200);
      }
    }
  };

  // Handle removing current third loan cards (new system)
  const removeCurrentThirdLoanCard = (cardId: string) => {
    // Remove the specific card from cards array
    setCurrentThirdLoanCards(prev => prev.filter(id => id !== cardId));
    
    // Remove data state for this card
    setCurrentThirdLoanData(prev => {
      const { [cardId]: _, ...rest } = prev;
      return rest;
    });
    
    // Remove per-card collapsible state
    setThirdLoanCardStates(prev => {
      const { [cardId]: _, ...rest } = prev;
      return rest;
    });
    
    // If no cards remain, hide the third loan section
    const remainingCards = currentThirdLoanCards.filter(id => id !== cardId);
    if (remainingCards.length === 0) {
      setShowThirdLoan(false);
    }
    
    // Close the dialog
    setDeleteCurrentThirdLoanDialog({ isOpen: false, cardId: '' });
  };

  // Handle removing New Refinance Loan cards (like removeCurrentPrimaryLoanCard)
  const removeNewRefinanceLoanCard = (cardId: string) => {
    // Remove the specific card from cards array
    setNewRefinanceLoanCards(prev => prev.filter(id => id !== cardId));
    
    // Remove per-card collapsible state
    setNewRefinanceLoanCardStates(prev => {
      const { [cardId]: _, ...rest } = prev;
      return rest;
    });
    
    // Clear form data for this card
    form.setValue("abc", {});
    
    // Close the dialog
    setDeleteAbcDialog({ isOpen: false });
  };

  // Handle removing New Purchase Loan cards (like removeCurrentPrimaryLoanCard)
  const removeNewPurchaseLoanCard = (cardId: string) => {
    // Remove the specific card from cards array
    setNewPurchaseLoanCards(prev => prev.filter(id => id !== cardId));
    
    // Remove per-card collapsible state
    setNewPurchaseLoanCardStates(prev => {
      const { [cardId]: _, ...rest } = prev;
      return rest;
    });
    
    // Clear form data for this card
    form.setValue("bbb", {});
    
    // Close the dialog
    setDeleteBbbDialog({ isOpen: false });
  };

  // Helper function to handle New Refinance Loan checkbox changes (array-based like Existing Primary Loan)
  const handleNewRefinanceLoanTypeChange = (checked: boolean) => {
    if (!checked) {
      // Don't allow unchecking if cards already exist - removal must be done through card Remove button
      const hasCards = (newRefinanceLoanCards || []).length > 0;
      if (hasCards) {
        return;
      }
    } else {
      // Check if New Purchase Loan card is already open
      const hasPurchaseCards = (newPurchaseLoanCards || []).length > 0;
      if (hasPurchaseCards) {
        // Show conflict warning dialog
        setNewLoanConflictDialog(true);
        return;
      }
      
      // When checking, auto-create default card
      const hasCards = (newRefinanceLoanCards || []).length > 0;
      
      // Only create default card if none exist yet
      if (!hasCards) {
        // Generate a unique ID for the new card
        const newCardId = `new-refinance-loan-${Date.now()}`;
        
        // Add to cards array
        setNewRefinanceLoanCards([newCardId]);
        
        // Initialize per-card collapsible state (auto-expand)
        setNewRefinanceLoanCardStates({ [newCardId]: true });
        
        // Trigger animation for newly created card grey box
        setTimeout(() => {
          const animationKey = 'refinance-card-0-';
          setShowNewRefinanceLoanCardAnimation(prev => ({ ...prev, [animationKey]: true }));
          setTimeout(() => {
            setShowNewRefinanceLoanCardAnimation(prev => ({ ...prev, [animationKey]: false }));
          }, 800);
        }, 200);
      }
    }
  };

  // Helper function to handle New Purchase Loan checkbox changes (array-based like Existing Primary Loan)
  const handleNewPurchaseLoanTypeChange = (checked: boolean) => {
    if (!checked) {
      // Don't allow unchecking if cards already exist - removal must be done through card Remove button
      const hasCards = (newPurchaseLoanCards || []).length > 0;
      if (hasCards) {
        return;
      }
    } else {
      // Check if New Refinance Loan card is already open
      const hasRefinanceCards = (newRefinanceLoanCards || []).length > 0;
      if (hasRefinanceCards) {
        // Show conflict warning dialog
        setNewLoanConflictDialog(true);
        return;
      }
      
      // When checking, auto-create default card
      const hasCards = (newPurchaseLoanCards || []).length > 0;
      
      // Only create default card if none exist yet
      if (!hasCards) {
        // Generate a unique ID for the new card
        const newCardId = `new-purchase-loan-${Date.now()}`;
        
        // Add to cards array
        setNewPurchaseLoanCards([newCardId]);
        
        // Initialize per-card collapsible state (auto-expand)
        setNewPurchaseLoanCardStates({ [newCardId]: true });
        
        // Trigger animation for newly created card grey box
        setTimeout(() => {
          const animationKey = 'purchase-card-0-';
          setShowNewPurchaseLoanCardAnimation(prev => ({ ...prev, [animationKey]: true }));
          setTimeout(() => {
            setShowNewPurchaseLoanCardAnimation(prev => ({ ...prev, [animationKey]: false }));
          }, 800);
        }, 200);
      }
    }
  };


  // Property type management functions
  const addPropertyType = (type: 'primary' | 'second-home' | 'investment' | 'home-purchase') => {
    const currentProperties = form.watch('property.properties') || [];
    
    // For primary residence, ensure only one exists
    if (type === 'primary') {
      const hasExistingPrimary = currentProperties.some(p => p.use === 'primary');
      if (hasExistingPrimary) return;
    }
    
    addProperty(type);
    
    // Trigger subject property box animation for all property types
    setTimeout(() => {
      const currentProperties = form.watch('property.properties') || [];
      const newProperty = currentProperties.find(p => p.use === type);
      if (newProperty?.id) {
        setShowSubjectPropertyAnimation(prev => ({ ...prev, [newProperty.id!]: true }));
        // Reset animation after it completes
        setTimeout(() => {
          setShowSubjectPropertyAnimation(prev => ({ ...prev, [newProperty.id!]: false }));
        }, 800);
      }
    }, 200); // Small delay to ensure card is expanded first
    
    // Auto-copy address data when primary residence is selected
    if (type === 'primary') {
      setTimeout(() => {
        const borrowerAddress = form.getValues('borrower.residenceAddress');
        if (borrowerAddress && (borrowerAddress.street || borrowerAddress.city || borrowerAddress.state)) {
          const updatedProperties = form.watch('property.properties') || [];
          const primaryPropertyIndex = updatedProperties.findIndex(p => p.use === 'primary');
          
          if (primaryPropertyIndex >= 0) {
            form.setValue(`property.properties.${primaryPropertyIndex}.address`, {
              street: borrowerAddress.street || '',
              unit: borrowerAddress.unit || '',
              city: borrowerAddress.city || '',
              state: borrowerAddress.state || '',
              zip: borrowerAddress.zip || '',
              county: borrowerAddress.county || ''
            });
          }
        }
      }, 100);
    }
    
    // Auto-copy co-borrower address if applicable
    if (hasCoBorrower && (type === 'second-home' || type === 'investment')) {
      setTimeout(() => {
        const coBorrowerAddress = form.getValues('coBorrower.residenceAddress');
        if (coBorrowerAddress && (coBorrowerAddress.street || coBorrowerAddress.city || coBorrowerAddress.state)) {
          const updatedProperties = form.watch('property.properties') || [];
          const coBorrowerPropertyIndex = updatedProperties.findIndex(p => p.use === type);
          
          if (coBorrowerPropertyIndex >= 0) {
            form.setValue(`property.properties.${coBorrowerPropertyIndex}.address`, {
              street: coBorrowerAddress.street || '',
              unit: coBorrowerAddress.unit || '',
              city: coBorrowerAddress.city || '',
              state: coBorrowerAddress.state || '',
              zip: coBorrowerAddress.zip || '',
              county: coBorrowerAddress.county || ''
            });
          }
        }
      }, 100);
    }
  };

  const removePropertyType = (type: 'primary' | 'second-home' | 'investment' | 'home-purchase') => {
    const typeLabels = {
      'primary': 'Primary Residence',
      'second-home': 'Second Home',
      'investment': 'Investment Property',
      'home-purchase': 'Home Purchase'
    };
    
    setConfirmRemovalDialog({
      isOpen: true,
      type: 'property-type',
      itemType: typeLabels[type],
      onConfirm: () => {
        const currentProperties = form.watch('property.properties') || [];
        const propertiesToRemove = currentProperties.filter(property => property.use === type);
        
        propertiesToRemove.forEach(property => {
          if (property.id) {
            const currentPropertiesNow = form.watch('property.properties') || [];
            const updatedProperties = currentPropertiesNow.filter(p => p.id !== property.id);
            form.setValue('property.properties', updatedProperties);
            
            // Remove collapsible state for removed property
            setPropertyCardStates(prev => {
              const { [property.id!]: _, ...rest } = prev;
              return rest;
            });
          }
        });
        setConfirmRemovalDialog({ isOpen: false, type: null });
      }
    });
  };

  const hasPropertyType = (type: 'primary' | 'second-home' | 'investment' | 'home-purchase'): boolean => {
    const currentProperties = form.watch('property.properties') || [];
    return currentProperties.some(property => property.use === type);
  };

  // Calculate total monthly payment for a property loan
  const calculateTotalMonthlyPayment = (propertyId: string) => {
    const properties = form.watch('property.properties') || [];
    const property = properties.find(p => p.id === propertyId);
    
    if (!property?.loan) return;
    
    const piPayment = parseMonetaryValue(property.loan.piPayment || '');
    const escrowPayment = parseMonetaryValue(property.loan.escrowPayment || '');
    const total = piPayment + escrowPayment;
    
    // Update the form with calculated total
    const updatedProperties = properties.map(p => 
      p.id === propertyId 
        ? { ...p, loan: { ...p.loan, totalMonthlyPayment: `$${total.toFixed(2)}` } }
        : p
    );
    form.setValue('property.properties', updatedProperties);

    // If this is an investment property, also update the monthly income calculation
    if (property.use === 'investment') {
      calculateInvestmentIncome(propertyId);
    }
  };

  // Calculate monthly income for investment properties (rental - total payment)
  const calculateInvestmentIncome = (propertyId: string) => {
    const properties = form.watch('property.properties') || [];
    const property = properties.find(p => p.id === propertyId);
    
    if (!property?.loan || property.use !== 'investment') return;
    
    const monthlyRental = parseMonetaryValue(property.loan.monthlyRental || '');
    const totalPayment = parseMonetaryValue(property.loan.totalMonthlyPayment || '');
    const monthlyIncome = monthlyRental - totalPayment; // Allow negative values
    
    // Format with proper sign for negative values
    const formattedIncome = monthlyIncome >= 0 
      ? `$${monthlyIncome.toFixed(2)}` 
      : `-$${Math.abs(monthlyIncome).toFixed(2)}`;
    
    // Update the form with calculated income
    const updatedProperties = properties.map(p => 
      p.id === propertyId 
        ? { ...p, loan: { ...p.loan, monthlyIncome: formattedIncome } }
        : p
    );
    form.setValue('property.properties', updatedProperties);
  };

  // Toggle mortgage balance field type
  const toggleMortgageBalanceFieldType = (propertyId: string) => {
    setMortgageBalanceFieldType(prev => ({
      ...prev,
      [propertyId]: prev[propertyId] === 'payoff' ? 'statement' : 'payoff'
    }));
  };

  // Get mortgage balance field label
  const getMortgageBalanceLabel = (propertyId: string) => {
    const fieldType = mortgageBalanceFieldType[propertyId] || 'statement';
    return fieldType === 'statement' ? 'Mortgage Statement Balance' : 'Pay Off Demand Balance';
  };

  // Toggle second mortgage balance field type
  const toggleSecondMortgageBalanceFieldType = (propertyId: string) => {
    setSecondMortgageBalanceFieldType(prev => ({
      ...prev,
      [propertyId]: prev[propertyId] === 'payoff' ? 'statement' : 'payoff'
    }));
  };

  // Get second mortgage balance field label
  const getSecondMortgageBalanceLabel = (propertyId: string) => {
    const fieldType = secondMortgageBalanceFieldType[propertyId] || 'statement';
    return fieldType === 'statement' ? 'Mortgage Statement Balance' : 'Pay Off Demand Balance';
  };

  // Toggle loan details collapsible state
  const toggleLoanDetailsOpen = (propertyId: string) => {
    setIsLoanDetailsOpen(prev => ({
      ...prev,
      [propertyId]: !prev[propertyId]
    }));
  };

  // Toggle second loan details collapsible state
  const toggleSecondLoanDetailsOpen = (propertyId: string) => {
    setIsSecondLoanDetailsOpen(prev => ({
      ...prev,
      [propertyId]: !prev[propertyId]
    }));
  };
  
  // Toggle statement balance field type for current loan
  const [currentLoanStatementBalanceFieldType, setCurrentLoanStatementBalanceFieldType] = useState<'statement' | 'payoff'>('statement');
  
  const toggleCurrentLoanStatementBalanceFieldType = () => {
    setCurrentLoanStatementBalanceFieldType(prev => prev === 'statement' ? 'payoff' : 'statement');
  };
  
  const getCurrentLoanStatementBalanceLabel = () => {
    return currentLoanStatementBalanceFieldType === 'statement' ? 'Statement Balance' : 'Pay Off Demand';
  };

  // Handle showing second loan sections
  const handleAddSecondLoan = () => {
    setShowSecondLoan(true);
  };

  // Handle adding additional loans
  const handleAddAdditionalLoan = () => {
    // Generate a unique ID based on timestamp to avoid conflicts
    const newLoanId = `loan-${Date.now()}`;
    setAdditionalLoans(prev => [...prev, { id: newLoanId, isOpen: true }]);
  };

  // Handle removing additional loan
  const removeAdditionalLoan = (loanId: string) => {
    setAdditionalLoans(prev => prev.filter(loan => loan.id !== loanId));
  };

  // Toggle additional loan collapsible state
  const toggleAdditionalLoanOpen = (loanId: string) => {
    setAdditionalLoans(prev =>
      prev.map(loan =>
        loan.id === loanId ? { ...loan, isOpen: !loan.isOpen } : loan
      )
    );
  };

  // Handle removing second loan
  const removeSecondLoan = () => {
    setConfirmRemovalDialog({
      isOpen: true,
      type: 'second-loan',
      onConfirm: () => {
        setShowSecondLoan(false);
        setShowThirdLoan(false);
        setConfirmRemovalDialog({ isOpen: false, type: null });
      }
    });
  };

  // Handle adding third loan
  const handleAddThirdLoan = () => {
    setShowThirdLoan(true);
  };


  // Handle showing current loan sections  
  const handleAddCurrentLoan = () => {
    setShowCurrentLoan(true);
    // REMOVED: Auto-creation of Primary Residence property
    // Loan cards are now exclusive to Loan tab
    
    // Trigger grey box animation for current loan card
    setTimeout(() => {
      setShowCurrentLoanCardAnimation(prev => ({ ...prev, 'current-loan': true }));
      setTimeout(() => {
        setShowCurrentLoanCardAnimation(prev => ({ ...prev, 'current-loan': false }));
      }, 800);
    }, 200);
  };

  // Handle removing current loan
  const removeCurrentLoan = () => {
    setConfirmRemovalDialog({
      isOpen: true,
      type: 'current-loan',
      onConfirm: () => {
        setShowCurrentLoan(false);
        // REMOVED: Property tab reset logic - now independent
        setConfirmRemovalDialog({ isOpen: false, type: null });
      }
    });
  };
  
  // Toggle escrow payment field type for current loan
  const [currentLoanEscrowPaymentFieldType, setCurrentLoanEscrowPaymentFieldType] = useState<'tax-insurance' | 'property-tax' | 'home-insurance'>('tax-insurance');
  
  const toggleCurrentLoanEscrowPaymentFieldType = () => {
    setCurrentLoanEscrowPaymentFieldType(prev => {
      switch (prev) {
        case 'tax-insurance': return 'property-tax';
        case 'property-tax': return 'home-insurance';
        case 'home-insurance': return 'tax-insurance';
        default: return 'tax-insurance';
      }
    });
  };
  
  const getCurrentLoanEscrowPaymentLabel = () => {
    switch (currentLoanEscrowPaymentFieldType) {
      case 'tax-insurance': return 'Tax & Insurance Payment';
      case 'property-tax': return 'Property Tax';
      case 'home-insurance': return 'Home Insurance';
      default: return 'Tax & Insurance Payment';
    }
  };
  
  // Auto-copy property address to Current Loan 1 based on Attached to Property selection
  const autoCopyPropertyAddressToCurrentLoan = () => {
    const attachedPropertyId = form.getValues('currentLoan.attachedToProperty') as string;
    
    if (attachedPropertyId && attachedPropertyId !== 'Other' && attachedPropertyId !== 'select') {
      // Find property by ID since attachedToProperty now contains the property ID
      const properties = form.getValues('property.properties') || [];
      const selectedProperty = properties.find((p: any) => p.id === attachedPropertyId);
      
      if (selectedProperty?.address) {
        // Copy address from the selected property
        form.setValue('currentLoan.propertyAddress.street', selectedProperty.address.street || '');
        form.setValue('currentLoan.propertyAddress.unit', selectedProperty.address.unit || '');
        form.setValue('currentLoan.propertyAddress.city', selectedProperty.address.city || '');
        form.setValue('currentLoan.propertyAddress.state', selectedProperty.address.state || '');
        form.setValue('currentLoan.propertyAddress.zipCode', selectedProperty.address.zip || '');
        form.setValue('currentLoan.propertyAddress.county', selectedProperty.address.county || '');
      }
    } else if (attachedPropertyId === 'Other' || attachedPropertyId === 'select') {
      // Clear fields for manual entry or when no selection
      form.setValue('currentLoan.propertyAddress.street', '');
      form.setValue('currentLoan.propertyAddress.unit', '');
      form.setValue('currentLoan.propertyAddress.city', '');
      form.setValue('currentLoan.propertyAddress.state', '');
      form.setValue('currentLoan.propertyAddress.zipCode', '');
      form.setValue('currentLoan.propertyAddress.county', '');
    }
  };

  // Auto-copy property address to Loan tab Second Loan based on Attached to Property selection
  const autoCopyPropertyAddressToLoanTabSecondLoan = () => {
    const attachedPropertyId = form.getValues('secondLoan.attachedToProperty') as string;
    
    if (attachedPropertyId && attachedPropertyId !== 'Other' && attachedPropertyId !== 'select') {
      // Find property by ID since attachedToProperty now contains the property ID
      const properties = form.getValues('property.properties') || [];
      const selectedProperty = properties.find((p: any) => p.id === attachedPropertyId);
      
      if (selectedProperty?.address) {
        // Copy address from the selected property
        form.setValue('secondLoan.propertyAddress.street', selectedProperty.address.street || '');
        form.setValue('secondLoan.propertyAddress.unit', selectedProperty.address.unit || '');
        form.setValue('secondLoan.propertyAddress.city', selectedProperty.address.city || '');
        form.setValue('secondLoan.propertyAddress.state', selectedProperty.address.state || '');
        form.setValue('secondLoan.propertyAddress.zipCode', selectedProperty.address.zip || '');
        form.setValue('secondLoan.propertyAddress.county', selectedProperty.address.county || '');
      }
    } else if (attachedPropertyId === 'Other' || attachedPropertyId === 'select') {
      // Clear fields for manual entry or when no selection
      form.setValue('secondLoan.propertyAddress.street', '');
      form.setValue('secondLoan.propertyAddress.unit', '');
      form.setValue('secondLoan.propertyAddress.city', '');
      form.setValue('secondLoan.propertyAddress.state', '');
      form.setValue('secondLoan.propertyAddress.zipCode', '');
      form.setValue('secondLoan.propertyAddress.county', '');
    }
  };

  // Type-erased wrappers for dynamic field paths (additional loans)
  const setDyn = (name: string, v: any, opts?: any) => (form as unknown as UseFormReturn<any>).setValue(name as any, v, opts);
  const getDyn = (name: string) => (form as unknown as UseFormReturn<any>).getValues(name as any);

  // Generic auto-copy function for additional loans
  const createAutoCopyAddressFunction = (loanId: string) => () => {
    const attachedPropertyId = getDyn(`${loanId}.attachedToProperty`) as string;
    
    if (attachedPropertyId && attachedPropertyId !== 'Other' && attachedPropertyId !== 'select') {
      // Find property by ID since attachedToProperty now contains the property ID
      const properties = form.getValues('property.properties') || [];
      const selectedProperty = properties.find((p: any) => p.id === attachedPropertyId);
      
      if (selectedProperty?.address) {
        // Copy address from the selected property
        setDyn(`${loanId}.propertyAddress.street`, selectedProperty.address.street || '');
        setDyn(`${loanId}.propertyAddress.unit`, selectedProperty.address.unit || '');
        setDyn(`${loanId}.propertyAddress.city`, selectedProperty.address.city || '');
        setDyn(`${loanId}.propertyAddress.state`, selectedProperty.address.state || '');
        setDyn(`${loanId}.propertyAddress.zipCode`, selectedProperty.address.zip || '');
        setDyn(`${loanId}.propertyAddress.county`, selectedProperty.address.county || '');
      }
    } else if (attachedPropertyId === 'Other' || attachedPropertyId === 'select') {
      // Clear fields for manual entry or when no selection
      setDyn(`${loanId}.propertyAddress.street`, '');
      setDyn(`${loanId}.propertyAddress.unit`, '');
      setDyn(`${loanId}.propertyAddress.city`, '');
      setDyn(`${loanId}.propertyAddress.state`, '');
      setDyn(`${loanId}.propertyAddress.zipCode`, '');
      setDyn(`${loanId}.propertyAddress.county`, '');
    }
  };

  // Auto-copy property address to Second Loan based on Attached to Property selection
  const autoCopyPropertyAddressToSecondLoan = (propertyId: string) => {
    const properties = form.getValues('property.properties') || [];
    const propertyIndex = properties.findIndex(p => p.id === propertyId);
    if (propertyIndex === -1) return;

    const attachedProperty = form.getValues(`property.properties.${propertyIndex}.secondLoan.attachedToProperty`);
    
    if (attachedProperty === 'Primary Residence') {
      const primaryProperty = properties.find(p => p.use === 'primary');
      if (primaryProperty?.address && (primaryProperty.address.street || primaryProperty.address.city)) {
        form.setValue(`property.properties.${propertyIndex}.secondLoan.propertyAddress.street`, primaryProperty.address.street || '');
        form.setValue(`property.properties.${propertyIndex}.secondLoan.propertyAddress.unit`, primaryProperty.address.unit || '');
        form.setValue(`property.properties.${propertyIndex}.secondLoan.propertyAddress.city`, primaryProperty.address.city || '');
        form.setValue(`property.properties.${propertyIndex}.secondLoan.propertyAddress.state`, primaryProperty.address.state || '');
        form.setValue(`property.properties.${propertyIndex}.secondLoan.propertyAddress.zipCode`, primaryProperty.address.zip || '');
        form.setValue(`property.properties.${propertyIndex}.secondLoan.propertyAddress.county`, primaryProperty.address.county || '');
      } else {
        const borrowerAddress = form.getValues('borrower.residenceAddress');
        if (borrowerAddress) {
          form.setValue(`property.properties.${propertyIndex}.secondLoan.propertyAddress.street`, borrowerAddress.street || '');
          form.setValue(`property.properties.${propertyIndex}.secondLoan.propertyAddress.unit`, borrowerAddress.unit || '');
          form.setValue(`property.properties.${propertyIndex}.secondLoan.propertyAddress.city`, borrowerAddress.city || '');
          form.setValue(`property.properties.${propertyIndex}.secondLoan.propertyAddress.state`, borrowerAddress.state || '');
          form.setValue(`property.properties.${propertyIndex}.secondLoan.propertyAddress.zipCode`, borrowerAddress.zip || '');
          form.setValue(`property.properties.${propertyIndex}.secondLoan.propertyAddress.county`, borrowerAddress.county || '');
        }
      }
    } else if (attachedProperty === 'Second Home') {
      const secondHome = properties.find(property => property.use === 'second-home');
      if (secondHome?.address) {
        form.setValue(`property.properties.${propertyIndex}.secondLoan.propertyAddress.street`, secondHome.address.street || '');
        form.setValue(`property.properties.${propertyIndex}.secondLoan.propertyAddress.unit`, secondHome.address.unit || '');
        form.setValue(`property.properties.${propertyIndex}.secondLoan.propertyAddress.city`, secondHome.address.city || '');
        form.setValue(`property.properties.${propertyIndex}.secondLoan.propertyAddress.state`, secondHome.address.state || '');
        form.setValue(`property.properties.${propertyIndex}.secondLoan.propertyAddress.zipCode`, secondHome.address.zip || '');
        form.setValue(`property.properties.${propertyIndex}.secondLoan.propertyAddress.county`, secondHome.address.county || '');
      }
    } else if (attachedProperty === 'Investment Property') {
      const investmentProperty = properties.find(property => property.use === 'investment');
      if (investmentProperty?.address) {
        form.setValue(`property.properties.${propertyIndex}.secondLoan.propertyAddress.street`, investmentProperty.address.street || '');
        form.setValue(`property.properties.${propertyIndex}.secondLoan.propertyAddress.unit`, investmentProperty.address.unit || '');
        form.setValue(`property.properties.${propertyIndex}.secondLoan.propertyAddress.city`, investmentProperty.address.city || '');
        form.setValue(`property.properties.${propertyIndex}.secondLoan.propertyAddress.state`, investmentProperty.address.state || '');
        form.setValue(`property.properties.${propertyIndex}.secondLoan.propertyAddress.zipCode`, investmentProperty.address.zip || '');
        form.setValue(`property.properties.${propertyIndex}.secondLoan.propertyAddress.county`, investmentProperty.address.county || '');
      }
    } else if (attachedProperty === 'Home Purchase') {
      const homePurchaseProperty = properties.find(property => property.use === 'home-purchase');
      if (homePurchaseProperty?.address) {
        form.setValue(`property.properties.${propertyIndex}.secondLoan.propertyAddress.street`, homePurchaseProperty.address.street || '');
        form.setValue(`property.properties.${propertyIndex}.secondLoan.propertyAddress.unit`, homePurchaseProperty.address.unit || '');
        form.setValue(`property.properties.${propertyIndex}.secondLoan.propertyAddress.city`, homePurchaseProperty.address.city || '');
        form.setValue(`property.properties.${propertyIndex}.secondLoan.propertyAddress.state`, homePurchaseProperty.address.state || '');
        form.setValue(`property.properties.${propertyIndex}.secondLoan.propertyAddress.zipCode`, homePurchaseProperty.address.zip || '');
        form.setValue(`property.properties.${propertyIndex}.secondLoan.propertyAddress.county`, homePurchaseProperty.address.county || '');
      }
    } else if (attachedProperty === 'Other') {
      // Clear all fields for Other
      form.setValue(`property.properties.${propertyIndex}.secondLoan.propertyAddress.street`, '');
      form.setValue(`property.properties.${propertyIndex}.secondLoan.propertyAddress.unit`, '');
      form.setValue(`property.properties.${propertyIndex}.secondLoan.propertyAddress.city`, '');
      form.setValue(`property.properties.${propertyIndex}.secondLoan.propertyAddress.state`, '');
      form.setValue(`property.properties.${propertyIndex}.secondLoan.propertyAddress.zipCode`, '');
      form.setValue(`property.properties.${propertyIndex}.secondLoan.propertyAddress.county`, '');
    }
  };

  // Auto-copy property address to Third Loan based on Attached to Property selection
  const autoCopyPropertyAddressToThirdLoan = (propertyId: string) => {
    const properties = form.getValues('property.properties') || [];
    const propertyIndex = properties.findIndex(p => p.id === propertyId);
    if (propertyIndex === -1) return;

    const attachedProperty = form.getValues(`property.properties.${propertyIndex}.thirdLoan.attachedToProperty`);
    
    if (attachedProperty === 'Primary Residence') {
      const primaryProperty = properties.find(p => p.use === 'primary');
      if (primaryProperty?.address && (primaryProperty.address.street || primaryProperty.address.city)) {
        form.setValue(`property.properties.${propertyIndex}.thirdLoan.propertyAddress.street`, primaryProperty.address.street || '');
        form.setValue(`property.properties.${propertyIndex}.thirdLoan.propertyAddress.unit`, primaryProperty.address.unit || '');
        form.setValue(`property.properties.${propertyIndex}.thirdLoan.propertyAddress.city`, primaryProperty.address.city || '');
        form.setValue(`property.properties.${propertyIndex}.thirdLoan.propertyAddress.state`, primaryProperty.address.state || '');
        form.setValue(`property.properties.${propertyIndex}.thirdLoan.propertyAddress.zipCode`, primaryProperty.address.zip || '');
        form.setValue(`property.properties.${propertyIndex}.thirdLoan.propertyAddress.county`, primaryProperty.address.county || '');
      } else {
        const borrowerAddress = form.getValues('borrower.residenceAddress');
        if (borrowerAddress) {
          form.setValue(`property.properties.${propertyIndex}.thirdLoan.propertyAddress.street`, borrowerAddress.street || '');
          form.setValue(`property.properties.${propertyIndex}.thirdLoan.propertyAddress.unit`, borrowerAddress.unit || '');
          form.setValue(`property.properties.${propertyIndex}.thirdLoan.propertyAddress.city`, borrowerAddress.city || '');
          form.setValue(`property.properties.${propertyIndex}.thirdLoan.propertyAddress.state`, borrowerAddress.state || '');
          form.setValue(`property.properties.${propertyIndex}.thirdLoan.propertyAddress.zipCode`, borrowerAddress.zip || '');
          form.setValue(`property.properties.${propertyIndex}.thirdLoan.propertyAddress.county`, borrowerAddress.county || '');
        }
      }
    } else if (attachedProperty === 'Second Home') {
      const secondHome = properties.find(property => property.use === 'second-home');
      if (secondHome?.address) {
        form.setValue(`property.properties.${propertyIndex}.thirdLoan.propertyAddress.street`, secondHome.address.street || '');
        form.setValue(`property.properties.${propertyIndex}.thirdLoan.propertyAddress.unit`, secondHome.address.unit || '');
        form.setValue(`property.properties.${propertyIndex}.thirdLoan.propertyAddress.city`, secondHome.address.city || '');
        form.setValue(`property.properties.${propertyIndex}.thirdLoan.propertyAddress.state`, secondHome.address.state || '');
        form.setValue(`property.properties.${propertyIndex}.thirdLoan.propertyAddress.zipCode`, secondHome.address.zip || '');
        form.setValue(`property.properties.${propertyIndex}.thirdLoan.propertyAddress.county`, secondHome.address.county || '');
      }
    } else if (attachedProperty === 'Investment Property') {
      const investmentProperty = properties.find(property => property.use === 'investment');
      if (investmentProperty?.address) {
        form.setValue(`property.properties.${propertyIndex}.thirdLoan.propertyAddress.street`, investmentProperty.address.street || '');
        form.setValue(`property.properties.${propertyIndex}.thirdLoan.propertyAddress.unit`, investmentProperty.address.unit || '');
        form.setValue(`property.properties.${propertyIndex}.thirdLoan.propertyAddress.city`, investmentProperty.address.city || '');
        form.setValue(`property.properties.${propertyIndex}.thirdLoan.propertyAddress.state`, investmentProperty.address.state || '');
        form.setValue(`property.properties.${propertyIndex}.thirdLoan.propertyAddress.zipCode`, investmentProperty.address.zip || '');
        form.setValue(`property.properties.${propertyIndex}.thirdLoan.propertyAddress.county`, investmentProperty.address.county || '');
      }
    } else if (attachedProperty === 'Home Purchase') {
      const homePurchaseProperty = properties.find(property => property.use === 'home-purchase');
      if (homePurchaseProperty?.address) {
        form.setValue(`property.properties.${propertyIndex}.thirdLoan.propertyAddress.street`, homePurchaseProperty.address.street || '');
        form.setValue(`property.properties.${propertyIndex}.thirdLoan.propertyAddress.unit`, homePurchaseProperty.address.unit || '');
        form.setValue(`property.properties.${propertyIndex}.thirdLoan.propertyAddress.city`, homePurchaseProperty.address.city || '');
        form.setValue(`property.properties.${propertyIndex}.thirdLoan.propertyAddress.state`, homePurchaseProperty.address.state || '');
        form.setValue(`property.properties.${propertyIndex}.thirdLoan.propertyAddress.zipCode`, homePurchaseProperty.address.zip || '');
        form.setValue(`property.properties.${propertyIndex}.thirdLoan.propertyAddress.county`, homePurchaseProperty.address.county || '');
      }
    } else if (attachedProperty === 'Other') {
      // Clear all fields for Other
      form.setValue(`property.properties.${propertyIndex}.thirdLoan.propertyAddress.street`, '');
      form.setValue(`property.properties.${propertyIndex}.thirdLoan.propertyAddress.unit`, '');
      form.setValue(`property.properties.${propertyIndex}.thirdLoan.propertyAddress.city`, '');
      form.setValue(`property.properties.${propertyIndex}.thirdLoan.propertyAddress.state`, '');
      form.setValue(`property.properties.${propertyIndex}.thirdLoan.propertyAddress.zipCode`, '');
      form.setValue(`property.properties.${propertyIndex}.thirdLoan.propertyAddress.county`, '');
    }
  };

  // Auto-copy property address to Global Second Loan based on Attached to Property selection
  const autoCopyPropertyAddressToGlobalSecondLoan = () => {
    const attachedProperty = form.getValues('secondLoan.attachedToProperty');
    
    if (attachedProperty === 'Primary Residence') {
      const properties = form.getValues('property.properties') || [];
      const primaryProperty = properties.find(p => p.use === 'primary');
      if (primaryProperty?.address && (primaryProperty.address.street || primaryProperty.address.city)) {
        form.setValue('secondLoan.propertyAddress.street', primaryProperty.address.street || '');
        form.setValue('secondLoan.propertyAddress.unit', primaryProperty.address.unit || '');
        form.setValue('secondLoan.propertyAddress.city', primaryProperty.address.city || '');
        form.setValue('secondLoan.propertyAddress.state', primaryProperty.address.state || '');
        form.setValue('secondLoan.propertyAddress.zipCode', primaryProperty.address.zip || '');
        form.setValue('secondLoan.propertyAddress.county', primaryProperty.address.county || '');
      } else {
        const borrowerAddress = form.getValues('borrower.residenceAddress');
        if (borrowerAddress) {
          form.setValue('secondLoan.propertyAddress.street', borrowerAddress.street || '');
          form.setValue('secondLoan.propertyAddress.unit', borrowerAddress.unit || '');
          form.setValue('secondLoan.propertyAddress.city', borrowerAddress.city || '');
          form.setValue('secondLoan.propertyAddress.state', borrowerAddress.state || '');
          form.setValue('secondLoan.propertyAddress.zipCode', borrowerAddress.zip || '');
          form.setValue('secondLoan.propertyAddress.county', borrowerAddress.county || '');
        }
      }
    } else if (attachedProperty === 'Second Home') {
      const properties = form.getValues('property.properties') || [];
      const secondHome = properties.find(property => property.use === 'second-home');
      if (secondHome?.address) {
        form.setValue('secondLoan.propertyAddress.street', secondHome.address.street || '');
        form.setValue('secondLoan.propertyAddress.unit', secondHome.address.unit || '');
        form.setValue('secondLoan.propertyAddress.city', secondHome.address.city || '');
        form.setValue('secondLoan.propertyAddress.state', secondHome.address.state || '');
        form.setValue('secondLoan.propertyAddress.zipCode', secondHome.address.zip || '');
        form.setValue('secondLoan.propertyAddress.county', secondHome.address.county || '');
      }
    } else if (attachedProperty === 'Investment Property') {
      const properties = form.getValues('property.properties') || [];
      const investmentProperty = properties.find(property => property.use === 'investment');
      if (investmentProperty?.address) {
        form.setValue('secondLoan.propertyAddress.street', investmentProperty.address.street || '');
        form.setValue('secondLoan.propertyAddress.unit', investmentProperty.address.unit || '');
        form.setValue('secondLoan.propertyAddress.city', investmentProperty.address.city || '');
        form.setValue('secondLoan.propertyAddress.state', investmentProperty.address.state || '');
        form.setValue('secondLoan.propertyAddress.zipCode', investmentProperty.address.zip || '');
        form.setValue('secondLoan.propertyAddress.county', investmentProperty.address.county || '');
      }
    } else if (attachedProperty === 'Home Purchase') {
      const properties = form.getValues('property.properties') || [];
      const homePurchaseProperty = properties.find(property => property.use === 'home-purchase');
      if (homePurchaseProperty?.address) {
        form.setValue('secondLoan.propertyAddress.street', homePurchaseProperty.address.street || '');
        form.setValue('secondLoan.propertyAddress.unit', homePurchaseProperty.address.unit || '');
        form.setValue('secondLoan.propertyAddress.city', homePurchaseProperty.address.city || '');
        form.setValue('secondLoan.propertyAddress.state', homePurchaseProperty.address.state || '');
        form.setValue('secondLoan.propertyAddress.zipCode', homePurchaseProperty.address.zip || '');
        form.setValue('secondLoan.propertyAddress.county', homePurchaseProperty.address.county || '');
      }
    } else if (attachedProperty === 'Other') {
      // Clear fields for manual entry
      form.setValue('secondLoan.propertyAddress.street', '');
      form.setValue('secondLoan.propertyAddress.unit', '');
      form.setValue('secondLoan.propertyAddress.city', '');
      form.setValue('secondLoan.propertyAddress.state', '');
      form.setValue('secondLoan.propertyAddress.zipCode', '');
      form.setValue('secondLoan.propertyAddress.county', '');
    }
  };

  // Auto-copy property address to Global Third Loan based on Attached to Property selection
  const autoCopyPropertyAddressToGlobalThirdLoan = () => {
    const attachedProperty = form.getValues('thirdLoan.attachedToProperty');
    
    if (attachedProperty === 'Primary Residence') {
      const properties = form.getValues('property.properties') || [];
      const primaryProperty = properties.find(p => p.use === 'primary');
      if (primaryProperty?.address && (primaryProperty.address.street || primaryProperty.address.city)) {
        form.setValue('thirdLoan.propertyAddress.street', primaryProperty.address.street || '');
        form.setValue('thirdLoan.propertyAddress.unit', primaryProperty.address.unit || '');
        form.setValue('thirdLoan.propertyAddress.city', primaryProperty.address.city || '');
        form.setValue('thirdLoan.propertyAddress.state', primaryProperty.address.state || '');
        form.setValue('thirdLoan.propertyAddress.zipCode', primaryProperty.address.zip || '');
        form.setValue('thirdLoan.propertyAddress.county', primaryProperty.address.county || '');
      } else {
        const borrowerAddress = form.getValues('borrower.residenceAddress');
        if (borrowerAddress) {
          form.setValue('thirdLoan.propertyAddress.street', borrowerAddress.street || '');
          form.setValue('thirdLoan.propertyAddress.unit', borrowerAddress.unit || '');
          form.setValue('thirdLoan.propertyAddress.city', borrowerAddress.city || '');
          form.setValue('thirdLoan.propertyAddress.state', borrowerAddress.state || '');
          form.setValue('thirdLoan.propertyAddress.zipCode', borrowerAddress.zip || '');
          form.setValue('thirdLoan.propertyAddress.county', borrowerAddress.county || '');
        }
      }
    } else if (attachedProperty === 'Second Home') {
      const properties = form.getValues('property.properties') || [];
      const secondHome = properties.find(property => property.use === 'second-home');
      if (secondHome?.address) {
        form.setValue('thirdLoan.propertyAddress.street', secondHome.address.street || '');
        form.setValue('thirdLoan.propertyAddress.unit', secondHome.address.unit || '');
        form.setValue('thirdLoan.propertyAddress.city', secondHome.address.city || '');
        form.setValue('thirdLoan.propertyAddress.state', secondHome.address.state || '');
        form.setValue('thirdLoan.propertyAddress.zipCode', secondHome.address.zip || '');
        form.setValue('thirdLoan.propertyAddress.county', secondHome.address.county || '');
      }
    } else if (attachedProperty === 'Investment Property') {
      const properties = form.getValues('property.properties') || [];
      const investmentProperty = properties.find(property => property.use === 'investment');
      if (investmentProperty?.address) {
        form.setValue('thirdLoan.propertyAddress.street', investmentProperty.address.street || '');
        form.setValue('thirdLoan.propertyAddress.unit', investmentProperty.address.unit || '');
        form.setValue('thirdLoan.propertyAddress.city', investmentProperty.address.city || '');
        form.setValue('thirdLoan.propertyAddress.state', investmentProperty.address.state || '');
        form.setValue('thirdLoan.propertyAddress.zipCode', investmentProperty.address.zip || '');
        form.setValue('thirdLoan.propertyAddress.county', investmentProperty.address.county || '');
      }
    } else if (attachedProperty === 'Home Purchase') {
      const properties = form.getValues('property.properties') || [];
      const homePurchaseProperty = properties.find(property => property.use === 'home-purchase');
      if (homePurchaseProperty?.address) {
        form.setValue('thirdLoan.propertyAddress.street', homePurchaseProperty.address.street || '');
        form.setValue('thirdLoan.propertyAddress.unit', homePurchaseProperty.address.unit || '');
        form.setValue('thirdLoan.propertyAddress.city', homePurchaseProperty.address.city || '');
        form.setValue('thirdLoan.propertyAddress.state', homePurchaseProperty.address.state || '');
        form.setValue('thirdLoan.propertyAddress.zipCode', homePurchaseProperty.address.zip || '');
        form.setValue('thirdLoan.propertyAddress.county', homePurchaseProperty.address.county || '');
      }
    } else if (attachedProperty === 'Other') {
      // Clear fields for manual entry
      form.setValue('thirdLoan.propertyAddress.street', '');
      form.setValue('thirdLoan.propertyAddress.unit', '');
      form.setValue('thirdLoan.propertyAddress.city', '');
      form.setValue('thirdLoan.propertyAddress.state', '');
      form.setValue('thirdLoan.propertyAddress.zipCode', '');
      form.setValue('thirdLoan.propertyAddress.county', '');
    }
  };

  // Get loan details open state (default to true)
  const getLoanDetailsOpen = (propertyId: string) => {
    return isLoanDetailsOpen[propertyId] ?? true;
  };

  // Get second loan details open state (default to true)
  const getSecondLoanDetailsOpen = (propertyId: string) => {
    return isSecondLoanDetailsOpen[propertyId] ?? true;
  };

  // Toggle escrow payment field type
  const toggleEscrowPaymentFieldType = (propertyId: string) => {
    setEscrowPaymentFieldType(prev => {
      const currentType = prev[propertyId] || 'tax-insurance';
      const nextType = currentType === 'tax-insurance' ? 'property-tax' : 
                      currentType === 'property-tax' ? 'home-insurance' : 'tax-insurance';
      return {
        ...prev,
        [propertyId]: nextType
      };
    });
  };

  // Get escrow payment field label
  const getEscrowPaymentLabel = (propertyId: string) => {
    const fieldType = escrowPaymentFieldType[propertyId] || 'tax-insurance';
    switch (fieldType) {
      case 'tax-insurance': return 'Tax & Insurance Payment';
      case 'property-tax': return 'Property Tax';
      case 'home-insurance': return 'Home Insurance';
      default: return 'Tax & Insurance Payment';
    }
  };

  // Sort properties by hierarchy: Home Purchase, Primary Residence, Second Homes, Investment Properties
  const sortPropertiesByHierarchy = (properties: any[]) => {
    const hierarchyOrder = { 'home-purchase': 1, 'primary': 2, 'second-home': 3, 'investment': 4 };
    return [...properties].sort((a, b) => {
      const aOrder = hierarchyOrder[a.use as keyof typeof hierarchyOrder] || 999;
      const bOrder = hierarchyOrder[b.use as keyof typeof hierarchyOrder] || 999;
      return aOrder - bOrder;
    });
  };

  return (
    <TooltipProvider delayDuration={300}>
      <div className="min-h-screen bg-background">
      {/* Header */}
      <header className="bg-primary text-primary-foreground shadow-lg border-b transition-shadow duration-300 hover:shadow-2xl hover:shadow-primary/20">
        <div className="container mx-auto px-6 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-4">
              <h1 className="text-xl font-black italic" style={{ fontFamily: '"Segoe UI", Tahoma, Geneva, Verdana, sans-serif' }}>
                Add New Client
              </h1>
            </div>
            <div className="flex items-center space-x-3">
              <Tooltip>
                <TooltipTrigger asChild>
                  <Button
                    variant="ghost"
                    size="sm"
                    onClick={() => {
                      // Trigger rotation animation
                      setShowRevertAnimation(true);
                      setTimeout(() => setShowRevertAnimation(false), 600);
                      
                      // Always show unsaved changes dialog when navigating away from Add Client page
                      setUnsavedChangesDialog({ isOpen: true });
                    }}
                    className="text-primary-foreground hover:text-white hover:bg-green-600 p-2 transition-colors duration-200"
                    data-testid="button-back-to-dashboard"
                  >
                    <RotateCcw className={`h-6 w-6 ${showRevertAnimation ? 'animate-rotate-360' : ''}`} />
                  </Button>
                </TooltipTrigger>
                <TooltipContent side="left" sideOffset={10} className="text-sm">
                  <p>Back to Dashboard</p>
                </TooltipContent>
              </Tooltip>
              <Button
                onClick={handleScreenshare}
                disabled={screenshareLoading}
                size="sm"
                className="bg-primary-foreground text-primary hover:bg-green-600 hover:text-white"
                data-testid="button-screenshare"
              >
                <Monitor className={`h-3 w-3 mr-2 transition-transform duration-500 ${screenshareLoading ? 'animate-spin' : ''}`} />
                {screenshareLoading ? 'Starting...' : 'Screenshare'}
              </Button>
              <Button
                onClick={form.handleSubmit(onSubmit)}
                disabled={addClientMutation.isPending}
                size="sm"
                className={`bg-white text-primary border hover:bg-green-600 hover:text-white transition-all duration-500 ${
                  showEntryAnimation ? 'animate-roll-down' : ''
                }`}
                data-testid="button-save-client"
              >
                <Save className={`h-3 w-3 mr-2 transition-transform duration-500 ${addClientMutation.isPending ? 'rotate-180' : ''}`} />
                {addClientMutation.isPending ? 'Saving...' : 'Save'}
              </Button>
            </div>
          </div>
        </div>
      </header>

      {/* Main Content */}
      <div className="container mx-auto px-6 py-8">
        <form onSubmit={form.handleSubmit(onSubmit)}>
          <Tabs defaultValue="client" className="space-y-6" onValueChange={(value) => {
            if (value === 'client' && !showEntryAnimation) {
              // Only trigger borrower animation if not on initial page load
              // Reset to false first to ensure animation can retrigger
              setShowBorrowerAnimation(false);
              requestAnimationFrame(() => {
                setShowBorrowerAnimation(true);
                // Reset animation after it completes so it can trigger again if needed
                setTimeout(() => setShowBorrowerAnimation(false), 1000);
              });
            }
            if (value === 'income') {
              setShowIncomeAnimation(true);
              // Reset animation after it completes so it can trigger again if needed
              setTimeout(() => setShowIncomeAnimation(false), 1000);
            }
            if (value === 'property') {
              setShowPropertyAnimation(true);
              // Reset animation after it completes so it can trigger again if needed
              setTimeout(() => setShowPropertyAnimation(false), 1000);
            }
            if (value === 'loan') {
              setShowLoanCircleAnimation(true);
              // Reset animation after it completes so it can trigger again if needed
              setTimeout(() => setShowLoanCircleAnimation(false), 1000);
            }
          }}>
            <TabsList className="grid w-full grid-cols-9 bg-transparent h-auto p-0 relative border-b border-gray-200 group">
              <TabsTrigger value="client" data-testid="tab-client" className="relative bg-transparent text-gray-700 hover:text-black data-[state=active]:text-blue-900 data-[state=active]:hover:text-blue-900 data-[state=active]:bg-transparent border-0 rounded-none py-3 px-4 font-medium transition-colors duration-200 after:absolute after:bottom-0 after:left-1/2 after:-translate-x-1/2 after:w-0 after:h-px hover:after:bg-green-500 data-[state=active]:after:bg-blue-900 data-[state=active]:hover:after:bg-blue-900 after:transition-all after:duration-300 hover:after:w-1/2 data-[state=active]:after:w-1/2 data-[state=active]:group-hover:after:w-0">Borrower</TabsTrigger>
              <TabsTrigger value="income" data-testid="tab-income" className="relative bg-transparent text-gray-700 hover:text-black data-[state=active]:text-blue-900 data-[state=active]:hover:text-blue-900 data-[state=active]:bg-transparent border-0 rounded-none py-3 px-4 font-medium transition-colors duration-200 after:absolute after:bottom-0 after:left-1/2 after:-translate-x-1/2 after:w-0 after:h-px hover:after:bg-green-500 data-[state=active]:after:bg-blue-900 data-[state=active]:hover:after:bg-blue-900 after:transition-all after:duration-300 hover:after:w-1/2 data-[state=active]:after:w-1/2 data-[state=active]:group-hover:after:w-0">Income</TabsTrigger>
              <TabsTrigger value="property" data-testid="tab-property" className="relative bg-transparent text-gray-700 hover:text-black data-[state=active]:text-blue-900 data-[state=active]:hover:text-blue-900 data-[state=active]:bg-transparent border-0 rounded-none py-3 px-4 font-medium transition-colors duration-200 after:absolute after:bottom-0 after:left-1/2 after:-translate-x-1/2 after:w-0 after:h-px hover:after:bg-green-500 data-[state=active]:after:bg-blue-900 data-[state=active]:hover:after:bg-blue-900 after:transition-all after:duration-300 hover:after:w-1/2 data-[state=active]:after:w-1/2 data-[state=active]:group-hover:after:w-0">Property</TabsTrigger>
              <TabsTrigger value="loan" data-testid="tab-loan" className="relative bg-transparent text-gray-700 hover:text-black data-[state=active]:text-blue-900 data-[state=active]:hover:text-blue-900 data-[state=active]:bg-transparent border-0 rounded-none py-3 px-4 font-medium transition-colors duration-200 after:absolute after:bottom-0 after:left-1/2 after:-translate-x-1/2 after:w-0 after:h-px hover:after:bg-green-500 data-[state=active]:after:bg-blue-900 data-[state=active]:hover:after:bg-blue-900 after:transition-all after:duration-300 hover:after:w-1/2 data-[state=active]:after:w-1/2 data-[state=active]:group-hover:after:w-0">Loan</TabsTrigger>
              <TabsTrigger value="credit" data-testid="tab-credit" className="relative bg-transparent text-gray-700 hover:text-black data-[state=active]:text-blue-900 data-[state=active]:hover:text-blue-900 data-[state=active]:bg-transparent border-0 rounded-none py-3 px-4 font-medium transition-colors duration-200 after:absolute after:bottom-0 after:left-1/2 after:-translate-x-1/2 after:w-0 after:h-px hover:after:bg-green-500 data-[state=active]:after:bg-blue-900 data-[state=active]:hover:after:bg-blue-900 after:transition-all after:duration-300 hover:after:w-1/2 data-[state=active]:after:w-1/2 data-[state=active]:group-hover:after:w-0">Credit</TabsTrigger>
              <TabsTrigger value="status" data-testid="tab-status" className="relative bg-transparent text-gray-700 hover:text-black data-[state=active]:text-blue-900 data-[state=active]:hover:text-blue-900 data-[state=active]:bg-transparent border-0 rounded-none py-3 px-4 font-medium transition-colors duration-200 after:absolute after:bottom-0 after:left-1/2 after:-translate-x-1/2 after:w-0 after:h-px hover:after:bg-green-500 data-[state=active]:after:bg-blue-900 data-[state=active]:hover:after:bg-blue-900 after:transition-all after:duration-300 hover:after:w-1/2 data-[state=active]:after:w-1/2 data-[state=active]:group-hover:after:w-0">Status</TabsTrigger>
              <TabsTrigger value="vendors" data-testid="tab-vendors" className="relative bg-transparent text-gray-700 hover:text-black data-[state=active]:text-blue-900 data-[state=active]:hover:text-blue-900 data-[state=active]:bg-transparent border-0 rounded-none py-3 px-4 font-medium transition-colors duration-200 after:absolute after:bottom-0 after:left-1/2 after:-translate-x-1/2 after:w-0 after:h-px hover:after:bg-green-500 data-[state=active]:after:bg-blue-900 data-[state=active]:hover:after:bg-blue-900 after:transition-all after:duration-300 hover:after:w-1/2 data-[state=active]:after:w-1/2 data-[state=active]:group-hover:after:w-0">Vendors</TabsTrigger>
              <TabsTrigger value="quote" data-testid="tab-quote" className="relative bg-transparent text-gray-700 hover:text-black data-[state=active]:text-blue-900 data-[state=active]:hover:text-blue-900 data-[state=active]:bg-transparent border-0 rounded-none py-3 px-4 font-medium transition-colors duration-200 after:absolute after:bottom-0 after:left-1/2 after:-translate-x-1/2 after:w-0 after:h-px hover:after:bg-green-500 data-[state=active]:after:bg-blue-900 data-[state=active]:hover:after:bg-blue-900 after:transition-all after:duration-300 hover:after:w-1/2 data-[state=active]:after:w-1/2 data-[state=active]:group-hover:after:w-0">Quote</TabsTrigger>
              <TabsTrigger value="notes" data-testid="tab-notes" className="relative bg-transparent text-gray-700 hover:text-black data-[state=active]:text-blue-900 data-[state=active]:hover:text-blue-900 data-[state=active]:bg-transparent border-0 rounded-none py-3 px-4 font-medium transition-colors duration-200 after:absolute after:bottom-0 after:left-1/2 after:-translate-x-1/2 after:w-0 after:h-px hover:after:bg-green-500 data-[state=active]:after:bg-blue-900 data-[state=active]:hover:after:bg-blue-900 after:transition-all after:duration-300 hover:after:w-1/2 data-[state=active]:after:w-1/2 data-[state=active]:group-hover:after:w-0">Notes</TabsTrigger>
            </TabsList>

            {/* Client Tab */}
            <TabsContent value="client" className="space-y-6">
              {/* Lead Information Fields */}
              <Card className={`transition-all duration-700 ${
                showEntryAnimation ? 'animate-roll-down-delayed' : (showBorrowerAnimation ? 'animate-roll-down' : '')
              }`}>
                <CardContent className="grid grid-cols-1 md:grid-cols-6 gap-4 pt-6">
                  <div className="space-y-2 max-w-[75%]">
                    <Label htmlFor="borrower-stage">Stage</Label>
                    <Select
                      value={form.watch('borrower.stage') || 'Lead'}
                      onValueChange={(value) => form.setValue('borrower.stage', value as any)}
                    >
                      <SelectTrigger 
                        data-testid="select-borrower-stage"
                        className={
                          form.watch('borrower.stage') === 'Quote' ? 'text-orange-600' :
                          form.watch('borrower.stage') === 'Funded' ? 'text-green-600' :
                          form.watch('borrower.stage') === 'Audit' ? 'text-blue-600' :
                          form.watch('borrower.stage') === 'Closed' ? 'text-green-600' :
                          form.watch('borrower.stage') === 'Cancel' ? 'text-red-600' :
                          form.watch('borrower.stage') === 'Withdraw' ? 'text-red-600' :
                          ''
                        }
                      >
                        <SelectValue placeholder="Lead" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="Lead">Lead</SelectItem>
                        <SelectItem value="Quote" className="text-orange-600">Quote</SelectItem>
                        <SelectItem value="Loan Prep">Loan Prep</SelectItem>
                        <SelectItem value="Loan">Loan</SelectItem>
                        <SelectItem value="Funded" className="text-green-600">Funded</SelectItem>
                        <SelectItem value="Audit" className="text-blue-600">Audit</SelectItem>
                        <SelectItem value="Closed" className="text-green-600">Closed</SelectItem>
                        <SelectItem value="Cancel" className="text-red-600">Cancel</SelectItem>
                        <SelectItem value="Withdraw" className="text-red-600">Withdraw</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                  
                  <div className="space-y-2 max-w-[75%]">
                    <div className="flex items-center justify-between mb-2">
                      <Label htmlFor="borrower-leadRef" className="text-sm">
                        {isShowingDMBatch ? 'DM Batch' : 'Lead Reference'}
                      </Label>
                      <Switch
                        checked={isShowingDMBatch}
                        onCheckedChange={setIsShowingDMBatch}
                        data-testid="toggle-borrower-leadref"
                        className="scale-[0.8]"
                      />
                    </div>
                    <Input
                      id="borrower-leadRef"
                      {...form.register(isShowingDMBatch ? 'borrower.dmBatch' : 'borrower.leadRef')}
                      placeholder=""
                      data-testid="input-borrower-leadRef"
                    />
                  </div>
                  
                  <div className="space-y-2 max-w-[75%]">
                    <Label htmlFor="borrower-source">Source</Label>
                    <Select
                      value={form.watch('borrower.source') || 'Select'}
                      onValueChange={(value) => form.setValue('borrower.source', value as any)}
                    >
                      <SelectTrigger data-testid="select-borrower-source">
                        <SelectValue placeholder="Select" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="Select">Select</SelectItem>
                        <SelectItem value="Direct Mail">Direct Mail</SelectItem>
                        <SelectItem value="Social Media">Social Media</SelectItem>
                        <SelectItem value="Client Referral">Client Referral</SelectItem>
                        <SelectItem value="Other">Other</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                  
                  <div className="space-y-2 max-w-[75%]">
                    <Label htmlFor="borrower-callDate">Initial Call Date</Label>
                    <Input
                      id="borrower-callDate"
                      value={form.watch('borrower.callDate') || ''}
                      onChange={(e) => {
                        const value = e.target.value.replace(/\D/g, ''); // Remove non-digits
                        let formatted = '';
                        if (value.length > 0) {
                          formatted = value.substring(0, 2);
                          if (value.length > 2) {
                            formatted += '/' + value.substring(2, 4);
                            if (value.length > 4) {
                              formatted += '/' + value.substring(4, 8);
                            }
                          }
                        }
                        form.setValue('borrower.callDate', formatted);
                      }}
                      placeholder="MM/DD/YYYY"
                      maxLength={10}
                      data-testid="input-borrower-callDate"
                    />
                  </div>
                  
                  <div className="space-y-2 max-w-[75%]">
                    <Label htmlFor="borrower-startDate">Loan Start Date</Label>
                    <Input
                      id="borrower-startDate"
                      value={form.watch('borrower.startDate') || ''}
                      onChange={(e) => {
                        const value = e.target.value.replace(/\D/g, ''); // Remove non-digits
                        let formatted = '';
                        if (value.length > 0) {
                          formatted = value.substring(0, 2);
                          if (value.length > 2) {
                            formatted += '/' + value.substring(2, 4);
                            if (value.length > 4) {
                              formatted += '/' + value.substring(4, 8);
                            }
                          }
                        }
                        form.setValue('borrower.startDate', formatted);
                      }}
                      placeholder="MM/DD/YYYY"
                      maxLength={10}
                      data-testid="input-borrower-startDate"
                    />
                  </div>
                  
                  <div className="space-y-2 max-w-[75%]">
                    <Label htmlFor="borrower-loanDuration">Loan Duration</Label>
                    <Input
                      id="borrower-loanDuration"
                      {...form.register('borrower.loanDuration')}
                      placeholder=""
                      data-testid="input-borrower-loanDuration"
                    />
                  </div>
                </CardContent>
              </Card>
              
              {/* Borrower Information */}
              <Card className="border-l-4 border-l-green-500 hover:border-green-500 focus-within:border-green-500 transition-colors duration-200">
                <Collapsible open={isBorrowerOpen} onOpenChange={setIsBorrowerOpen}>
                  <CardHeader>
                    <div className="flex items-center justify-between">
                      <CardTitle>Borrower</CardTitle>
                      <div className="flex items-center gap-2">
                        {!hasCoBorrower ? (
                          <Button
                            type="button"
                            variant="outline"
                            size="sm"
                            onClick={addCoBorrower}
                            className="hover:bg-blue-500 hover:text-white"
                            data-testid="button-add-coborrower-from-borrower"
                          >
                            <Plus className="h-4 w-4 mr-2" />
                            Add Co-Borrower
                          </Button>
                        ) : (
                          <Button
                            type="button"
                            variant="outline"
                            size="sm"
                            onClick={removeCoBorrower}
                            className="hover:bg-red-500 hover:text-white"
                            data-testid="button-remove-coborrower-from-borrower"
                          >
                            Remove Co-Borrower
                          </Button>
                        )}
                        <Tooltip>
                          <TooltipTrigger asChild>
                            <CollapsibleTrigger asChild>
                              <Button 
                                variant="ghost" 
                                size="sm" 
                                className="hover:bg-orange-500 hover:text-black"
                                data-testid="button-toggle-borrower"
                              >
                                {isBorrowerOpen ? <Minus className="h-4 w-4" /> : <Plus className="h-4 w-4" />}
                              </Button>
                            </CollapsibleTrigger>
                          </TooltipTrigger>
                          <TooltipContent>
                            <p>{isBorrowerOpen ? 'Minimize' : 'Expand'}</p>
                          </TooltipContent>
                        </Tooltip>
                      </div>
                    </div>
                  </CardHeader>
                  <CollapsibleContent>
                    <CardContent className="space-y-4">
                  {/* Row 1: First Name, Middle Name (narrower), Last Name, Date of Birth, SSN */}
                  <div className="grid grid-cols-1 md:grid-cols-5 gap-4">
                    <div className="space-y-2">
                      <Label htmlFor="borrower-firstName">First Name</Label>
                      <Input
                        id="borrower-firstName"
                        {...form.register('borrower.firstName')}
                        data-testid="input-borrower-firstName"
                      />
                    </div>
                    
                    <div className="space-y-2">
                      <Label htmlFor="borrower-middleName">Middle Name</Label>
                      <Input
                        id="borrower-middleName"
                        {...form.register('borrower.middleName')}
                        data-testid="input-borrower-middleName"
                      />
                    </div>
                    
                    <div className="space-y-2">
                      <Label htmlFor="borrower-lastName">Last Name</Label>
                      <Input
                        id="borrower-lastName"
                        {...form.register('borrower.lastName')}
                        data-testid="input-borrower-lastName"
                      />
                    </div>
                    
                    <div className="space-y-2">
                      <Label htmlFor="borrower-dateOfBirth">Date of Birth</Label>
                      <Input
                        id="borrower-dateOfBirth"
                        value={form.watch('borrower.dateOfBirth') || ''}
                        onChange={(e) => {
                          const value = e.target.value.replace(/\D/g, ''); // Remove non-digits
                          let formatted = '';
                          if (value.length > 0) {
                            formatted = value.substring(0, 2);
                            if (value.length > 2) {
                              formatted += '/' + value.substring(2, 4);
                              if (value.length > 4) {
                                formatted += '/' + value.substring(4, 8);
                              }
                            }
                          }
                          form.setValue('borrower.dateOfBirth', formatted);
                        }}
                        placeholder="MM/DD/YYYY"
                        maxLength={10}
                        data-testid="input-borrower-dateOfBirth"
                      />
                    </div>
                    
                    <div className="space-y-2">
                      <Label htmlFor="borrower-ssn">SSN</Label>
                      <Input
                        id="borrower-ssn"
                        value={form.watch('borrower.ssn') || ''}
                        onChange={(e) => {
                          const value = e.target.value.replace(/\D/g, '');
                          let formatted = '';
                          if (value.length > 0) {
                            formatted = value.substring(0, 3);
                            if (value.length > 3) {
                              formatted += '-' + value.substring(3, 5);
                              if (value.length > 5) {
                                formatted += '-' + value.substring(5, 9);
                              }
                            }
                          }
                          form.setValue('borrower.ssn', formatted);
                        }}
                        placeholder="XXX-XX-XXXX"
                        maxLength={11}
                        data-testid="input-borrower-ssn"
                      />
                    </div>
                  </div>
                  
                  {/* Row 2: Marital Status, Relationship to Co-Borrower, Phone, Email, Preferred Contact Time */}
                  <div className="grid grid-cols-1 md:grid-cols-5 gap-4">
                    <div className="space-y-2">
                      <Label htmlFor="borrower-maritalStatus">Marital Status</Label>
                      <Select 
                        value={form.watch('borrower.maritalStatus') || 'Select'}
                        onValueChange={(value) => {
                          form.setValue('borrower.maritalStatus', value as any);
                          // Trigger co-borrower popup when married is selected
                          if (value === 'married' && !hasCoBorrower) {
                            setMaritalStatusDialog({ isOpen: true });
                          }
                        }}
                      >
                        <SelectTrigger data-testid="select-borrower-maritalStatus">
                          <SelectValue placeholder="Select" />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="Select">Select</SelectItem>
                          <SelectItem value="single">Single</SelectItem>
                          <SelectItem value="married">Married</SelectItem>
                          <SelectItem value="divorced">Divorced</SelectItem>
                          <SelectItem value="widowed">Widowed</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>

                    <div className="space-y-2">
                      <Label htmlFor="borrower-relationshipToBorrower">Relationship to Co-borrower</Label>
                      <Select 
                        value={form.watch('borrower.relationshipToBorrower') || 'N/A'}
                        onValueChange={(value) => form.setValue('borrower.relationshipToBorrower', value as any)}
                      >
                        <SelectTrigger data-testid="select-borrower-relationshipToBorrower">
                          <SelectValue placeholder="N/A" />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="N/A">N/A</SelectItem>
                          <SelectItem value="spouse">Spouse</SelectItem>
                          <SelectItem value="partner">Partner</SelectItem>
                          <SelectItem value="family">Family</SelectItem>
                          <SelectItem value="friend">Friend</SelectItem>
                          <SelectItem value="other">Other</SelectItem>
                          <SelectItem value="not-applicable">Not Applicable</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>
                    
                    <div className="space-y-2">
                      <Label htmlFor="borrower-phone">Phone</Label>
                      <Input
                        id="borrower-phone"
                        value={form.watch('borrower.phone') || ''}
                        onChange={(e) => {
                          const value = e.target.value.replace(/\D/g, '');
                          let formatted = '';
                          if (value.length > 0) {
                            formatted = value.substring(0, 3);
                            if (value.length > 3) {
                              formatted += '-' + value.substring(3, 6);
                              if (value.length > 6) {
                                formatted += '-' + value.substring(6, 10);
                              }
                            }
                          }
                          form.setValue('borrower.phone', formatted);
                        }}
                        placeholder=""
                        maxLength={12}
                        data-testid="input-borrower-phone"
                      />
                    </div>
                    
                    <div className="space-y-2">
                      <Label htmlFor="borrower-email">Email</Label>
                      <Input
                        id="borrower-email"
                        type="email"
                        {...form.register('borrower.email')}
                        data-testid="input-borrower-email"
                      />
                    </div>
                    
                    <div className="space-y-2">
                      <Label htmlFor="borrower-preferredContactTime">Preferred Contact Time</Label>
                      <Select 
                        value={form.watch('borrower.preferredContactTime') || 'Select'}
                        onValueChange={(value) => form.setValue('borrower.preferredContactTime', value as any)}
                      >
                        <SelectTrigger data-testid="select-borrower-preferredContactTime">
                          <SelectValue placeholder="Select" />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="Select">Select</SelectItem>
                          <SelectItem value="Morning">Morning</SelectItem>
                          <SelectItem value="Afternoon">Afternoon</SelectItem>
                          <SelectItem value="Evening">Evening</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>
                  </div>

                  {/* Extra spacing row */}
                  <div className="grid grid-cols-1 md:grid-cols-5 gap-4">
                  </div>

                  {/* Row 3 */}
                  <div className="grid grid-cols-1 md:grid-cols-5 gap-4 mt-10">
                    <div className="space-y-2 flex items-center gap-2">
                      <Label htmlFor="borrower-firstName" className="text-xl">Current Residence</Label>
                      {(form.watch('borrower.currentResidenceType') === 'rental' || form.watch('borrower.currentResidenceType') === 'other') && (
                        <Info 
                          className="w-4 h-4 text-blue-500 cursor-pointer hover:text-blue-600 transition-colors" 
                          data-testid="icon-current-residence-info"
                          onClick={() => {
                            const residenceType = form.watch('borrower.currentResidenceType');
                            if (residenceType === 'rental') {
                              setActiveRentalSection('borrower-current');
                              const savedData = form.getValues('borrower.residenceAddress.rentalInfo') || {};
                              setRentalInfoData({
                                landlordName: savedData.landlordName || '',
                                email: savedData.email || '',
                                phone: savedData.phone || '',
                                propertyType: savedData.propertyType || '',
                                monthlyRent: savedData.monthlyRent || '',
                                notes: savedData.notes || ''
                              });
                              setIsRentalInfoDialogOpen(true);
                            } else {
                              setActiveResidenceSection('borrower-current');
                              setResidenceInfoText(form.getValues('borrower.residenceAddress.additionalInfo') || '');
                              setIsResidenceInfoDialogOpen(true);
                            }
                          }}
                        />
                      )}
                    </div>
                    <div className="flex items-center gap-4 ml-1">
                      <button
                        type="button"
                        onClick={() => form.setValue('borrower.currentResidenceType', 'owned')}
                        className="flex items-center gap-1.5 group"
                        data-testid="button-current-residence-owned"
                      >
                        <div className={`w-3 h-3 rounded-full transition-colors ${
                          form.watch('borrower.currentResidenceType') === 'owned' 
                            ? 'bg-purple-500' 
                            : 'border border-gray-400 bg-white hover:border-purple-400'
                        }`}>
                        </div>
                        <span className="text-sm font-medium">Owned</span>
                      </button>
                      <button
                        type="button"
                        onClick={() => form.setValue('borrower.currentResidenceType', 'rental')}
                        className="flex items-center gap-1.5 group"
                        data-testid="button-current-residence-rental"
                      >
                        <div className={`w-3 h-3 rounded-full transition-colors ${
                          form.watch('borrower.currentResidenceType') === 'rental' 
                            ? 'bg-purple-500' 
                            : 'border border-gray-400 bg-white hover:border-purple-400'
                        }`}>
                        </div>
                        <span className="text-sm font-medium">Rental</span>
                      </button>
                      <button
                        type="button"
                        onClick={() => form.setValue('borrower.currentResidenceType', 'other')}
                        className="flex items-center gap-1.5 group"
                        data-testid="button-current-residence-other"
                      >
                        <div className={`w-3 h-3 rounded-full transition-colors ${
                          form.watch('borrower.currentResidenceType') === 'other' 
                            ? 'bg-purple-500' 
                            : 'border border-gray-400 bg-white hover:border-purple-400'
                        }`}>
                        </div>
                        <span className="text-sm font-medium">Other</span>
                      </button>
                    </div>
                  </div>

                  {/* Grey Background Box - Complete Address Row from Borrower Residence */}
                  <Card className={`bg-muted mt-8 ${
                    showIncomeCardAnimation['borrower-employment'] ? 'animate-roll-down-subject-property' : ''
                  }`}>
                    <CardContent className="pt-6">
                      <div className="grid grid-cols-1 md:grid-cols-12 gap-4">
                        <div className="space-y-2 md:col-span-3">
                          <Label htmlFor="borrower-residence-street">Street Address</Label>
                          <Input
                            id="borrower-residence-street"
                            {...form.register('borrower.residenceAddress.street', {
                              onChange: () => setTimeout(() => autoCopyBorrowerAddressToPrimaryProperty(), 100)
                            })}
                            data-testid="input-borrower-residence-street"
                          />
                        </div>
                        
                        <div className="space-y-2 md:col-span-1">
                          <Label htmlFor="borrower-residence-unit">Unit/Apt</Label>
                          <Input
                            id="borrower-residence-unit"
                            {...form.register('borrower.residenceAddress.unit', {
                              onChange: () => setTimeout(() => autoCopyBorrowerAddressToPrimaryProperty(), 100)
                            })}
                            data-testid="input-borrower-residence-unit"
                          />
                        </div>
                        
                        <div className="space-y-2 md:col-span-2">
                          <Label htmlFor="borrower-residence-city">City</Label>
                          <Input
                            id="borrower-residence-city"
                            {...form.register('borrower.residenceAddress.city', {
                              onChange: () => setTimeout(() => autoCopyBorrowerAddressToPrimaryProperty(), 100)
                            })}
                            data-testid="input-borrower-residence-city"
                          />
                        </div>
                        
                        <div className="space-y-2 md:col-span-1">
                          <Label htmlFor="borrower-residence-state">State</Label>
                          <Select
                            value={form.watch('borrower.residenceAddress.state') || ''}
                            onValueChange={(value) => {
                              form.setValue('borrower.residenceAddress.state', value);
                              setTimeout(() => autoCopyBorrowerAddressToPrimaryProperty(), 100);
                            }}
                          >
                            <SelectTrigger data-testid="select-borrower-residence-state">
                              <SelectValue placeholder="State" />
                            </SelectTrigger>
                            <SelectContent>
                              {US_STATES.map((state) => (
                                <SelectItem key={state.value} value={state.value}>
                                  {state.value}
                                </SelectItem>
                              ))}
                            </SelectContent>
                          </Select>
                        </div>
                        
                        <div className="space-y-2 md:col-span-1">
                          <Label htmlFor="borrower-residence-zip">ZIP Code</Label>
                          <Input
                            id="borrower-residence-zip"
                            {...form.register('borrower.residenceAddress.zip', {
                              onChange: () => setTimeout(() => autoCopyBorrowerAddressToPrimaryProperty(), 100)
                            })}
                            onBlur={(e) => handleBorrowerZipCodeLookup(e.target.value)}
                            data-testid="input-borrower-residence-zip"
                          />
                        </div>
                        
                        <div className="space-y-2 md:col-span-1">
                          <Label htmlFor="borrower-residence-county">County</Label>
                          {borrowerCountyOptions.length > 0 ? (
                            <Select
                              value={form.watch('borrower.residenceAddress.county') || ''}
                              onValueChange={(value) => {
                                if (value === 'manual-entry') {
                                  form.setValue('borrower.residenceAddress.county', '');
                                  setBorrowerCountyOptions([]);
                                } else {
                                  // Find the selected county to get its label for display
                                  const selectedCounty = borrowerCountyOptions.find(county => county.value === value);
                                  form.setValue('borrower.residenceAddress.county', selectedCounty?.label || value, { shouldDirty: true });
                                }
                              }}
                            >
                              <SelectTrigger data-testid="select-borrower-residence-county">
                                <SelectValue placeholder={countyLookupLoading.borrower ? "Looking up counties..." : "Select county"} />
                              </SelectTrigger>
                              <SelectContent>
                                {borrowerCountyOptions.map((county) => (
                                  <SelectItem key={county.value} value={county.value}>
                                    {county.label}
                                  </SelectItem>
                                ))}
                                <SelectItem value="manual-entry" className="text-muted-foreground border-t">
                                  Enter county manually
                                </SelectItem>
                              </SelectContent>
                            </Select>
                          ) : (
                            <Input
                              id="borrower-residence-county"
                              {...form.register('borrower.residenceAddress.county')}
                              placeholder={countyLookupLoading.borrower ? "Looking up counties..." : ""}
                              disabled={countyLookupLoading.borrower}
                              data-testid="input-borrower-residence-county"
                            />
                          )}
                        </div>
                        
                        <div className="space-y-2 md:col-span-1">
                          <Label htmlFor="borrower-residence-from">From</Label>
                          <Input
                            id="borrower-residence-from"
                            type="text"
                            placeholder="mm/dd/yyyy"
                            {...form.register('borrower.residenceAddress.from')}
                            onChange={(e) => {
                              const input = e.target.value;
                              const currentValue = form.getValues('borrower.residenceAddress.from') || '';
                              
                              // If input is empty or being deleted, allow it
                              if (input.length === 0) {
                                form.setValue('borrower.residenceAddress.from', '');
                                return;
                              }
                              
                              // If user is deleting (input shorter than current), just update without formatting
                              if (input.length < currentValue.length) {
                                form.setValue('borrower.residenceAddress.from', input);
                                return;
                              }
                              
                              // Otherwise, apply formatting
                              let value = input.replace(/\D/g, ''); // Remove non-digits
                              if (value.length >= 2) {
                                value = value.slice(0, 2) + '/' + value.slice(2);
                              }
                              if (value.length >= 5) {
                                value = value.slice(0, 5) + '/' + value.slice(5);
                              }
                              value = value.slice(0, 10); // Limit to mm/dd/yyyy
                              form.setValue('borrower.residenceAddress.from', value);
                            }}
                            data-testid="input-borrower-residence-from"
                            className="!text-[13px] placeholder:text-[10px]"
                          />
                        </div>
                        
                        <div className="space-y-2 md:col-span-1">
                          <div className="flex items-center justify-between mb-2">
                            <Label htmlFor="borrower-residence-to" className="text-sm">
                              {isBorrowerCurrentResidencePresent ? 'Present' : 'To'}
                            </Label>
                            <Switch
                              checked={isBorrowerCurrentResidencePresent}
                              onCheckedChange={(checked) => {
                                setIsBorrowerCurrentResidencePresent(checked);
                                if (checked) {
                                  // Set to "Present" and store current date for calculations
                                  form.setValue('borrower.residenceAddress.to', 'Present');
                                } else {
                                  // Clear the field when toggled off
                                  form.setValue('borrower.residenceAddress.to', '');
                                }
                              }}
                              data-testid="toggle-borrower-residence-present"
                              className="scale-[0.8]"
                            />
                          </div>
                          <Input
                            id="borrower-residence-to"
                            type="text"
                            placeholder="mm/dd/yyyy"
                            value={isBorrowerCurrentResidencePresent ? 'Present' : form.watch('borrower.residenceAddress.to') || ''}
                            onChange={(e) => {
                              if (isBorrowerCurrentResidencePresent) return; // Disable editing when Present
                              
                              const input = e.target.value;
                              const currentValue = form.getValues('borrower.residenceAddress.to') || '';
                              
                              // If input is empty or being deleted, allow it
                              if (input.length === 0) {
                                form.setValue('borrower.residenceAddress.to', '');
                                return;
                              }
                              
                              // If user is deleting (input shorter than current), just update without formatting
                              if (input.length < currentValue.length) {
                                form.setValue('borrower.residenceAddress.to', input);
                                return;
                              }
                              
                              // Otherwise, apply formatting
                              let value = input.replace(/\D/g, ''); // Remove non-digits
                              if (value.length >= 2) {
                                value = value.slice(0, 2) + '/' + value.slice(2);
                              }
                              if (value.length >= 5) {
                                value = value.slice(0, 5) + '/' + value.slice(5);
                              }
                              value = value.slice(0, 10); // Limit to mm/dd/yyyy
                              form.setValue('borrower.residenceAddress.to', value);
                            }}
                            data-testid="input-borrower-residence-to"
                            className="!text-[13px] placeholder:text-[10px]"
                            readOnly={isBorrowerCurrentResidencePresent}
                          />
                        </div>
                        
                        <div className="space-y-2 md:col-span-1">
                          <Label htmlFor="borrower-time-address" className="text-sm">
                            Duration
                          </Label>
                          <BorrowerResidenceTimeCalculator control={form.control} setValue={form.setValue} />
                        </div>
                      </div>
                    </CardContent>
                  </Card>

                  {/* Prior Residence - Show if less than 2 years at current address */}
                  {(() => {
                    const yearsValue = form.watch('borrower.yearsAtAddress');
                    const monthsValue = form.watch('borrower.monthsAtAddress');
                    
                    // Check if any time value has been entered
                    const hasYears = yearsValue && String(yearsValue).trim() !== '';
                    const hasMonths = monthsValue && String(monthsValue).trim() !== '';
                    
                    if (!hasYears && !hasMonths) {
                      return false; // No time values entered, hide section
                    }
                    
                    // Calculate total months at current address
                    const years = hasYears ? parseInt(String(yearsValue)) : 0;
                    const months = hasMonths ? parseInt(String(monthsValue)) : 0;
                    const totalMonths = (isNaN(years) ? 0 : years) * 12 + (isNaN(months) ? 0 : months);
                    
                    return totalMonths < 24; // Show if less than 2 years (24 months) total
                  })() && (
                    <>
                      {/* Extra spacing row */}
                      <div className="grid grid-cols-1 md:grid-cols-5 gap-4">
                      </div>

                      {/* Row for Prior Residence Title */}
                      <div className="grid grid-cols-1 md:grid-cols-5 gap-4 mt-10">
                        <div className="space-y-2 flex items-center gap-2">
                          <Label htmlFor="borrower-prior-residence" className="text-xl">Prior Residence</Label>
                          {(form.watch('borrower.priorResidenceType') === 'rental' || form.watch('borrower.priorResidenceType') === 'other') && (
                            <Info 
                              className="w-4 h-4 text-blue-500 cursor-pointer hover:text-blue-600 transition-colors" 
                              data-testid="icon-prior-residence-info"
                              onClick={() => {
                                const residenceType = form.watch('borrower.priorResidenceType');
                                if (residenceType === 'rental') {
                                  setActiveRentalSection('borrower-prior');
                                  const savedData = form.getValues('borrower.priorResidenceAddress.rentalInfo') || {};
                                  setRentalInfoData({
                                    landlordName: savedData.landlordName || '',
                                    email: savedData.email || '',
                                    phone: savedData.phone || '',
                                    propertyType: savedData.propertyType || '',
                                    monthlyRent: savedData.monthlyRent || '',
                                    notes: savedData.notes || ''
                                  });
                                  setIsRentalInfoDialogOpen(true);
                                } else {
                                  setActiveResidenceSection('borrower-prior');
                                  setResidenceInfoText(form.getValues('borrower.priorResidenceAddress.additionalInfo') || '');
                                  setIsResidenceInfoDialogOpen(true);
                                }
                              }}
                            />
                          )}
                        </div>
                        <div className="flex items-center gap-4 ml-1">
                          <button
                            type="button"
                            onClick={() => form.setValue('borrower.priorResidenceType', 'owned')}
                            className="flex items-center gap-1.5 group"
                            data-testid="button-prior-residence-owned"
                          >
                            <div className={`w-3 h-3 rounded-full transition-colors ${
                              form.watch('borrower.priorResidenceType') === 'owned' 
                                ? 'bg-purple-500' 
                                : 'border border-gray-400 bg-white hover:border-purple-400'
                            }`}>
                            </div>
                            <span className="text-sm font-medium">Owned</span>
                          </button>
                          <button
                            type="button"
                            onClick={() => form.setValue('borrower.priorResidenceType', 'rental')}
                            className="flex items-center gap-1.5 group"
                            data-testid="button-prior-residence-rental"
                          >
                            <div className={`w-3 h-3 rounded-full transition-colors ${
                              form.watch('borrower.priorResidenceType') === 'rental' 
                                ? 'bg-purple-500' 
                                : 'border border-gray-400 bg-white hover:border-purple-400'
                            }`}>
                            </div>
                            <span className="text-sm font-medium">Rental</span>
                          </button>
                          <button
                            type="button"
                            onClick={() => form.setValue('borrower.priorResidenceType', 'other')}
                            className="flex items-center gap-1.5 group"
                            data-testid="button-prior-residence-other"
                          >
                            <div className={`w-3 h-3 rounded-full transition-colors ${
                              form.watch('borrower.priorResidenceType') === 'other' 
                                ? 'bg-purple-500' 
                                : 'border border-gray-400 bg-white hover:border-purple-400'
                            }`}>
                            </div>
                            <span className="text-sm font-medium">Other</span>
                          </button>
                        </div>
                      </div>

                      {/* Grey Background Box - Prior Residence */}
                      <Card className={`bg-muted mt-8 ${
                        showIncomeCardAnimation['borrower-employment'] ? 'animate-roll-down-subject-property' : ''
                      }`}>
                        <CardContent className="pt-6">
                          <div className="grid grid-cols-1 md:grid-cols-12 gap-4">
                            <div className="space-y-2 md:col-span-3">
                              <Label htmlFor="borrower-residence-street">Street Address</Label>
                              <Input
                                id="borrower-residence-street"
                                {...form.register('borrower.residenceAddress.street', {
                                  onChange: () => setTimeout(() => autoCopyBorrowerAddressToPrimaryProperty(), 100)
                                })}
                                data-testid="input-borrower-residence-street"
                              />
                            </div>
                            
                            <div className="space-y-2 md:col-span-1">
                              <Label htmlFor="borrower-residence-unit">Unit/Apt</Label>
                              <Input
                                id="borrower-residence-unit"
                                {...form.register('borrower.residenceAddress.unit', {
                                  onChange: () => setTimeout(() => autoCopyBorrowerAddressToPrimaryProperty(), 100)
                                })}
                                data-testid="input-borrower-residence-unit"
                              />
                            </div>
                            
                            <div className="space-y-2 md:col-span-2">
                              <Label htmlFor="borrower-residence-city">City</Label>
                              <Input
                                id="borrower-residence-city"
                                {...form.register('borrower.residenceAddress.city', {
                                  onChange: () => setTimeout(() => autoCopyBorrowerAddressToPrimaryProperty(), 100)
                                })}
                                data-testid="input-borrower-residence-city"
                              />
                            </div>
                            
                            <div className="space-y-2 md:col-span-1">
                              <Label htmlFor="borrower-residence-state">State</Label>
                              <Select
                                value={form.watch('borrower.residenceAddress.state') || ''}
                                onValueChange={(value) => {
                                  form.setValue('borrower.residenceAddress.state', value);
                                  setTimeout(() => autoCopyBorrowerAddressToPrimaryProperty(), 100);
                                }}
                              >
                                <SelectTrigger data-testid="select-borrower-residence-state">
                                  <SelectValue placeholder="State" />
                                </SelectTrigger>
                                <SelectContent>
                                  {US_STATES.map((state) => (
                                    <SelectItem key={state.value} value={state.value}>
                                      {state.value}
                                    </SelectItem>
                                  ))}
                                </SelectContent>
                              </Select>
                            </div>
                            
                            <div className="space-y-2 md:col-span-1">
                              <Label htmlFor="borrower-residence-zip">ZIP Code</Label>
                              <Input
                                id="borrower-residence-zip"
                                {...form.register('borrower.residenceAddress.zip', {
                                  onChange: () => setTimeout(() => autoCopyBorrowerAddressToPrimaryProperty(), 100)
                                })}
                                onBlur={(e) => handleBorrowerZipCodeLookup(e.target.value)}
                                data-testid="input-borrower-residence-zip"
                              />
                            </div>
                            
                            <div className="space-y-2 md:col-span-1">
                              <Label htmlFor="borrower-residence-county">County</Label>
                              {borrowerCountyOptions.length > 0 ? (
                                <Select
                                  value={form.watch('borrower.residenceAddress.county') || ''}
                                  onValueChange={(value) => {
                                    if (value === 'manual-entry') {
                                      form.setValue('borrower.residenceAddress.county', '');
                                      setBorrowerCountyOptions([]);
                                    } else {
                                      // Find the selected county to get its label for display
                                      const selectedCounty = borrowerCountyOptions.find(county => county.value === value);
                                      form.setValue('borrower.residenceAddress.county', selectedCounty?.label || value, { shouldDirty: true });
                                    }
                                  }}
                                >
                                  <SelectTrigger data-testid="select-borrower-residence-county">
                                    <SelectValue placeholder={countyLookupLoading.borrower ? "Looking up counties..." : "Select county"} />
                                  </SelectTrigger>
                                  <SelectContent>
                                    {borrowerCountyOptions.map((county) => (
                                      <SelectItem key={county.value} value={county.value}>
                                        {county.label}
                                      </SelectItem>
                                    ))}
                                    <SelectItem value="manual-entry" className="text-muted-foreground border-t">
                                      Enter county manually
                                    </SelectItem>
                                  </SelectContent>
                                </Select>
                              ) : (
                                <Input
                                  id="borrower-residence-county"
                                  {...form.register('borrower.residenceAddress.county')}
                                  placeholder={countyLookupLoading.borrower ? "Looking up counties..." : ""}
                                  disabled={countyLookupLoading.borrower}
                                  data-testid="input-borrower-residence-county"
                                />
                              )}
                            </div>
                            
                            <div className="space-y-2 md:col-span-1">
                              <Label htmlFor="borrower-prior-residence-from">From</Label>
                              <Input
                                id="borrower-prior-residence-from"
                                type="text"
                                placeholder="mm/dd/yyyy"
                                {...form.register('borrower.priorResidenceAddress.from')}
                                onChange={(e) => {
                                  const input = e.target.value;
                                  const currentValue = form.getValues('borrower.priorResidenceAddress.from') || '';
                                  
                                  // If input is empty or being deleted, allow it
                                  if (input.length === 0) {
                                    form.setValue('borrower.priorResidenceAddress.from', '');
                                    return;
                                  }
                                  
                                  // If user is deleting (input shorter than current), just update without formatting
                                  if (input.length < currentValue.length) {
                                    form.setValue('borrower.priorResidenceAddress.from', input);
                                    return;
                                  }
                                  
                                  // Otherwise, apply formatting
                                  let value = input.replace(/\D/g, ''); // Remove non-digits
                                  if (value.length >= 2) {
                                    value = value.slice(0, 2) + '/' + value.slice(2);
                                  }
                                  if (value.length >= 5) {
                                    value = value.slice(0, 5) + '/' + value.slice(5);
                                  }
                                  value = value.slice(0, 10); // Limit to mm/dd/yyyy
                                  form.setValue('borrower.priorResidenceAddress.from', value);
                                }}
                                data-testid="input-borrower-prior-residence-from"
                                className="!text-[13px] placeholder:text-[10px]"
                              />
                            </div>
                            
                            <div className="space-y-2 md:col-span-1">
                              <Label htmlFor="borrower-prior-residence-to">To</Label>
                              <Input
                                id="borrower-prior-residence-to"
                                type="text"
                                placeholder="mm/dd/yyyy"
                                {...form.register('borrower.priorResidenceAddress.to')}
                                onChange={(e) => {
                                  const input = e.target.value;
                                  const currentValue = form.getValues('borrower.priorResidenceAddress.to') || '';
                                  
                                  // If input is empty or being deleted, allow it
                                  if (input.length === 0) {
                                    form.setValue('borrower.priorResidenceAddress.to', '');
                                    return;
                                  }
                                  
                                  // If user is deleting (input shorter than current), just update without formatting
                                  if (input.length < currentValue.length) {
                                    form.setValue('borrower.priorResidenceAddress.to', input);
                                    return;
                                  }
                                  
                                  // Otherwise, apply formatting
                                  let value = input.replace(/\D/g, ''); // Remove non-digits
                                  if (value.length >= 2) {
                                    value = value.slice(0, 2) + '/' + value.slice(2);
                                  }
                                  if (value.length >= 5) {
                                    value = value.slice(0, 5) + '/' + value.slice(5);
                                  }
                                  value = value.slice(0, 10); // Limit to mm/dd/yyyy
                                  form.setValue('borrower.priorResidenceAddress.to', value);
                                }}
                                data-testid="input-borrower-prior-residence-to"
                                className="!text-[13px] placeholder:text-[10px]"
                              />
                            </div>
                            
                            <div className="space-y-2 md:col-span-1">
                              <Label htmlFor="borrower-prior-time-address" className="text-sm">
                                Duration
                              </Label>
                              <BorrowerPriorResidenceTimeCalculator control={form.control} setValue={form.setValue} />
                            </div>
                          </div>
                        </CardContent>
                      </Card>
                    </>
                  )}

                  {/* Second Prior Residence - Show if combined current + first prior is less than 2 years */}
                  {(() => {
                    const currentYearsValue = form.watch('borrower.yearsAtAddress');
                    const currentMonthsValue = form.watch('borrower.monthsAtAddress');
                    const priorYearsValue = form.watch('borrower.priorYearsAtAddress');
                    const priorMonthsValue = form.watch('borrower.priorMonthsAtAddress');
                    
                    // Check if any time value has been entered in current residence
                    const hasCurrentYears = currentYearsValue && String(currentYearsValue).trim() !== '';
                    const hasCurrentMonths = currentMonthsValue && String(currentMonthsValue).trim() !== '';
                    
                    if (!hasCurrentYears && !hasCurrentMonths) {
                      return false; // No time values entered in current, hide section
                    }
                    
                    // Check if any time value has been entered in first prior residence
                    const hasPriorYears = priorYearsValue && String(priorYearsValue).trim() !== '';
                    const hasPriorMonths = priorMonthsValue && String(priorMonthsValue).trim() !== '';
                    
                    if (!hasPriorYears && !hasPriorMonths) {
                      return false; // No time values entered in first prior, hide second prior
                    }
                    
                    // Calculate total months from current address (use parseFloat to handle decimals)
                    let currentTotalMonths = 0;
                    if (hasCurrentYears) {
                      const currentYears = parseFloat(String(currentYearsValue));
                      currentTotalMonths = (isNaN(currentYears) ? 0 : currentYears) * 12;
                    } else if (hasCurrentMonths) {
                      const currentMonths = parseFloat(String(currentMonthsValue));
                      currentTotalMonths = isNaN(currentMonths) ? 0 : currentMonths;
                    }
                    
                    // Calculate total months from first prior address (use parseFloat to handle decimals)
                    let priorTotalMonths = 0;
                    if (hasPriorYears) {
                      const priorYears = parseFloat(String(priorYearsValue));
                      priorTotalMonths = (isNaN(priorYears) ? 0 : priorYears) * 12;
                    } else if (hasPriorMonths) {
                      const priorMonths = parseFloat(String(priorMonthsValue));
                      priorTotalMonths = isNaN(priorMonths) ? 0 : priorMonths;
                    }
                    
                    // Combined total
                    const combinedTotalMonths = currentTotalMonths + priorTotalMonths;
                    
                    return combinedTotalMonths < 24; // Show if combined is less than 2 years (24 months) total
                  })() && (
                    <>
                      {/* Extra spacing row */}
                      <div className="grid grid-cols-1 md:grid-cols-5 gap-4">
                      </div>

                      {/* Row for Second Prior Residence Title */}
                      <div className="grid grid-cols-1 md:grid-cols-5 gap-4 mt-10">
                        <div className="space-y-2 flex items-center gap-2">
                          <Label htmlFor="borrower-prior-residence-2" className="text-xl">Prior Residence</Label>
                          {(form.watch('borrower.priorResidenceType2') === 'rental' || form.watch('borrower.priorResidenceType2') === 'other') && (
                            <Info 
                              className="w-4 h-4 text-blue-500 cursor-pointer hover:text-blue-600 transition-colors" 
                              data-testid="icon-prior-residence-2-info"
                              onClick={() => {
                                const residenceType = form.watch('borrower.priorResidenceType2');
                                if (residenceType === 'rental') {
                                  setActiveRentalSection('borrower-prior-2');
                                  const savedData = form.getValues('borrower.priorResidenceAddress2.rentalInfo') || {};
                                  setRentalInfoData({
                                    landlordName: savedData.landlordName || '',
                                    email: savedData.email || '',
                                    phone: savedData.phone || '',
                                    propertyType: savedData.propertyType || '',
                                    monthlyRent: savedData.monthlyRent || '',
                                    notes: savedData.notes || ''
                                  });
                                  setIsRentalInfoDialogOpen(true);
                                } else {
                                  setActiveResidenceSection('borrower-prior-2');
                                  setResidenceInfoText(form.getValues('borrower.priorResidenceAddress2.additionalInfo') || '');
                                  setIsResidenceInfoDialogOpen(true);
                                }
                              }}
                            />
                          )}
                        </div>
                        <div className="flex items-center gap-4 ml-1">
                          <button
                            type="button"
                            onClick={() => form.setValue('borrower.priorResidenceType2', 'owned')}
                            className="flex items-center gap-1.5 group"
                            data-testid="button-prior-residence-2-owned"
                          >
                            <div className={`w-3 h-3 rounded-full transition-colors ${
                              form.watch('borrower.priorResidenceType2') === 'owned' 
                                ? 'bg-purple-500' 
                                : 'border border-gray-400 bg-white hover:border-purple-400'
                            }`}>
                            </div>
                            <span className="text-sm font-medium">Owned</span>
                          </button>
                          <button
                            type="button"
                            onClick={() => form.setValue('borrower.priorResidenceType2', 'rental')}
                            className="flex items-center gap-1.5 group"
                            data-testid="button-prior-residence-2-rental"
                          >
                            <div className={`w-3 h-3 rounded-full transition-colors ${
                              form.watch('borrower.priorResidenceType2') === 'rental' 
                                ? 'bg-purple-500' 
                                : 'border border-gray-400 bg-white hover:border-purple-400'
                            }`}>
                            </div>
                            <span className="text-sm font-medium">Rental</span>
                          </button>
                          <button
                            type="button"
                            onClick={() => form.setValue('borrower.priorResidenceType2', 'other')}
                            className="flex items-center gap-1.5 group"
                            data-testid="button-prior-residence-2-other"
                          >
                            <div className={`w-3 h-3 rounded-full transition-colors ${
                              form.watch('borrower.priorResidenceType2') === 'other' 
                                ? 'bg-purple-500' 
                                : 'border border-gray-400 bg-white hover:border-purple-400'
                            }`}>
                            </div>
                            <span className="text-sm font-medium">Other</span>
                          </button>
                        </div>
                      </div>

                      {/* Grey Background Box - Second Prior Residence */}
                      <Card className={`bg-muted mt-8 ${
                        showIncomeCardAnimation['borrower-employment'] ? 'animate-roll-down-subject-property' : ''
                      }`}>
                        <CardContent className="pt-6">
                          <div className="grid grid-cols-1 md:grid-cols-12 gap-4">
                            <div className="space-y-2 md:col-span-3">
                              <Label htmlFor="borrower-residence-street-2">Street Address</Label>
                              <Input
                                id="borrower-residence-street-2"
                                {...form.register('borrower.priorResidenceAddress2.street')}
                                data-testid="input-borrower-residence-street-2"
                              />
                            </div>
                            
                            <div className="space-y-2 md:col-span-1">
                              <Label htmlFor="borrower-residence-unit-2">Unit/Apt</Label>
                              <Input
                                id="borrower-residence-unit-2"
                                {...form.register('borrower.priorResidenceAddress2.unit')}
                                data-testid="input-borrower-residence-unit-2"
                              />
                            </div>
                            
                            <div className="space-y-2 md:col-span-2">
                              <Label htmlFor="borrower-residence-city-2">City</Label>
                              <Input
                                id="borrower-residence-city-2"
                                {...form.register('borrower.priorResidenceAddress2.city')}
                                data-testid="input-borrower-residence-city-2"
                              />
                            </div>
                            
                            <div className="space-y-2 md:col-span-1">
                              <Label htmlFor="borrower-residence-state-2">State</Label>
                              <Select
                                value={form.watch('borrower.priorResidenceAddress2.state') || ''}
                                onValueChange={(value) => {
                                  form.setValue('borrower.priorResidenceAddress2.state', value);
                                }}
                              >
                                <SelectTrigger data-testid="select-borrower-residence-state-2">
                                  <SelectValue placeholder="State" />
                                </SelectTrigger>
                                <SelectContent>
                                  {US_STATES.map((state) => (
                                    <SelectItem key={state.value} value={state.value}>
                                      {state.value}
                                    </SelectItem>
                                  ))}
                                </SelectContent>
                              </Select>
                            </div>
                            
                            <div className="space-y-2 md:col-span-1">
                              <Label htmlFor="borrower-residence-zip-2">ZIP Code</Label>
                              <Input
                                id="borrower-residence-zip-2"
                                {...form.register('borrower.priorResidenceAddress2.zip')}
                                data-testid="input-borrower-residence-zip-2"
                              />
                            </div>
                            
                            <div className="space-y-2 md:col-span-1">
                              <Label htmlFor="borrower-residence-county-2">County</Label>
                              <Input
                                id="borrower-residence-county-2"
                                {...form.register('borrower.priorResidenceAddress2.county')}
                                data-testid="input-borrower-residence-county-2"
                              />
                            </div>
                            
                            <div className="space-y-2 md:col-span-1">
                              <Label htmlFor="borrower-prior-residence-from-2">From</Label>
                              <Input
                                id="borrower-prior-residence-from-2"
                                type="text"
                                placeholder="mm/dd/yyyy"
                                {...form.register('borrower.priorResidenceAddress2.from')}
                                onChange={(e) => {
                                  const input = e.target.value;
                                  const currentValue = form.getValues('borrower.priorResidenceAddress2.from') || '';
                                  
                                  if (input.length === 0) {
                                    form.setValue('borrower.priorResidenceAddress2.from', '');
                                    return;
                                  }
                                  
                                  if (input.length < currentValue.length) {
                                    form.setValue('borrower.priorResidenceAddress2.from', input);
                                    return;
                                  }
                                  
                                  let value = input.replace(/\D/g, '');
                                  if (value.length >= 2) {
                                    value = value.slice(0, 2) + '/' + value.slice(2);
                                  }
                                  if (value.length >= 5) {
                                    value = value.slice(0, 5) + '/' + value.slice(5);
                                  }
                                  value = value.slice(0, 10);
                                  form.setValue('borrower.priorResidenceAddress2.from', value);
                                }}
                                data-testid="input-borrower-prior-residence-from-2"
                                className="!text-[13px] placeholder:text-[10px]"
                              />
                            </div>
                            
                            <div className="space-y-2 md:col-span-1">
                              <Label htmlFor="borrower-prior-residence-to-2">To</Label>
                              <Input
                                id="borrower-prior-residence-to-2"
                                type="text"
                                placeholder="mm/dd/yyyy"
                                {...form.register('borrower.priorResidenceAddress2.to')}
                                onChange={(e) => {
                                  const input = e.target.value;
                                  const currentValue = form.getValues('borrower.priorResidenceAddress2.to') || '';
                                  
                                  if (input.length === 0) {
                                    form.setValue('borrower.priorResidenceAddress2.to', '');
                                    return;
                                  }
                                  
                                  if (input.length < currentValue.length) {
                                    form.setValue('borrower.priorResidenceAddress2.to', input);
                                    return;
                                  }
                                  
                                  let value = input.replace(/\D/g, '');
                                  if (value.length >= 2) {
                                    value = value.slice(0, 2) + '/' + value.slice(2);
                                  }
                                  if (value.length >= 5) {
                                    value = value.slice(0, 5) + '/' + value.slice(5);
                                  }
                                  value = value.slice(0, 10);
                                  form.setValue('borrower.priorResidenceAddress2.to', value);
                                }}
                                data-testid="input-borrower-prior-residence-to-2"
                                className="!text-[13px] placeholder:text-[10px]"
                              />
                            </div>
                            
                            <div className="space-y-2 md:col-span-1">
                              <Label htmlFor="borrower-prior-time-address-2" className="text-sm">
                                Duration
                              </Label>
                              <BorrowerPriorResidence2TimeCalculator control={form.control} setValue={form.setValue} />
                            </div>
                          </div>
                        </CardContent>
                      </Card>
                    </>
                  )}
                  </CardContent>
                  </CollapsibleContent>
                </Collapsible>
              </Card>

              {/* Additional Prior Addresses for Borrower */}
              {borrowerPriorAddresses.map((address, index) => (
                <Card key={address.id}>
                  <CardHeader className="flex flex-row items-center justify-between">
                    <CardTitle>Borrower - Prior Residence {index + 2}</CardTitle>
                    <Button
                      type="button"
                      variant="outline"
                      size="sm"
                      onClick={() => removeBorrowerPriorAddress(address.id)}
                      className="hover:bg-orange-500 hover:text-white"
                      data-testid={`button-remove-prior-address-${address.id}`}
                    >
                      <Minus className="h-4 w-4 mr-2" />
                      Remove
                    </Button>
                  </CardHeader>
                  <CardContent>
                    <div className="grid grid-cols-1 md:grid-cols-12 gap-4">
                      <div className="space-y-2 md:col-span-3">
                        <Label htmlFor={`borrower-prior-street-${address.id}`}>Street Address</Label>
                        <Input
                          id={`borrower-prior-street-${address.id}`}
                          placeholder="Street Address"
                          data-testid={`input-borrower-prior-street-${address.id}`}
                        />
                      </div>
                      
                      <div className="space-y-2 md:col-span-1">
                        <Label htmlFor={`borrower-prior-unit-${address.id}`}>Unit/Apt</Label>
                        <Input
                          id={`borrower-prior-unit-${address.id}`}
                          placeholder="Unit/Apt"
                          data-testid={`input-borrower-prior-unit-${address.id}`}
                        />
                      </div>
                      
                      <div className="space-y-2 md:col-span-2">
                        <Label htmlFor={`borrower-prior-city-${address.id}`}>City</Label>
                        <Input
                          id={`borrower-prior-city-${address.id}`}
                          placeholder="City"
                          data-testid={`input-borrower-prior-city-${address.id}`}
                        />
                      </div>
                      
                      <div className="space-y-2 md:col-span-1">
                        <Label htmlFor={`borrower-prior-state-${address.id}`}>State</Label>
                        <Select defaultValue="">
                          <SelectTrigger data-testid={`select-borrower-prior-state-${address.id}`}>
                            <SelectValue placeholder="State" />
                          </SelectTrigger>
                          <SelectContent>
                            {US_STATES.map((state) => (
                              <SelectItem key={state.value} value={state.value}>
                                {state.value}
                              </SelectItem>
                            ))}
                          </SelectContent>
                        </Select>
                      </div>
                      
                      <div className="space-y-2 md:col-span-1">
                        <Label htmlFor={`borrower-prior-zip-${address.id}`}>ZIP Code</Label>
                        <Input
                          id={`borrower-prior-zip-${address.id}`}
                          placeholder="ZIP Code"
                          data-testid={`input-borrower-prior-zip-${address.id}`}
                        />
                      </div>
                      
                      <div className="space-y-2 md:col-span-2">
                        <Label htmlFor={`borrower-prior-county-${address.id}`}>County</Label>
                        <Input
                          id={`borrower-prior-county-${address.id}`}
                          placeholder=""
                          data-testid={`input-borrower-prior-county-${address.id}`}
                        />
                      </div>
                      
                      <div className="space-y-2 md:col-span-2">
                        <div className="flex items-center justify-between mb-2">
                          <Label htmlFor={`borrower-prior-time-address-${address.id}`} className="text-sm">
                            Years at this Address
                          </Label>
                        </div>
                        <Input
                          id={`borrower-prior-time-address-${address.id}`}
                          type="number"
                          min="0"
                          max="99"
                          placeholder="0"
                          data-testid={`input-borrower-prior-time-address-${address.id}`}
                        />
                      </div>
                    </div>
                  </CardContent>
                </Card>
              ))}

              {/* Co-Borrower Section - Only show when co-borrower is added */}
              {hasCoBorrower && (
                <>
                <Card className="mt-16 border-l-4 border-l-blue-500 hover:border-blue-500 focus-within:border-blue-500 transition-colors duration-200">
                  <Collapsible open={isCoBorrowerOpen} onOpenChange={setIsCoBorrowerOpen}>
                    <CardHeader>
                      <div className="flex items-center justify-between">
                        <CardTitle>Co-Borrower</CardTitle>
                        <div className="flex items-center gap-2">
                          <Button
                            type="button"
                            variant="outline"
                            size="sm"
                            onClick={copyBorrowerToCoResidence}
                            className="hover:bg-green-500 hover:text-white"
                            data-testid="button-copy-borrower-address"
                          >
                            Same as Borrower
                          </Button>
                          <Tooltip>
                            <TooltipTrigger asChild>
                              <CollapsibleTrigger asChild>
                                <Button 
                                  variant="ghost" 
                                  size="sm" 
                                  className="hover:bg-orange-500 hover:text-black"
                                  data-testid="button-toggle-coborrower"
                                >
                                  {isCoBorrowerOpen ? <Minus className="h-4 w-4" /> : <Plus className="h-4 w-4" />}
                                </Button>
                              </CollapsibleTrigger>
                            </TooltipTrigger>
                            <TooltipContent>
                              <p>{isCoBorrowerOpen ? 'Minimize' : 'Expand'}</p>
                            </TooltipContent>
                          </Tooltip>
                        </div>
                      </div>
                    </CardHeader>
                    <CollapsibleContent>
                      <CardContent className="space-y-4">
                    {/* Row 1: First Name, Middle Name, Last Name, Date of Birth, SSN */}
                    <div className="grid grid-cols-1 md:grid-cols-5 gap-4">
                      <div className="space-y-2">
                        <Label htmlFor="coBorrower-firstName">First Name</Label>
                        <Input
                          id="coBorrower-firstName"
                          {...form.register('coBorrower.firstName')}
                          data-testid="input-coborrower-firstName"
                        />
                      </div>
                      
                      <div className="space-y-2">
                        <Label htmlFor="coBorrower-middleName">Middle Name</Label>
                        <Input
                          id="coBorrower-middleName"
                          {...form.register('coBorrower.middleName')}
                          data-testid="input-coborrower-middleName"
                        />
                      </div>
                      
                      <div className="space-y-2">
                        <Label htmlFor="coBorrower-lastName">Last Name</Label>
                        <Input
                          id="coBorrower-lastName"
                          {...form.register('coBorrower.lastName')}
                          data-testid="input-coborrower-lastName"
                        />
                      </div>
                      
                      <div className="space-y-2">
                        <Label htmlFor="coBorrower-dateOfBirth">Date of Birth</Label>
                        <Input
                          id="coBorrower-dateOfBirth"
                          value={form.watch('coBorrower.dateOfBirth') || ''}
                          onChange={(e) => {
                            const value = e.target.value.replace(/\D/g, ''); // Remove non-digits
                            let formatted = '';
                            if (value.length > 0) {
                              formatted = value.substring(0, 2);
                              if (value.length > 2) {
                                formatted += '/' + value.substring(2, 4);
                                if (value.length > 4) {
                                  formatted += '/' + value.substring(4, 8);
                                }
                              }
                            }
                            form.setValue('coBorrower.dateOfBirth', formatted);
                          }}
                          placeholder="MM/DD/YYYY"
                          maxLength={10}
                          data-testid="input-coborrower-dateOfBirth"
                        />
                      </div>
                      
                      <div className="space-y-2">
                        <Label htmlFor="coBorrower-ssn">SSN</Label>
                        <Input
                          id="coBorrower-ssn"
                          value={form.watch('coBorrower.ssn') || ''}
                          onChange={(e) => {
                            const value = e.target.value.replace(/\D/g, '');
                            let formatted = '';
                            if (value.length > 0) {
                              formatted = value.substring(0, 3);
                              if (value.length > 3) {
                                formatted += '-' + value.substring(3, 5);
                                if (value.length > 5) {
                                  formatted += '-' + value.substring(5, 9);
                                }
                              }
                            }
                            form.setValue('coBorrower.ssn', formatted);
                          }}
                          placeholder="XXX-XX-XXXX"
                          maxLength={11}
                          data-testid="input-coborrower-ssn"
                        />
                      </div>
                    </div>
                    
                    {/* Row 2: Marital Status, Relationship to Borrower, Phone, Email, Preferred Contact Time */}
                    <div className="grid grid-cols-1 md:grid-cols-5 gap-4">
                      <div className="space-y-2">
                        <Label htmlFor="coBorrower-maritalStatus">Marital Status</Label>
                        <Select 
                          value={form.watch('coBorrower.maritalStatus') || 'Select'}
                          onValueChange={(value) => form.setValue('coBorrower.maritalStatus', value as any)}
                        >
                          <SelectTrigger data-testid="select-coborrower-maritalStatus">
                            <SelectValue placeholder="Select" />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="Select">Select</SelectItem>
                            <SelectItem value="single">Single</SelectItem>
                            <SelectItem value="married">Married</SelectItem>
                            <SelectItem value="divorced">Divorced</SelectItem>
                            <SelectItem value="widowed">Widowed</SelectItem>
                          </SelectContent>
                        </Select>
                      </div>

                      <div className="space-y-2">
                        <Label htmlFor="coBorrower-relationshipToBorrower">Relationship to Borrower</Label>
                        <Select 
                          value={form.watch('coBorrower.relationshipToBorrower') || 'N/A'}
                          onValueChange={(value) => form.setValue('coBorrower.relationshipToBorrower', value as any)}
                        >
                          <SelectTrigger data-testid="select-coborrower-relationshipToBorrower">
                            <SelectValue placeholder="N/A" />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="N/A">N/A</SelectItem>
                            <SelectItem value="spouse">Spouse</SelectItem>
                            <SelectItem value="partner">Partner</SelectItem>
                            <SelectItem value="family">Family</SelectItem>
                            <SelectItem value="friend">Friend</SelectItem>
                            <SelectItem value="other">Other</SelectItem>
                          </SelectContent>
                        </Select>
                      </div>
                      
                      <div className="space-y-2">
                        <Label htmlFor="coBorrower-phone">Phone</Label>
                        <Input
                          id="coBorrower-phone"
                          value={form.watch('coBorrower.phone') || ''}
                          onChange={(e) => {
                            const value = e.target.value.replace(/\D/g, '');
                            let formatted = '';
                            if (value.length > 0) {
                              formatted = value.substring(0, 3);
                              if (value.length > 3) {
                                formatted += '-' + value.substring(3, 6);
                                if (value.length > 6) {
                                  formatted += '-' + value.substring(6, 10);
                                }
                              }
                            }
                            form.setValue('coBorrower.phone', formatted);
                          }}
                          placeholder=""
                          maxLength={12}
                          data-testid="input-coborrower-phone"
                        />
                      </div>
                      
                      <div className="space-y-2">
                        <Label htmlFor="coBorrower-email">Email</Label>
                        <Input
                          id="coBorrower-email"
                          type="email"
                          {...form.register('coBorrower.email')}
                          data-testid="input-coborrower-email"
                        />
                      </div>
                      
                      <div className="space-y-2">
                        <Label htmlFor="coBorrower-preferredContactTime">Preferred Contact Time</Label>
                        <Select 
                          value={form.watch('coBorrower.preferredContactTime') || 'Select'}
                          onValueChange={(value) => form.setValue('coBorrower.preferredContactTime', value as any)}
                        >
                          <SelectTrigger data-testid="select-coborrower-preferredContactTime">
                            <SelectValue placeholder="Select" />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="Select">Select</SelectItem>
                            <SelectItem value="Morning">Morning</SelectItem>
                            <SelectItem value="Afternoon">Afternoon</SelectItem>
                            <SelectItem value="Evening">Evening</SelectItem>
                          </SelectContent>
                        </Select>
                      </div>
                    </div>

                  {/* Extra spacing row */}
                  <div className="grid grid-cols-1 md:grid-cols-5 gap-4">
                  </div>

                  {/* Row 3 */}
                  <div className="grid grid-cols-1 md:grid-cols-5 gap-4 mt-10">
                    <div className="space-y-2 flex items-center gap-2">
                      <Label htmlFor="coBorrower-firstName" className="text-xl">Current Residence</Label>
                      {(form.watch('coBorrower.currentResidenceType') === 'rental' || form.watch('coBorrower.currentResidenceType') === 'other') && (
                        <Info 
                          className="w-4 h-4 text-blue-500 cursor-pointer hover:text-blue-600 transition-colors" 
                          data-testid="icon-current-residence-info-coborrower"
                          onClick={() => {
                            const residenceType = form.watch('coBorrower.currentResidenceType');
                            if (residenceType === 'rental') {
                              setActiveRentalSection('coborrower-current');
                              const savedData = form.getValues('coBorrower.residenceAddress.rentalInfo') || {};
                              setRentalInfoData({
                                landlordName: savedData.landlordName || '',
                                email: savedData.email || '',
                                phone: savedData.phone || '',
                                propertyType: savedData.propertyType || '',
                                monthlyRent: savedData.monthlyRent || '',
                                notes: savedData.notes || ''
                              });
                              setIsRentalInfoDialogOpen(true);
                            } else {
                              setActiveResidenceSection('coborrower-current');
                              setResidenceInfoText(form.getValues('coBorrower.residenceAddress.additionalInfo') || '');
                              setIsResidenceInfoDialogOpen(true);
                            }
                          }}
                        />
                      )}
                    </div>
                    <div className="flex items-center gap-4 ml-1">
                      <button
                        type="button"
                        onClick={() => form.setValue('coBorrower.currentResidenceType', 'owned')}
                        className="flex items-center gap-1.5 group"
                        data-testid="button-current-residence-owned-coborrower"
                      >
                        <div className={`w-3 h-3 rounded-full transition-colors ${
                          form.watch('coBorrower.currentResidenceType') === 'owned' 
                            ? 'bg-purple-500' 
                            : 'border border-gray-400 bg-white hover:border-purple-400'
                        }`}>
                        </div>
                        <span className="text-sm font-medium">Owned</span>
                      </button>
                      <button
                        type="button"
                        onClick={() => form.setValue('coBorrower.currentResidenceType', 'rental')}
                        className="flex items-center gap-1.5 group"
                        data-testid="button-current-residence-rental-coborrower"
                      >
                        <div className={`w-3 h-3 rounded-full transition-colors ${
                          form.watch('coBorrower.currentResidenceType') === 'rental' 
                            ? 'bg-purple-500' 
                            : 'border border-gray-400 bg-white hover:border-purple-400'
                        }`}>
                        </div>
                        <span className="text-sm font-medium">Rental</span>
                      </button>
                      <button
                        type="button"
                        onClick={() => form.setValue('coBorrower.currentResidenceType', 'other')}
                        className="flex items-center gap-1.5 group"
                        data-testid="button-current-residence-other-coborrower"
                      >
                        <div className={`w-3 h-3 rounded-full transition-colors ${
                          form.watch('coBorrower.currentResidenceType') === 'other' 
                            ? 'bg-purple-500' 
                            : 'border border-gray-400 bg-white hover:border-purple-400'
                        }`}>
                        </div>
                        <span className="text-sm font-medium">Other</span>
                      </button>
                    </div>
                  </div>

                  {/* Grey Background Box - Complete Address Row from Co-Borrower Residence */}
                  <Card className={`bg-muted mt-8 ${
                    showIncomeCardAnimation['borrower-employment'] ? 'animate-roll-down-subject-property' : ''
                  }`}>
                    <CardContent className="pt-6">
                      <div className="grid grid-cols-1 md:grid-cols-12 gap-4">
                        <div className="space-y-2 md:col-span-3">
                          <Label htmlFor="coBorrower-residence-street">Street Address</Label>
                          <Input
                            id="coBorrower-residence-street"
                            {...form.register('coBorrower.residenceAddress.street', {
                              onChange: () => setTimeout(() => autoCopyCoBorrowerAddressToProperty(), 100)
                            })}
                            data-testid="input-coborrower-residence-street"
                          />
                        </div>
                        
                        <div className="space-y-2 md:col-span-1">
                          <Label htmlFor="coBorrower-residence-unit">Unit/Apt</Label>
                          <Input
                            id="coBorrower-residence-unit"
                            {...form.register('coBorrower.residenceAddress.unit', {
                              onChange: () => setTimeout(() => autoCopyCoBorrowerAddressToProperty(), 100)
                            })}
                            data-testid="input-coborrower-residence-unit"
                          />
                        </div>
                        
                        <div className="space-y-2 md:col-span-2">
                          <Label htmlFor="coBorrower-residence-city">City</Label>
                          <Input
                            id="coBorrower-residence-city"
                            {...form.register('coBorrower.residenceAddress.city', {
                              onChange: () => setTimeout(() => autoCopyCoBorrowerAddressToProperty(), 100)
                            })}
                            data-testid="input-coborrower-residence-city"
                          />
                        </div>
                        
                        <div className="space-y-2 md:col-span-1">
                          <Label htmlFor="coBorrower-residence-state">State</Label>
                          <Select
                            value={form.watch('coBorrower.residenceAddress.state') || ''}
                            onValueChange={(value) => {
                              form.setValue('coBorrower.residenceAddress.state', value);
                              setTimeout(() => autoCopyCoBorrowerAddressToProperty(), 100);
                            }}
                          >
                            <SelectTrigger data-testid="select-coborrower-residence-state">
                              <SelectValue placeholder="State" />
                            </SelectTrigger>
                            <SelectContent>
                              {US_STATES.map((state) => (
                                <SelectItem key={state.value} value={state.value}>
                                  {state.value}
                                </SelectItem>
                              ))}
                            </SelectContent>
                          </Select>
                        </div>
                        
                        <div className="space-y-2 md:col-span-1">
                          <Label htmlFor="coBorrower-residence-zip">ZIP Code</Label>
                          <Input
                            id="coBorrower-residence-zip"
                            {...form.register('coBorrower.residenceAddress.zip', {
                              onChange: () => setTimeout(() => autoCopyCoBorrowerAddressToProperty(), 100)
                            })}
                            onBlur={(e) => handleCoBorrowerZipCodeLookup(e.target.value)}
                            data-testid="input-coborrower-residence-zip"
                          />
                        </div>
                        
                        <div className="space-y-2 md:col-span-1">
                          <Label htmlFor="coBorrower-residence-county">County</Label>
                          {coBorrowerCountyOptions.length > 0 ? (
                            <Select
                              value={form.watch('coBorrower.residenceAddress.county') || ''}
                              onValueChange={(value) => {
                                if (value === 'manual-entry') {
                                  form.setValue('coBorrower.residenceAddress.county', '');
                                  setCoBorrowerCountyOptions([]);
                                } else {
                                  // Find the selected county to get its label for display
                                  const selectedCounty = coBorrowerCountyOptions.find(county => county.value === value);
                                  form.setValue('coBorrower.residenceAddress.county', selectedCounty?.label || value, { shouldDirty: true });
                                }
                              }}
                            >
                              <SelectTrigger data-testid="select-coborrower-residence-county">
                                <SelectValue placeholder={countyLookupLoading.coBorrower ? "Looking up counties..." : "Select county"} />
                              </SelectTrigger>
                              <SelectContent>
                                {coBorrowerCountyOptions.map((county) => (
                                  <SelectItem key={county.value} value={county.value}>
                                    {county.label}
                                  </SelectItem>
                                ))}
                                <SelectItem value="manual-entry" className="text-muted-foreground border-t">
                                  Enter county manually
                                </SelectItem>
                              </SelectContent>
                            </Select>
                          ) : (
                            <Input
                              id="coBorrower-residence-county"
                              {...form.register('coBorrower.residenceAddress.county')}
                              placeholder={countyLookupLoading.coBorrower ? "Looking up counties..." : ""}
                              disabled={countyLookupLoading.coBorrower}
                              data-testid="input-coborrower-residence-county"
                            />
                          )}
                        </div>
                        
                        <div className="space-y-2 md:col-span-1">
                          <Label htmlFor="coBorrower-residence-from">From</Label>
                          <Input
                            id="coBorrower-residence-from"
                            type="text"
                            placeholder="mm/dd/yyyy"
                            {...form.register('coBorrower.residenceAddress.from')}
                            onChange={(e) => {
                              const input = e.target.value;
                              const currentValue = form.getValues('coBorrower.residenceAddress.from') || '';
                              
                              // If input is empty or being deleted, allow it
                              if (input.length === 0) {
                                form.setValue('coBorrower.residenceAddress.from', '');
                                return;
                              }
                              
                              // If user is deleting (input shorter than current), just update without formatting
                              if (input.length < currentValue.length) {
                                form.setValue('coBorrower.residenceAddress.from', input);
                                return;
                              }
                              
                              // Otherwise, apply formatting
                              let value = input.replace(/\D/g, ''); // Remove non-digits
                              if (value.length >= 2) {
                                value = value.slice(0, 2) + '/' + value.slice(2);
                              }
                              if (value.length >= 5) {
                                value = value.slice(0, 5) + '/' + value.slice(5);
                              }
                              value = value.slice(0, 10); // Limit to mm/dd/yyyy
                              form.setValue('coBorrower.residenceAddress.from', value);
                            }}
                            data-testid="input-coborrower-residence-from"
                            className="!text-[13px] placeholder:text-[10px]"
                          />
                        </div>
                        
                        <div className="space-y-2 md:col-span-1">
                          <div className="flex items-center justify-between mb-2">
                            <Label htmlFor="coBorrower-residence-to" className="text-sm">
                              {isCoBorrowerCurrentResidencePresent ? 'Present' : 'To'}
                            </Label>
                            <Switch
                              checked={isCoBorrowerCurrentResidencePresent}
                              onCheckedChange={(checked) => {
                                setIsCoBorrowerCurrentResidencePresent(checked);
                                if (checked) {
                                  // Set to "Present" and store current date for calculations
                                  form.setValue('coBorrower.residenceAddress.to', 'Present');
                                } else {
                                  // Clear the field when toggled off
                                  form.setValue('coBorrower.residenceAddress.to', '');
                                }
                              }}
                              data-testid="toggle-coborrower-residence-present"
                              className="scale-[0.8]"
                            />
                          </div>
                          <Input
                            id="coBorrower-residence-to"
                            type="text"
                            placeholder="mm/dd/yyyy"
                            value={isCoBorrowerCurrentResidencePresent ? 'Present' : form.watch('coBorrower.residenceAddress.to') || ''}
                            onChange={(e) => {
                              if (isCoBorrowerCurrentResidencePresent) return; // Disable editing when Present
                              
                              const input = e.target.value;
                              const currentValue = form.getValues('coBorrower.residenceAddress.to') || '';
                              
                              // If input is empty or being deleted, allow it
                              if (input.length === 0) {
                                form.setValue('coBorrower.residenceAddress.to', '');
                                return;
                              }
                              
                              // If user is deleting (input shorter than current), just update without formatting
                              if (input.length < currentValue.length) {
                                form.setValue('coBorrower.residenceAddress.to', input);
                                return;
                              }
                              
                              // Otherwise, apply formatting
                              let value = input.replace(/\D/g, ''); // Remove non-digits
                              if (value.length >= 2) {
                                value = value.slice(0, 2) + '/' + value.slice(2);
                              }
                              if (value.length >= 5) {
                                value = value.slice(0, 5) + '/' + value.slice(5);
                              }
                              value = value.slice(0, 10); // Limit to mm/dd/yyyy
                              form.setValue('coBorrower.residenceAddress.to', value);
                            }}
                            data-testid="input-coborrower-residence-to"
                            className="!text-[13px] placeholder:text-[10px]"
                            readOnly={isCoBorrowerCurrentResidencePresent}
                          />
                        </div>
                        
                        <div className="space-y-2 md:col-span-1">
                          <Label htmlFor="coBorrower-time-address" className="text-sm">
                            Duration
                          </Label>
                          <CoBorrowerResidenceTimeCalculator control={form.control} setValue={form.setValue} />
                        </div>
                      </div>
                    </CardContent>
                  </Card>

                  {/* Prior Residence - Show if less than 2 years at current address */}
                  {(() => {
                    const yearsValue = form.watch('coBorrower.yearsAtAddress');
                    const monthsValue = form.watch('coBorrower.monthsAtAddress');
                    
                    // Check if any time value has been entered
                    const hasYears = yearsValue && String(yearsValue).trim() !== '';
                    const hasMonths = monthsValue && String(monthsValue).trim() !== '';
                    
                    if (!hasYears && !hasMonths) {
                      return false; // No time values entered, hide section
                    }
                    
                    // Calculate total months at current address
                    const years = hasYears ? parseInt(String(yearsValue)) : 0;
                    const months = hasMonths ? parseInt(String(monthsValue)) : 0;
                    const totalMonths = (isNaN(years) ? 0 : years) * 12 + (isNaN(months) ? 0 : months);
                    
                    return totalMonths < 24; // Show if less than 2 years (24 months) total
                  })() && (
                    <>
                      {/* Extra spacing row */}
                      <div className="grid grid-cols-1 md:grid-cols-5 gap-4">
                      </div>

                      {/* Row for Prior Residence Title */}
                      <div className="grid grid-cols-1 md:grid-cols-5 gap-4 mt-10">
                        <div className="space-y-2 flex items-center gap-2">
                          <Label htmlFor="coBorrower-prior-residence" className="text-xl">Prior Residence</Label>
                          {(form.watch('coBorrower.priorResidenceType') === 'rental' || form.watch('coBorrower.priorResidenceType') === 'other') && (
                            <Info 
                              className="w-4 h-4 text-blue-500 cursor-pointer hover:text-blue-600 transition-colors" 
                              data-testid="icon-prior-residence-info-coborrower"
                              onClick={() => {
                                const residenceType = form.watch('coBorrower.priorResidenceType');
                                if (residenceType === 'rental') {
                                  setActiveRentalSection('coborrower-prior');
                                  const savedData = form.getValues('coBorrower.priorResidenceAddress.rentalInfo') || {};
                                  setRentalInfoData({
                                    landlordName: savedData.landlordName || '',
                                    email: savedData.email || '',
                                    phone: savedData.phone || '',
                                    propertyType: savedData.propertyType || '',
                                    monthlyRent: savedData.monthlyRent || '',
                                    notes: savedData.notes || ''
                                  });
                                  setIsRentalInfoDialogOpen(true);
                                } else {
                                  setActiveResidenceSection('coborrower-prior');
                                  setResidenceInfoText(form.getValues('coBorrower.priorResidenceAddress.additionalInfo') || '');
                                  setIsResidenceInfoDialogOpen(true);
                                }
                              }}
                            />
                          )}
                        </div>
                        <div className="flex items-center gap-4 ml-1">
                          <button
                            type="button"
                            onClick={() => form.setValue('coBorrower.priorResidenceType', 'owned')}
                            className="flex items-center gap-1.5 group"
                            data-testid="button-prior-residence-owned-coborrower"
                          >
                            <div className={`w-3 h-3 rounded-full transition-colors ${
                              form.watch('coBorrower.priorResidenceType') === 'owned' 
                                ? 'bg-purple-500' 
                                : 'border border-gray-400 bg-white hover:border-purple-400'
                            }`}>
                            </div>
                            <span className="text-sm font-medium">Owned</span>
                          </button>
                          <button
                            type="button"
                            onClick={() => form.setValue('coBorrower.priorResidenceType', 'rental')}
                            className="flex items-center gap-1.5 group"
                            data-testid="button-prior-residence-rental-coborrower"
                          >
                            <div className={`w-3 h-3 rounded-full transition-colors ${
                              form.watch('coBorrower.priorResidenceType') === 'rental' 
                                ? 'bg-purple-500' 
                                : 'border border-gray-400 bg-white hover:border-purple-400'
                            }`}>
                            </div>
                            <span className="text-sm font-medium">Rental</span>
                          </button>
                          <button
                            type="button"
                            onClick={() => form.setValue('coBorrower.priorResidenceType', 'other')}
                            className="flex items-center gap-1.5 group"
                            data-testid="button-prior-residence-other-coborrower"
                          >
                            <div className={`w-3 h-3 rounded-full transition-colors ${
                              form.watch('coBorrower.priorResidenceType') === 'other' 
                                ? 'bg-purple-500' 
                                : 'border border-gray-400 bg-white hover:border-purple-400'
                            }`}>
                            </div>
                            <span className="text-sm font-medium">Other</span>
                          </button>
                        </div>
                      </div>

                      {/* Grey Background Box - Prior Residence */}
                      <Card className={`bg-muted mt-8 ${
                        showIncomeCardAnimation['borrower-employment'] ? 'animate-roll-down-subject-property' : ''
                      }`}>
                        <CardContent className="pt-6">
                          <div className="grid grid-cols-1 md:grid-cols-12 gap-4">
                            <div className="space-y-2 md:col-span-3">
                              <Label htmlFor="coBorrower-prior-residence-street">Street Address</Label>
                              <Input
                                id="coBorrower-prior-residence-street"
                                {...form.register('coBorrower.priorResidenceAddress.street')}
                                data-testid="input-coborrower-prior-residence-street"
                              />
                            </div>
                            
                            <div className="space-y-2 md:col-span-1">
                              <Label htmlFor="coBorrower-prior-residence-unit">Unit/Apt</Label>
                              <Input
                                id="coBorrower-prior-residence-unit"
                                {...form.register('coBorrower.priorResidenceAddress.unit')}
                                data-testid="input-coborrower-prior-residence-unit"
                              />
                            </div>
                            
                            <div className="space-y-2 md:col-span-2">
                              <Label htmlFor="coBorrower-prior-residence-city">City</Label>
                              <Input
                                id="coBorrower-prior-residence-city"
                                {...form.register('coBorrower.priorResidenceAddress.city')}
                                data-testid="input-coborrower-prior-residence-city"
                              />
                            </div>
                            
                            <div className="space-y-2 md:col-span-1">
                              <Label htmlFor="coBorrower-prior-residence-state">State</Label>
                              <Select
                                value={form.watch('coBorrower.priorResidenceAddress.state') || ''}
                                onValueChange={(value) => {
                                  form.setValue('coBorrower.priorResidenceAddress.state', value);
                                }}
                              >
                                <SelectTrigger data-testid="select-coborrower-prior-residence-state">
                                  <SelectValue placeholder="State" />
                                </SelectTrigger>
                                <SelectContent>
                                  {US_STATES.map((state) => (
                                    <SelectItem key={state.value} value={state.value}>
                                      {state.value}
                                    </SelectItem>
                                  ))}
                                </SelectContent>
                              </Select>
                            </div>
                            
                            <div className="space-y-2 md:col-span-1">
                              <Label htmlFor="coBorrower-prior-residence-zip">ZIP Code</Label>
                              <Input
                                id="coBorrower-prior-residence-zip"
                                {...form.register('coBorrower.priorResidenceAddress.zip')}
                                data-testid="input-coborrower-prior-residence-zip"
                              />
                            </div>
                            
                            <div className="space-y-2 md:col-span-1">
                              <Label htmlFor="coBorrower-prior-residence-county">County</Label>
                              <Input
                                id="coBorrower-prior-residence-county"
                                {...form.register('coBorrower.priorResidenceAddress.county')}
                                data-testid="input-coborrower-prior-residence-county"
                              />
                            </div>
                            
                            <div className="space-y-2 md:col-span-1">
                              <Label htmlFor="coBorrower-prior-residence-from">From</Label>
                              <Input
                                id="coBorrower-prior-residence-from"
                                type="text"
                                placeholder="mm/dd/yyyy"
                                {...form.register('coBorrower.priorResidenceAddress.from')}
                                onChange={(e) => {
                                  const input = e.target.value;
                                  const currentValue = form.getValues('coBorrower.priorResidenceAddress.from') || '';
                                  
                                  if (input.length === 0) {
                                    form.setValue('coBorrower.priorResidenceAddress.from', '');
                                    return;
                                  }
                                  
                                  if (input.length < currentValue.length) {
                                    form.setValue('coBorrower.priorResidenceAddress.from', input);
                                    return;
                                  }
                                  
                                  let value = input.replace(/\D/g, '');
                                  if (value.length >= 2) {
                                    value = value.slice(0, 2) + '/' + value.slice(2);
                                  }
                                  if (value.length >= 5) {
                                    value = value.slice(0, 5) + '/' + value.slice(5);
                                  }
                                  value = value.slice(0, 10);
                                  form.setValue('coBorrower.priorResidenceAddress.from', value);
                                }}
                                data-testid="input-coborrower-prior-residence-from"
                                className="!text-[13px] placeholder:text-[10px]"
                              />
                            </div>
                            
                            <div className="space-y-2 md:col-span-1">
                              <Label htmlFor="coBorrower-prior-residence-to">To</Label>
                              <Input
                                id="coBorrower-prior-residence-to"
                                type="text"
                                placeholder="mm/dd/yyyy"
                                {...form.register('coBorrower.priorResidenceAddress.to')}
                                onChange={(e) => {
                                  const input = e.target.value;
                                  const currentValue = form.getValues('coBorrower.priorResidenceAddress.to') || '';
                                  
                                  if (input.length === 0) {
                                    form.setValue('coBorrower.priorResidenceAddress.to', '');
                                    return;
                                  }
                                  
                                  if (input.length < currentValue.length) {
                                    form.setValue('coBorrower.priorResidenceAddress.to', input);
                                    return;
                                  }
                                  
                                  let value = input.replace(/\D/g, '');
                                  if (value.length >= 2) {
                                    value = value.slice(0, 2) + '/' + value.slice(2);
                                  }
                                  if (value.length >= 5) {
                                    value = value.slice(0, 5) + '/' + value.slice(5);
                                  }
                                  value = value.slice(0, 10);
                                  form.setValue('coBorrower.priorResidenceAddress.to', value);
                                }}
                                data-testid="input-coborrower-prior-residence-to"
                                className="!text-[13px] placeholder:text-[10px]"
                              />
                            </div>
                            
                            <div className="space-y-2 md:col-span-1">
                              <Label htmlFor="coBorrower-prior-time-address" className="text-sm">
                                Duration
                              </Label>
                              <CoBorrowerPriorResidenceTimeCalculator control={form.control} setValue={form.setValue} />
                            </div>
                          </div>
                        </CardContent>
                      </Card>
                    </>
                  )}

                  {/* Second Prior Residence - Show if combined current + first prior is less than 2 years */}
                  {(() => {
                    const currentYearsValue = form.watch('coBorrower.yearsAtAddress');
                    const currentMonthsValue = form.watch('coBorrower.monthsAtAddress');
                    const priorYearsValue = form.watch('coBorrower.priorYearsAtAddress');
                    const priorMonthsValue = form.watch('coBorrower.priorMonthsAtAddress');
                    
                    // Check if any time value has been entered in current residence
                    const hasCurrentYears = currentYearsValue && String(currentYearsValue).trim() !== '';
                    const hasCurrentMonths = currentMonthsValue && String(currentMonthsValue).trim() !== '';
                    
                    if (!hasCurrentYears && !hasCurrentMonths) {
                      return false; // No time values entered in current, hide section
                    }
                    
                    // Check if any time value has been entered in first prior residence
                    const hasPriorYears = priorYearsValue && String(priorYearsValue).trim() !== '';
                    const hasPriorMonths = priorMonthsValue && String(priorMonthsValue).trim() !== '';
                    
                    if (!hasPriorYears && !hasPriorMonths) {
                      return false; // No time values entered in first prior, hide second prior
                    }
                    
                    // Calculate total months from current address (use parseFloat to handle decimals)
                    let currentTotalMonths = 0;
                    if (hasCurrentYears) {
                      const currentYears = parseFloat(String(currentYearsValue));
                      currentTotalMonths = (isNaN(currentYears) ? 0 : currentYears) * 12;
                    } else if (hasCurrentMonths) {
                      const currentMonths = parseFloat(String(currentMonthsValue));
                      currentTotalMonths = isNaN(currentMonths) ? 0 : currentMonths;
                    }
                    
                    // Calculate total months from first prior address (use parseFloat to handle decimals)
                    let priorTotalMonths = 0;
                    if (hasPriorYears) {
                      const priorYears = parseFloat(String(priorYearsValue));
                      priorTotalMonths = (isNaN(priorYears) ? 0 : priorYears) * 12;
                    } else if (hasPriorMonths) {
                      const priorMonths = parseFloat(String(priorMonthsValue));
                      priorTotalMonths = isNaN(priorMonths) ? 0 : priorMonths;
                    }
                    
                    // Combined total
                    const combinedTotalMonths = currentTotalMonths + priorTotalMonths;
                    
                    return combinedTotalMonths < 24; // Show if combined is less than 2 years (24 months) total
                  })() && (
                    <>
                      {/* Extra spacing row */}
                      <div className="grid grid-cols-1 md:grid-cols-5 gap-4">
                      </div>

                      {/* Row for Second Prior Residence Title */}
                      <div className="grid grid-cols-1 md:grid-cols-5 gap-4 mt-10">
                        <div className="space-y-2 flex items-center gap-2">
                          <Label htmlFor="coBorrower-prior-residence-2" className="text-xl">Prior Residence</Label>
                          {(form.watch('coBorrower.priorResidenceType2') === 'rental' || form.watch('coBorrower.priorResidenceType2') === 'other') && (
                            <Info 
                              className="w-4 h-4 text-blue-500 cursor-pointer hover:text-blue-600 transition-colors" 
                              data-testid="icon-prior-residence-2-info-coborrower"
                              onClick={() => {
                                setActiveResidenceSection('coborrower-prior-2');
                                setResidenceInfoText(form.getValues('coBorrower.priorResidenceAddress2.additionalInfo') || '');
                                setIsResidenceInfoDialogOpen(true);
                              }}
                            />
                          )}
                        </div>
                        <div className="flex items-center gap-4 ml-1">
                          <button
                            type="button"
                            onClick={() => form.setValue('coBorrower.priorResidenceType2', 'owned')}
                            className="flex items-center gap-1.5 group"
                            data-testid="button-prior-residence-2-owned-coborrower"
                          >
                            <div className={`w-3 h-3 rounded-full transition-colors ${
                              form.watch('coBorrower.priorResidenceType2') === 'owned' 
                                ? 'bg-purple-500' 
                                : 'border border-gray-400 bg-white hover:border-purple-400'
                            }`}>
                            </div>
                            <span className="text-sm font-medium">Owned</span>
                          </button>
                          <button
                            type="button"
                            onClick={() => form.setValue('coBorrower.priorResidenceType2', 'rental')}
                            className="flex items-center gap-1.5 group"
                            data-testid="button-prior-residence-2-rental-coborrower"
                          >
                            <div className={`w-3 h-3 rounded-full transition-colors ${
                              form.watch('coBorrower.priorResidenceType2') === 'rental' 
                                ? 'bg-purple-500' 
                                : 'border border-gray-400 bg-white hover:border-purple-400'
                            }`}>
                            </div>
                            <span className="text-sm font-medium">Rental</span>
                          </button>
                          <button
                            type="button"
                            onClick={() => form.setValue('coBorrower.priorResidenceType2', 'other')}
                            className="flex items-center gap-1.5 group"
                            data-testid="button-prior-residence-2-other-coborrower"
                          >
                            <div className={`w-3 h-3 rounded-full transition-colors ${
                              form.watch('coBorrower.priorResidenceType2') === 'other' 
                                ? 'bg-purple-500' 
                                : 'border border-gray-400 bg-white hover:border-purple-400'
                            }`}>
                            </div>
                            <span className="text-sm font-medium">Other</span>
                          </button>
                        </div>
                      </div>

                      {/* Grey Background Box - Second Prior Residence */}
                      <Card className={`bg-muted mt-8 ${
                        showIncomeCardAnimation['borrower-employment'] ? 'animate-roll-down-subject-property' : ''
                      }`}>
                        <CardContent className="pt-6">
                          <div className="grid grid-cols-1 md:grid-cols-12 gap-4">
                            <div className="space-y-2 md:col-span-3">
                              <Label htmlFor="coBorrower-prior-residence-street-2">Street Address</Label>
                              <Input
                                id="coBorrower-prior-residence-street-2"
                                {...form.register('coBorrower.priorResidenceAddress2.street')}
                                data-testid="input-coborrower-prior-residence-street-2"
                              />
                            </div>
                            
                            <div className="space-y-2 md:col-span-1">
                              <Label htmlFor="coBorrower-prior-residence-unit-2">Unit/Apt</Label>
                              <Input
                                id="coBorrower-prior-residence-unit-2"
                                {...form.register('coBorrower.priorResidenceAddress2.unit')}
                                data-testid="input-coborrower-prior-residence-unit-2"
                              />
                            </div>
                            
                            <div className="space-y-2 md:col-span-2">
                              <Label htmlFor="coBorrower-prior-residence-city-2">City</Label>
                              <Input
                                id="coBorrower-prior-residence-city-2"
                                {...form.register('coBorrower.priorResidenceAddress2.city')}
                                data-testid="input-coborrower-prior-residence-city-2"
                              />
                            </div>
                            
                            <div className="space-y-2 md:col-span-1">
                              <Label htmlFor="coBorrower-prior-residence-state-2">State</Label>
                              <Select
                                value={form.watch('coBorrower.priorResidenceAddress2.state') || ''}
                                onValueChange={(value) => {
                                  form.setValue('coBorrower.priorResidenceAddress2.state', value);
                                }}
                              >
                                <SelectTrigger data-testid="select-coborrower-prior-residence-state-2">
                                  <SelectValue placeholder="State" />
                                </SelectTrigger>
                                <SelectContent>
                                  {US_STATES.map((state) => (
                                    <SelectItem key={state.value} value={state.value}>
                                      {state.value}
                                    </SelectItem>
                                  ))}
                                </SelectContent>
                              </Select>
                            </div>
                            
                            <div className="space-y-2 md:col-span-1">
                              <Label htmlFor="coBorrower-prior-residence-zip-2">ZIP Code</Label>
                              <Input
                                id="coBorrower-prior-residence-zip-2"
                                {...form.register('coBorrower.priorResidenceAddress2.zip')}
                                data-testid="input-coborrower-prior-residence-zip-2"
                              />
                            </div>
                            
                            <div className="space-y-2 md:col-span-1">
                              <Label htmlFor="coBorrower-prior-residence-county-2">County</Label>
                              <Input
                                id="coBorrower-prior-residence-county-2"
                                {...form.register('coBorrower.priorResidenceAddress2.county')}
                                data-testid="input-coborrower-prior-residence-county-2"
                              />
                            </div>
                            
                            <div className="space-y-2 md:col-span-1">
                              <Label htmlFor="coBorrower-prior-residence-from-2">From</Label>
                              <Input
                                id="coBorrower-prior-residence-from-2"
                                type="text"
                                placeholder="mm/dd/yyyy"
                                {...form.register('coBorrower.priorResidenceAddress2.from')}
                                onChange={(e) => {
                                  const input = e.target.value;
                                  const currentValue = form.getValues('coBorrower.priorResidenceAddress2.from') || '';
                                  
                                  if (input.length === 0) {
                                    form.setValue('coBorrower.priorResidenceAddress2.from', '');
                                    return;
                                  }
                                  
                                  if (input.length < currentValue.length) {
                                    form.setValue('coBorrower.priorResidenceAddress2.from', input);
                                    return;
                                  }
                                  
                                  let value = input.replace(/\D/g, '');
                                  if (value.length >= 2) {
                                    value = value.slice(0, 2) + '/' + value.slice(2);
                                  }
                                  if (value.length >= 5) {
                                    value = value.slice(0, 5) + '/' + value.slice(5);
                                  }
                                  value = value.slice(0, 10);
                                  form.setValue('coBorrower.priorResidenceAddress2.from', value);
                                }}
                                data-testid="input-coborrower-prior-residence-from-2"
                                className="!text-[13px] placeholder:text-[10px]"
                              />
                            </div>
                            
                            <div className="space-y-2 md:col-span-1">
                              <Label htmlFor="coBorrower-prior-residence-to-2">To</Label>
                              <Input
                                id="coBorrower-prior-residence-to-2"
                                type="text"
                                placeholder="mm/dd/yyyy"
                                {...form.register('coBorrower.priorResidenceAddress2.to')}
                                onChange={(e) => {
                                  const input = e.target.value;
                                  const currentValue = form.getValues('coBorrower.priorResidenceAddress2.to') || '';
                                  
                                  if (input.length === 0) {
                                    form.setValue('coBorrower.priorResidenceAddress2.to', '');
                                    return;
                                  }
                                  
                                  if (input.length < currentValue.length) {
                                    form.setValue('coBorrower.priorResidenceAddress2.to', input);
                                    return;
                                  }
                                  
                                  let value = input.replace(/\D/g, '');
                                  if (value.length >= 2) {
                                    value = value.slice(0, 2) + '/' + value.slice(2);
                                  }
                                  if (value.length >= 5) {
                                    value = value.slice(0, 5) + '/' + value.slice(5);
                                  }
                                  value = value.slice(0, 10);
                                  form.setValue('coBorrower.priorResidenceAddress2.to', value);
                                }}
                                data-testid="input-coborrower-prior-residence-to-2"
                                className="!text-[13px] placeholder:text-[10px]"
                              />
                            </div>
                            
                            <div className="space-y-2 md:col-span-1">
                              <Label htmlFor="coBorrower-prior-time-address-2" className="text-sm">
                                Duration
                              </Label>
                              <CoBorrowerPriorResidence2TimeCalculator control={form.control} setValue={form.setValue} />
                            </div>
                          </div>
                        </CardContent>
                      </Card>
                    </>
                  )}
                  </CardContent>
                  </CollapsibleContent>
                  </Collapsible>
                </Card>

                </>
              )}
            </TabsContent>

            {/* Income Tab */}
            <TabsContent value="income" className="space-y-6">
              {/* Household Income Summary */}
              <Card className={`transition-all duration-700 ${
                showIncomeAnimation ? 'animate-roll-down' : ''
              }`}>
                <CardContent className="grid grid-cols-1 md:grid-cols-4 gap-4 pt-6">
                  <div className="space-y-2">
                    <Label htmlFor="household-income-total" className="text-lg font-semibold">Total Household Income</Label>
                  </div>
                  
                  <div className="space-y-2">
                    <Label htmlFor="income-frontDTI" className={`text-lg font-semibold ${
                      showIncomeAnimation ? 'animate-roll-down-dti-1' : ''
                    }`}>Front DTI</Label>
                    <Controller
                      control={form.control}
                      name="income.frontDTI"
                      render={({ field }) => {
                        const displayValue = formatPercentageDisplay(field.value);
                        const hasValue = field.value && field.value.trim() !== '';
                        
                        return (
                          <div className="min-h-[40px] flex items-center">
                            {!isFrontDTIEditing && hasValue ? (
                              <div
                                onClick={() => setIsFrontDTIEditing(true)}
                                className="cursor-pointer bg-navy-900 hover:bg-navy-800 text-white rounded-full w-20 h-20 flex items-center justify-center transition-colors duration-200"
                                style={{
                                  fontFamily: 'ui-sans-serif, system-ui, sans-serif',
                                  fontSize: '36px',
                                  fontWeight: 600,
                                  backgroundColor: '#1a3373',
                                  boxShadow: '0 4px 8px rgba(0, 0, 0, 0.15)'
                                }}
                                data-testid="display-income-frontDTI"
                              >
                                <span>
                                  {displayValue.replace('%', '')}
                                  <span style={{ fontSize: '28px' }}>%</span>
                                </span>
                              </div>
                            ) : (
                              <Input
                                id="income-frontDTI"
                                value={displayValue}
                                onChange={(e) => {
                                  const rawValue = parsePercentageInput(e.target.value);
                                  field.onChange(rawValue);
                                }}
                                onBlur={() => {
                                  if (hasValue) {
                                    setIsFrontDTIEditing(false);
                                  }
                                }}
                                onFocus={() => setIsFrontDTIEditing(true)}
                                placeholder="%"
                                autoFocus={isFrontDTIEditing && hasValue}
                                className="w-1/2"
                                data-testid="input-income-frontDTI"
                              />
                            )}
                          </div>
                        );
                      }}
                    />
                  </div>
                  
                  <div className="space-y-2">
                    <Label htmlFor="income-backDTI" className={`text-lg font-semibold ${
                      showIncomeAnimation ? 'animate-roll-down-dti-2' : ''
                    }`}>Back DTI</Label>
                    <Controller
                      control={form.control}
                      name="income.backDTI"
                      render={({ field }) => {
                        const displayValue = formatPercentageDisplay(field.value);
                        const hasValue = field.value && field.value.trim() !== '';
                        
                        return (
                          <div className="min-h-[40px] flex items-center">
                            {!isBackDTIEditing && hasValue ? (
                              <div
                                onClick={() => setIsBackDTIEditing(true)}
                                className="cursor-pointer bg-navy-900 hover:bg-navy-800 text-white rounded-full w-20 h-20 flex items-center justify-center transition-colors duration-200"
                                style={{
                                  fontFamily: 'ui-sans-serif, system-ui, sans-serif',
                                  fontSize: '36px',
                                  fontWeight: 600,
                                  backgroundColor: '#1a3373',
                                  boxShadow: '0 4px 8px rgba(0, 0, 0, 0.15)'
                                }}
                                data-testid="display-income-backDTI"
                              >
                                <span>
                                  {displayValue.replace('%', '')}
                                  <span style={{ fontSize: '28px' }}>%</span>
                                </span>
                              </div>
                            ) : (
                              <Input
                                id="income-backDTI"
                                value={displayValue}
                                onChange={(e) => {
                                  const rawValue = parsePercentageInput(e.target.value);
                                  field.onChange(rawValue);
                                }}
                                onBlur={() => {
                                  if (hasValue) {
                                    setIsBackDTIEditing(false);
                                  }
                                }}
                                onFocus={() => setIsBackDTIEditing(true)}
                                placeholder="%"
                                autoFocus={isBackDTIEditing && hasValue}
                                className="w-1/2"
                                data-testid="input-income-backDTI"
                              />
                            )}
                          </div>
                        );
                      }}
                    />
                  </div>
                  
                  <div className="space-y-2">
                    <Label 
                      htmlFor="income-guidelineDTI" 
                      className={`text-lg font-semibold ${
                        showIncomeAnimation ? 'animate-roll-down-dti-3' : ''
                      }`}
                    >
                      Guideline DTI
                    </Label>
                    <Controller
                      control={form.control}
                      name="income.guidelineDTI"
                      render={({ field }) => {
                        const displayValue = formatPercentageDisplay(field.value);
                        const hasValue = field.value && field.value.trim() !== '';
                        
                        return (
                          <div className="min-h-[40px] flex items-center">
                            {!isGuidelineDTIEditing && hasValue ? (
                              <div
                                onClick={() => setIsGuidelineDTIEditing(true)}
                                className="cursor-pointer bg-navy-900 hover:bg-navy-800 text-white rounded-full w-20 h-20 flex items-center justify-center transition-colors duration-200"
                                style={{
                                  fontFamily: 'ui-sans-serif, system-ui, sans-serif',
                                  fontSize: '36px',
                                  fontWeight: 600,
                                  backgroundColor: '#1a3373',
                                  boxShadow: '0 4px 8px rgba(0, 0, 0, 0.15)'
                                }}
                                data-testid="display-income-guidelineDTI"
                              >
                                <span>
                                  {displayValue.replace('%', '')}
                                  <span style={{ fontSize: '28px' }}>%</span>
                                </span>
                              </div>
                            ) : (
                              <Input
                                id="income-guidelineDTI"
                                value={displayValue}
                                onChange={(e) => {
                                  const rawValue = parsePercentageInput(e.target.value);
                                  field.onChange(rawValue);
                                }}
                                onBlur={() => {
                                  if (hasValue) {
                                    setIsGuidelineDTIEditing(false);
                                  }
                                }}
                                onFocus={() => setIsGuidelineDTIEditing(true)}
                                placeholder="%"
                                autoFocus={isGuidelineDTIEditing && hasValue}
                                data-testid="input-income-guidelineDTI"
                                className={(() => {
                                  const backDTI = form.watch('income.backDTI') || '';
                                  const guidelineDTI = form.watch('income.guidelineDTI') || '';
                                  const shadowColor = getDTIComparisonColor(backDTI, guidelineDTI).shadowColor;
                                  let classes = 'w-1/2';
                                  if (shadowColor === 'green') {
                                    classes += ' shadow-lg shadow-green-200';
                                  } else if (shadowColor === 'red') {
                                    classes += ' shadow-lg shadow-red-200';
                                  }
                                  return classes;
                                })()}
                              />
                            )}
                          </div>
                        );
                      }}
                    />
                  </div>
                </CardContent>
              </Card>

              {/* Income Type Selection */}
              <Card className="border-l-4 border-l-green-500 hover:border-green-500 focus-within:border-green-500 transition-colors duration-200">
                <CardHeader>
                  <div className="flex items-center justify-between">
                    <CardTitle className="flex items-center gap-3">
                      Borrower Income
                      <span className="text-lg font-semibold" data-testid="text-total-borrower-income">
                        {totalBorrowerIncomeFormatted}
                      </span>
                    </CardTitle>
                    <div className="flex items-center gap-2">
                      {/* Expand All Button */}
                      <Button
                        type="button"
                        variant="ghost"
                        size="icon"
                        onClick={() => {
                          const updates: Record<string, boolean> = {};
                          
                          // Employment cards
                          if (form.watch('income.incomeTypes.employment')) {
                            (borrowerEmployerCards || ['default']).forEach(cardId => {
                              const propertyId = cardId === 'default' ? 'template-card' : cardId;
                              updates[propertyId] = true;
                            });
                          }
                          
                          // Second Employment cards
                          if (form.watch('income.incomeTypes.secondEmployment')) {
                            (borrowerSecondEmployerCards || ['default']).forEach(cardId => {
                              const propertyId = cardId === 'default' ? 'second-template-card' : cardId;
                              updates[propertyId] = true;
                            });
                          }
                          
                          // Self-Employment cards
                          if (form.watch('income.incomeTypes.selfEmployment')) {
                            (borrowerSelfEmploymentCards || ['default']).forEach(cardId => {
                              const propertyId = cardId === 'default' ? 'self-employment-template-card' : cardId;
                              updates[propertyId] = true;
                            });
                          }
                          
                          // Pension card
                          if (form.watch('income.incomeTypes.pension')) {
                            updates['pension-card'] = true;
                          }
                          
                          // Social Security card
                          if (form.watch('income.incomeTypes.socialSecurity')) {
                            updates['social-security-card'] = true;
                          }
                          
                          setPropertyCardStates(prev => ({ ...prev, ...updates }));
                        }}
                        className="hover:bg-blue-500 hover:text-white"
                        title="Expand All Income Tiles"
                        data-testid="button-expand-all-income"
                      >
                        <Plus className="h-4 w-4" />
                      </Button>
                      
                      {/* Minimize All Button */}
                      <Button
                        type="button"
                        variant="ghost"
                        size="icon"
                        onClick={() => {
                          const updates: Record<string, boolean> = {};
                          
                          // Employment cards
                          if (form.watch('income.incomeTypes.employment')) {
                            (borrowerEmployerCards || ['default']).forEach(cardId => {
                              const propertyId = cardId === 'default' ? 'template-card' : cardId;
                              updates[propertyId] = false;
                            });
                          }
                          
                          // Second Employment cards
                          if (form.watch('income.incomeTypes.secondEmployment')) {
                            (borrowerSecondEmployerCards || ['default']).forEach(cardId => {
                              const propertyId = cardId === 'default' ? 'second-template-card' : cardId;
                              updates[propertyId] = false;
                            });
                          }
                          
                          // Self-Employment cards
                          if (form.watch('income.incomeTypes.selfEmployment')) {
                            (borrowerSelfEmploymentCards || ['default']).forEach(cardId => {
                              const propertyId = cardId === 'default' ? 'self-employment-template-card' : cardId;
                              updates[propertyId] = false;
                            });
                          }
                          
                          // Pension card
                          if (form.watch('income.incomeTypes.pension')) {
                            updates['pension-card'] = false;
                          }
                          
                          // Social Security card
                          if (form.watch('income.incomeTypes.socialSecurity')) {
                            updates['social-security-card'] = false;
                          }
                          
                          setPropertyCardStates(prev => ({ ...prev, ...updates }));
                        }}
                        className="hover:bg-orange-500 hover:text-white"
                        title="Minimize All Income Tiles"
                        data-testid="button-minimize-all-income"
                      >
                        <Minus className="h-4 w-4" />
                      </Button>
                    </div>
                  </div>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
                      <div className="flex items-center space-x-2">
                        <Checkbox
                          id="income-type-employment"
                          checked={form.watch('income.incomeTypes.employment') || false}
                          onCheckedChange={(checked) => handleIncomeTypeChange('income.incomeTypes.employment', !!checked, 'Employment')}
                          data-testid="checkbox-employment"
                          className="transition-transform duration-500 hover:scale-105 data-[state=checked]:rotate-[360deg]"
                        />
                        <Label htmlFor="income-type-employment">Employment</Label>
                      </div>
                      <div className="flex items-center space-x-2">
                        <Checkbox
                          id="income-type-secondEmployment"
                          checked={form.watch('income.incomeTypes.secondEmployment') || false}
                          onCheckedChange={(checked) => handleIncomeTypeChange('income.incomeTypes.secondEmployment', !!checked, 'Second Employment')}
                          data-testid="checkbox-secondEmployment"
                          className="transition-transform duration-500 hover:scale-105 data-[state=checked]:rotate-[360deg]"
                        />
                        <Label htmlFor="income-type-secondEmployment">Second Employment</Label>
                      </div>
                      <div className="flex items-center space-x-2">
                        <Checkbox
                          id="income-type-selfEmployment"
                          checked={form.watch('income.incomeTypes.selfEmployment') || false}
                          onCheckedChange={(checked) => {
                            // Prevent unchecking - once checked, can only be removed via Remove button
                            if (!checked && form.watch('income.incomeTypes.selfEmployment')) {
                              return; // Do nothing - prevent unchecking
                            }
                            handleIncomeTypeChange('income.incomeTypes.selfEmployment', !!checked, 'Self-Employment');
                          }}
                          data-testid="checkbox-selfEmployment"
                          className="transition-transform duration-500 hover:scale-105 data-[state=checked]:rotate-[360deg]"
                        />
                        <Label htmlFor="income-type-selfEmployment">Self-Employment</Label>
                      </div>
                      <div className="flex items-center space-x-2">
                        <Checkbox
                          id="income-type-pension"
                          checked={form.watch('income.incomeTypes.pension') || false}
                          onCheckedChange={(checked) => handleIncomeTypeChange('income.incomeTypes.pension', !!checked, 'Pension')}
                          data-testid="checkbox-pension"
                          className="transition-transform duration-500 hover:scale-105 data-[state=checked]:rotate-[360deg]"
                        />
                        <Label htmlFor="income-type-pension">Pension</Label>
                      </div>
                      <div className="flex items-center space-x-2">
                        <Checkbox
                          id="income-type-socialSecurity"
                          checked={form.watch('income.incomeTypes.socialSecurity') || false}
                          onCheckedChange={(checked) => {
                            // Prevent unchecking - once checked, can only be removed via Remove button
                            if (!checked && form.watch('income.incomeTypes.socialSecurity')) {
                              return; // Do nothing - prevent unchecking
                            }
                            handleIncomeTypeChange('income.incomeTypes.socialSecurity', !!checked, 'Social Security');
                          }}
                          data-testid="checkbox-socialSecurity"
                          className="transition-transform duration-500 hover:scale-105 data-[state=checked]:rotate-[360deg]"
                        />
                        <Label htmlFor="income-type-socialSecurity">Social Security</Label>
                      </div>
                      <div className="flex items-center space-x-2">
                        <Checkbox
                          id="income-type-vaBenefits"
                          checked={form.watch('income.incomeTypes.vaBenefits') || false}
                          onCheckedChange={(checked) => {
                            // Prevent unchecking - once checked, can only be removed via Remove button
                            if (!checked && form.watch('income.incomeTypes.vaBenefits')) {
                              return; // Do nothing - prevent unchecking
                            }
                            handleIncomeTypeChange('income.incomeTypes.vaBenefits', !!checked, 'VA Disability');
                          }}
                          data-testid="checkbox-vaBenefits"
                          className="transition-transform duration-500 hover:scale-105 data-[state=checked]:rotate-[360deg]"
                        />
                        <Label htmlFor="income-type-vaBenefits">Disability</Label>
                      </div>
                      <div className="flex items-center space-x-2" title="Alimony / Child Support">
                        <Checkbox
                          id="income-type-disability"
                          checked={form.watch('income.incomeTypes.disability') || false}
                          onCheckedChange={() => {
                            // Disabled - will be designed later
                            return;
                          }}
                          disabled
                          data-testid="checkbox-disability"
                          className="transition-transform duration-500 hover:scale-105 data-[state=checked]:rotate-[360deg] cursor-not-allowed opacity-50"
                        />
                        <Label htmlFor="income-type-disability" className="cursor-not-allowed opacity-50">Other</Label>
                      </div>
                      <div className="flex items-center space-x-2">
                        <Checkbox
                          id="income-type-property-rental"
                          checked={form.watch('income.incomeTypes.other') || false}
                          onCheckedChange={(checked) => {
                            if (checked) {
                              // Show popup for adding property rental
                              setPropertyRentalDialog({ isOpen: true, type: 'add' });
                            } else {
                              // Show popup for removing property rental
                              setPropertyRentalDialog({ isOpen: true, type: 'remove' });
                            }
                          }}
                          data-testid="checkbox-property-rental"
                          className="transition-transform duration-500 hover:scale-105 data-[state=checked]:rotate-[360deg]"
                        />
                        <Label htmlFor="income-type-property-rental">Rental Property</Label>
                      </div>
                    </div>
                  </div>
                </CardContent>
              </Card>

              {/* Borrower Employer Cards */}
              {form.watch('income.incomeTypes.employment') && (borrowerEmployerCards || ['default']).map((cardId, index) => {
                const propertyId = cardId === 'default' ? 'template-card' : cardId;
                const isOpen = propertyCardStates[propertyId] ?? true;
                
                return (
                  <Card key={cardId} className="transition-colors duration-200">
                    <Collapsible 
                      open={isOpen} 
                      onOpenChange={(open) => {
                        setPropertyCardStates(prev => ({ ...prev, [propertyId]: open }));
                        if (open) {
                          setTimeout(() => {
                            setShowIncomeCardAnimation(prev => ({ ...prev, 'borrower-employment': true }));
                            setTimeout(() => {
                              setShowIncomeCardAnimation(prev => ({ ...prev, 'borrower-employment': false }));
                            }, 800);
                          }, 200);
                        }
                      }}
                    >
                      <CardHeader>
                        <div className="flex items-center justify-between">
                          <div className="flex items-center gap-8">
                            <CardTitle className="flex items-center gap-2">
                              Borrower Employer
                            </CardTitle>
                          </div>
                          <div className="flex items-center gap-2">
                            {/* Add Employer Button */}
                            <Button
                              type="button"
                              variant="outline"
                              size="sm"
                              onClick={() => {
                                const newId = `employer-${Date.now()}`;
                                setBorrowerEmployerCards(prev => [...(prev || ['default']), newId]);
                              }}
                              className="hover:bg-blue-500 hover:text-white"
                              data-testid="button-add-employer"
                              title="Add New Employer"
                            >
                              <Plus className="h-4 w-4 mr-2" />
                              Add Employer
                            </Button>
                            
                            {/* Delete Employer Button */}
                            <Button
                              type="button"
                              variant="outline"
                              size="sm"
                              onClick={() => setDeleteEmployerDialog({ isOpen: true, cardId: propertyId })}
                              className="hover:bg-red-500 hover:text-white"
                              data-testid="button-delete-employer"
                              title="Delete Employer"
                            >
                              <Minus className="h-4 w-4 mr-2" />
                              Remove
                            </Button>
                            
                            <CollapsibleTrigger asChild>
                              <Button 
                                variant="ghost" 
                                size="sm" 
                                className="hover:bg-orange-500 hover:text-white" 
                                data-testid={`button-toggle-income-${propertyId}`}
                                title={isOpen ? 'Minimize' : 'Expand'}
                                key={`employment-income-${propertyId}-${isOpen}`}
                              >
                                {isOpen ? <Minus className="h-4 w-4" /> : <Plus className="h-4 w-4" />}
                              </Button>
                            </CollapsibleTrigger>
                          </div>
                        </div>
                      </CardHeader>
                    
                      <CollapsibleContent>
                        <CardContent>
                          <div className="space-y-6">
                            {/* Employment Type Selection */}
                            <Card className={`bg-muted ${
                              showIncomeCardAnimation['borrower-employment'] ? 'animate-roll-down-subject-property' : ''
                            }`}>
                              <CardContent className="pt-6">
                                <div className="space-y-3">
                                  <div className="flex gap-4">
                                    <div className="flex items-center space-x-2">
                                      <input
                                        type="radio"
                                        id="employment-current"
                                        name="employment-type"
                                        data-testid="radio-employment-current"
                                      />
                                      <Label htmlFor="employment-current">Current Employer</Label>
                                    </div>
                                    
                                    <div className="flex items-center space-x-2">
                                      <input
                                        type="radio"
                                        id="employment-prior"
                                        name="employment-type"
                                        data-testid="radio-employment-prior"
                                      />
                                      <Label htmlFor="employment-prior">Prior Employer</Label>
                                    </div>
                                  </div>
                                </div>
                              </CardContent>
                            </Card>

                            {/* Employment Information - Single Row */}
                            <div className="grid grid-cols-1 md:grid-cols-7 gap-4">
                              <div className="space-y-2">
                                <Label htmlFor="template-employer-name">Employer Name</Label>
                                <Input
                                  id="template-employer-name"
                                  data-testid="input-template-employer-name"
                                />
                              </div>
                              
                              <div className="space-y-2">
                                <div className="flex items-center justify-between mb-2">
                                  <Label htmlFor="template-employer-phone" className="text-xs">
                                    {form.watch(getEmployerFieldPath(cardId, 'isShowingEmploymentVerification')) ? 'Job Verification' : 'Employer Phone'}
                                  </Label>
                                  <Switch
                                    checked={form.watch(getEmployerFieldPath(cardId, 'isShowingEmploymentVerification')) || false}
                                    onCheckedChange={(checked) => form.setValue(getEmployerFieldPath(cardId, 'isShowingEmploymentVerification') as any, checked)}
                                    data-testid="toggle-template-employment-verification"
                                    className="scale-[0.8]"
                                  />
                                </div>
                                <Input
                                  id="template-employer-phone"
                                  placeholder=""
                                  value={form.watch(getEmployerFieldPath(cardId, 'isShowingEmploymentVerification')) 
                                    ? (form.watch(getEmployerFieldPath(cardId, 'employmentVerificationPhone')) || '')
                                    : (form.watch(getEmployerFieldPath(cardId, 'employerPhone')) || '')}
                                  onChange={(e) => {
                                    const value = e.target.value.replace(/\D/g, '');
                                    let formatted = '';
                                    if (value.length > 0) {
                                      formatted = value.substring(0, 3);
                                      if (value.length > 3) {
                                        formatted += '-' + value.substring(3, 6);
                                        if (value.length > 6) {
                                          formatted += '-' + value.substring(6, 10);
                                        }
                                      }
                                    }
                                    const fieldName = form.watch(getEmployerFieldPath(cardId, 'isShowingEmploymentVerification')) 
                                      ? getEmployerFieldPath(cardId, 'employmentVerificationPhone')
                                      : getEmployerFieldPath(cardId, 'employerPhone');
                                    form.setValue(fieldName as any, formatted);
                                  }}
                                  maxLength={12}
                                  data-testid="input-template-employer-phone"
                                />
                              </div>
                              
                              <div className="space-y-2">
                                <Label htmlFor="template-job-title">Job Title</Label>
                                <Input
                                  id="template-job-title"
                                  data-testid="input-template-job-title"
                                />
                              </div>
                              
                              <div className="space-y-2">
                                <Label htmlFor={`income-employer-income-${cardId}`}>Gross Monthly Income</Label>
                                <Controller
                                  control={form.control}
                                  name={getEmployerFieldPath(cardId, 'monthlyIncome')}
                                  defaultValue=""
                                  render={({ field }) => {
                                    const numVal = field.value ? field.value.replace(/[^\d]/g, '') : '';
                                    const displayValue = numVal ? `$${numVal.replace(/\B(?=(\d{3})+(?!\d))/g, ',')}` : '';
                                    
                                    return (
                                      <Input
                                        id={`income-employer-income-${cardId}`}
                                        type="text"
                                        placeholder="$0"
                                        value={displayValue}
                                        onChange={(e) => {
                                          const value = e.target.value.replace(/[^\d]/g, '');
                                          field.onChange(value);
                                        }}
                                        data-testid={`input-income-employer-${cardId}`}
                                      />
                                    );
                                  }}
                                />
                              </div>
                              
                              <div className="space-y-2">
                                <Label htmlFor={`${propertyId}-startDate`}>Start Date</Label>
                                <Input
                                  id={`${propertyId}-startDate`}
                                  value={employmentDates[propertyId]?.startDate || ''}
                                  onChange={(e) => {
                                    const value = e.target.value.replace(/\D/g, ''); // Remove non-digits
                                    let formatted = '';
                                    if (value.length > 0) {
                                      formatted = value.substring(0, 2);
                                      if (value.length > 2) {
                                        formatted += '/' + value.substring(2, 4);
                                        if (value.length > 4) {
                                          formatted += '/' + value.substring(4, 8);
                                        }
                                      }
                                    }
                                    const currentData = employmentDates[propertyId] || { endDate: '', isPresent: false, duration: '' };
                                    updateEmploymentDuration(propertyId, formatted, currentData.endDate, currentData.isPresent);
                                  }}
                                  placeholder="MM/DD/YYYY"
                                  maxLength={10}
                                  data-testid={`input-${propertyId}-startDate`}
                                />
                              </div>
                              
                              <div className="space-y-2">
                                <div className="flex items-center justify-between mb-2">
                                  <Label htmlFor={`${propertyId}-endDate`} className="text-sm">
                                    {employmentDates[propertyId]?.isPresent ? 'Present' : 'End Date'}
                                  </Label>
                                  <Switch
                                    checked={employmentDates[propertyId]?.isPresent ?? false}
                                    onCheckedChange={(checked) => {
                                      const currentData = employmentDates[propertyId] || { startDate: '', endDate: '', duration: '' };
                                      updateEmploymentDuration(propertyId, currentData.startDate, currentData.endDate, checked);
                                    }}
                                    data-testid={`toggle-${propertyId}-present`}
                                    className="scale-[0.8]"
                                  />
                                </div>
                                <Input
                                  id={`${propertyId}-endDate`}
                                  value={employmentDates[propertyId]?.isPresent ? 'present' : (employmentDates[propertyId]?.endDate || '')}
                                  onChange={(e) => {
                                    if (!employmentDates[propertyId]?.isPresent) {
                                      const value = e.target.value.replace(/\D/g, ''); // Remove non-digits
                                      let formatted = '';
                                      if (value.length > 0) {
                                        formatted = value.substring(0, 2);
                                        if (value.length > 2) {
                                          formatted += '/' + value.substring(2, 4);
                                          if (value.length > 4) {
                                            formatted += '/' + value.substring(4, 8);
                                          }
                                        }
                                      }
                                      const currentData = employmentDates[propertyId] || { startDate: '', isPresent: false, duration: '' };
                                      updateEmploymentDuration(propertyId, currentData.startDate, formatted, currentData.isPresent);
                                    }
                                  }}
                                  placeholder={employmentDates[propertyId]?.isPresent ? 'Enter' : 'MM/DD/YYYY'}
                                  maxLength={10}
                                  readOnly={employmentDates[propertyId]?.isPresent}
                                  className={employmentDates[propertyId]?.isPresent ? 'bg-muted' : ''}
                                  data-testid={`input-${propertyId}-endDate`}
                                />
                              </div>
                              
                              <div className="space-y-2">
                                <Label htmlFor={`${propertyId}-employment-duration`}>Employment Duration</Label>
                                <Input
                                  id={`${propertyId}-employment-duration`}
                                  value={employmentDates[propertyId]?.duration || ''}
                                  placeholder={employmentDates[propertyId]?.isPresent ? 'Enter' : '0'}
                                  readOnly={!employmentDates[propertyId]?.isPresent}
                                  className={!employmentDates[propertyId]?.isPresent ? 'bg-muted' : ''}
                                  onChange={(e) => {
                                    if (employmentDates[propertyId]?.isPresent) {
                                      const currentData = employmentDates[propertyId] || { startDate: '', endDate: '', isPresent: false };
                                      setEmploymentDates(prev => ({
                                        ...prev,
                                        [propertyId]: {
                                          ...currentData,
                                          duration: e.target.value
                                        }
                                      }));
                                    }
                                  }}
                                  data-testid={`input-${propertyId}-employment-duration`}
                                />
                              </div>
                            </div>

                            {/* Employer Address Row */}
                            <div className="grid grid-cols-1 md:grid-cols-12 gap-4">
                              <div className="space-y-2 md:col-span-3">
                                <Label htmlFor="template-employer-street">Street Address</Label>
                                <Input
                                  id="template-employer-street"
                                  data-testid="input-template-employer-street"
                                />
                              </div>
                              
                              <div className="space-y-2 md:col-span-1">
                                <Label htmlFor="template-employer-unit">Unit/Suite</Label>
                                <Input
                                  id="template-employer-unit"
                                  data-testid="input-template-employer-unit"
                                />
                              </div>
                              
                              <div className="space-y-2 md:col-span-2">
                                <Label htmlFor="template-employer-city">City</Label>
                                <Input
                                  id="template-employer-city"
                                  data-testid="input-template-employer-city"
                                />
                              </div>
                              
                              <div className="space-y-2 md:col-span-1">
                                <Label htmlFor="template-employer-state">State</Label>
                                <Select
                                  value=""
                                  onValueChange={() => {}}
                                >
                                  <SelectTrigger data-testid="select-template-employer-state">
                                    <SelectValue placeholder="State" />
                                  </SelectTrigger>
                                  <SelectContent>
                                    {US_STATES.map((state) => (
                                      <SelectItem key={state.value} value={state.value}>
                                        {state.value}
                                      </SelectItem>
                                    ))}
                                  </SelectContent>
                                </Select>
                              </div>
                              
                              <div className="space-y-2 md:col-span-1">
                                <Label htmlFor="template-employer-zip">ZIP Code</Label>
                                <Input
                                  id="template-employer-zip"
                                  data-testid="input-template-employer-zip"
                                />
                              </div>
                              
                              <div className="space-y-2 md:col-span-2">
                                <Label htmlFor="template-employer-county">County</Label>
                                <Input
                                  id="template-employer-county"
                                  data-testid="input-template-employer-county"
                                />
                              </div>
                              
                              <div className="space-y-2 md:col-span-2">
                                <Label htmlFor="template-employer-employment-type">Full-Time / Part-Time</Label>
                                <Select
                                  value=""
                                  onValueChange={() => {}}
                                >
                                  <SelectTrigger data-testid="select-template-employer-employment-type">
                                    <SelectValue placeholder="Select" />
                                  </SelectTrigger>
                                  <SelectContent>
                                    <SelectItem value="Full-Time">Full-Time</SelectItem>
                                    <SelectItem value="Part-Time">Part-Time</SelectItem>
                                  </SelectContent>
                                </Select>
                              </div>
                            </div>

                          </div>
                        </CardContent>
                      </CollapsibleContent>
                    </Collapsible>
                  </Card>
                );
              })}

              {/* Borrower Second Employment Cards */}
              {form.watch('income.incomeTypes.secondEmployment') && (borrowerSecondEmployerCards || ['default']).map((cardId, index) => {
                const propertyId = cardId === 'default' ? 'second-template-card' : cardId;
                const isOpen = propertyCardStates[propertyId] ?? true;
                
                return (
                  <Card key={cardId} className="transition-colors duration-200">
                    <Collapsible 
                      open={isOpen} 
                      onOpenChange={(open) => {
                        setPropertyCardStates(prev => ({ ...prev, [propertyId]: open }));
                        if (open) {
                          setTimeout(() => {
                            setShowIncomeCardAnimation(prev => ({ ...prev, 'borrower-second-employment': true }));
                            setTimeout(() => {
                              setShowIncomeCardAnimation(prev => ({ ...prev, 'borrower-second-employment': false }));
                            }, 800);
                          }, 200);
                        }
                      }}
                    >
                      <CardHeader>
                        <div className="flex items-center justify-between">
                          <div className="flex items-center gap-8">
                            <CardTitle className="flex items-center gap-2">
                              Borrower - Second Employer
                            </CardTitle>
                          </div>
                          <div className="flex items-center gap-2">
                            {/* Add Employer Button */}
                            <Button
                              type="button"
                              variant="outline"
                              size="sm"
                              onClick={() => {
                                const newId = `second-employer-${Date.now()}`;
                                setBorrowerSecondEmployerCards(prev => [...(prev || ['default']), newId]);
                              }}
                              className="hover:bg-blue-500 hover:text-white"
                              data-testid="button-add-second-employer"
                              title="Add New Employer"
                            >
                              <Plus className="h-4 w-4 mr-2" />
                              Add Employer
                            </Button>
                            
                            {/* Delete Employer Button */}
                            <Button
                              type="button"
                              variant="outline"
                              size="sm"
                              onClick={() => setDeleteSecondEmployerDialog({ isOpen: true, cardId: propertyId })}
                              className="hover:bg-red-500 hover:text-white"
                              data-testid="button-delete-second-employer"
                              title="Delete Employer"
                            >
                              <Minus className="h-4 w-4 mr-2" />
                              Remove
                            </Button>
                            
                            <CollapsibleTrigger asChild>
                              <Button 
                                variant="ghost" 
                                size="sm" 
                                className="hover:bg-orange-500 hover:text-white" 
                                data-testid={`button-toggle-second-employment-income-${propertyId}`}
                                title={isOpen ? 'Minimize' : 'Expand'}
                                key={`second-employment-income-${propertyId}-${isOpen}`}
                              >
                                {isOpen ? <Minus className="h-4 w-4" /> : <Plus className="h-4 w-4" />}
                              </Button>
                            </CollapsibleTrigger>
                          </div>
                        </div>
                      </CardHeader>
                    
                    <CollapsibleContent>
                      <CardContent>
                        <div className="space-y-6">
                          {/* Employment Type Selection */}
                          <Card className={`bg-muted ${
                            showIncomeCardAnimation['borrower-second-employment'] ? 'animate-roll-down-subject-property' : ''
                          }`}>
                            <CardContent className="pt-6">
                              <div className="space-y-3">
                                <div className="flex gap-4">
                                  <div className="flex items-center space-x-2">
                                    <input
                                      type="radio"
                                      id="second-employment-current"
                                      name="second-employment-type"
                                      data-testid="radio-second-employment-current"
                                    />
                                    <Label htmlFor="second-employment-current">Current Employer</Label>
                                  </div>
                                  
                                  <div className="flex items-center space-x-2">
                                    <input
                                      type="radio"
                                      id="second-employment-prior"
                                      name="second-employment-type"
                                      data-testid="radio-second-employment-prior"
                                    />
                                    <Label htmlFor="second-employment-prior">Prior Employer</Label>
                                  </div>
                                </div>
                              </div>
                            </CardContent>
                          </Card>

                          {/* Employment Information - Single Row */}
                          <div className="grid grid-cols-1 md:grid-cols-7 gap-4">
                            <div className="space-y-2">
                              <Label htmlFor={`income-secondEmployerName-${cardId}`}>Employer Name</Label>
                              <Input
                                id={`income-secondEmployerName-${cardId}`}
                                {...form.register(getSecondEmployerFieldPath(cardId, 'employerName'))}
                                data-testid={`input-income-secondEmployerName-${cardId}`}
                              />
                            </div>
                            
                            <div className="space-y-2">
                              <div className="flex items-center justify-between mb-2">
                                <Label htmlFor={`income-second-employer-phone-${cardId}`} className="text-xs">
                                  {form.watch(getSecondEmployerFieldPath(cardId, 'isShowingEmploymentVerification')) ? 'Job Verification' : 'Employer Phone'}
                                </Label>
                                <Switch
                                  checked={form.watch(getSecondEmployerFieldPath(cardId, 'isShowingEmploymentVerification')) || false}
                                  onCheckedChange={(checked) => form.setValue(getSecondEmployerFieldPath(cardId, 'isShowingEmploymentVerification') as any, checked)}
                                  data-testid={`toggle-second-employment-verification-${cardId}`}
                                  className="scale-[0.8]"
                                />
                              </div>
                              <Input
                                id={`income-second-employer-phone-${cardId}`}
                                placeholder=""
                                value={form.watch(getSecondEmployerFieldPath(cardId, 'isShowingEmploymentVerification')) 
                                  ? (form.watch(getSecondEmployerFieldPath(cardId, 'employmentVerificationPhone')) || '')
                                  : (form.watch(getSecondEmployerFieldPath(cardId, 'employerPhone')) || '')}
                                onChange={(e) => {
                                  const value = e.target.value.replace(/\D/g, '');
                                  let formatted = '';
                                  if (value.length > 0) {
                                    formatted = value.substring(0, 3);
                                    if (value.length > 3) {
                                      formatted += '-' + value.substring(3, 6);
                                      if (value.length > 6) {
                                        formatted += '-' + value.substring(6, 10);
                                      }
                                    }
                                  }
                                  const fieldName = form.watch(getSecondEmployerFieldPath(cardId, 'isShowingEmploymentVerification')) 
                                    ? getSecondEmployerFieldPath(cardId, 'employmentVerificationPhone')
                                    : getSecondEmployerFieldPath(cardId, 'employerPhone');
                                  form.setValue(fieldName as any, formatted);
                                }}
                                maxLength={12}
                                data-testid={`input-income-second-employer-phone-${cardId}`}
                              />
                            </div>
                            
                            <div className="space-y-2">
                              <Label htmlFor={`income-secondJobTitle-${cardId}`}>Job Title</Label>
                              <Input
                                id={`income-secondJobTitle-${cardId}`}
                                {...form.register(getSecondEmployerFieldPath(cardId, 'jobTitle'))}
                                data-testid={`input-income-secondJobTitle-${cardId}`}
                              />
                            </div>
                            
                            <div className="space-y-2">
                              <Label htmlFor={`income-secondMonthlyIncome-${cardId}`}>Gross Monthly Income</Label>
                              <Controller
                                control={form.control}
                                name={getSecondEmployerFieldPath(cardId, 'monthlyIncome')}
                                defaultValue=""
                                render={({ field }) => {
                                  const numVal = field.value ? field.value.replace(/[^\d]/g, '') : '';
                                  const displayValue = numVal ? `$${numVal.replace(/\B(?=(\d{3})+(?!\d))/g, ',')}` : '';
                                  
                                  return (
                                    <Input
                                      id={`income-secondMonthlyIncome-${cardId}`}
                                      type="text"
                                      placeholder="$0"
                                      value={displayValue}
                                      onChange={(e) => {
                                        const value = e.target.value.replace(/[^\d]/g, '');
                                        field.onChange(value);
                                      }}
                                      data-testid={`input-income-secondMonthlyIncome-${cardId}`}
                                    />
                                  );
                                }}
                              />
                            </div>
                            
                            <div className="space-y-2">
                              <Label htmlFor={`income-second-startDate-${cardId}`}>Start Date</Label>
                              <Input
                                id={`income-second-startDate-${cardId}`}
                                value={employmentDates[`second-employment-${cardId}`]?.startDate || ''}
                                onChange={(e) => {
                                  const value = e.target.value.replace(/\D/g, ''); // Remove non-digits
                                  let formatted = '';
                                  if (value.length > 0) {
                                    formatted = value.substring(0, 2);
                                    if (value.length > 2) {
                                      formatted += '/' + value.substring(2, 4);
                                      if (value.length > 4) {
                                        formatted += '/' + value.substring(4, 8);
                                      }
                                    }
                                  }
                                  const currentData = employmentDates[`second-employment-${cardId}`] || { endDate: '', isPresent: false, duration: '' };
                                  updateEmploymentDuration(`second-employment-${cardId}`, formatted, currentData.endDate, currentData.isPresent);
                                }}
                                placeholder="MM/DD/YYYY"
                                maxLength={10}
                                data-testid={`input-income-second-startDate-${cardId}`}
                              />
                            </div>
                            
                            <div className="space-y-2">
                              <div className="flex items-center justify-between mb-2">
                                <Label htmlFor={`income-second-endDate-${cardId}`} className="text-sm">
                                  {employmentDates[`second-employment-${cardId}`]?.isPresent ? 'Present' : 'End Date'}
                                </Label>
                                <Switch
                                  checked={employmentDates[`second-employment-${cardId}`]?.isPresent ?? false}
                                  onCheckedChange={(checked) => {
                                    const currentData = employmentDates[`second-employment-${cardId}`] || { startDate: '', endDate: '', duration: '' };
                                    updateEmploymentDuration(`second-employment-${cardId}`, currentData.startDate, currentData.endDate, checked);
                                  }}
                                  data-testid="toggle-second-employment-present"
                                  className="scale-[0.8]"
                                />
                              </div>
                              <Input
                                id={`income-second-endDate-${cardId}`}
                                value={employmentDates[`second-employment-${cardId}`]?.isPresent ? 'present' : (employmentDates[`second-employment-${cardId}`]?.endDate || '')}
                                onChange={(e) => {
                                  if (!employmentDates[`second-employment-${cardId}`]?.isPresent) {
                                    const value = e.target.value.replace(/\D/g, ''); // Remove non-digits
                                    let formatted = '';
                                    if (value.length > 0) {
                                      formatted = value.substring(0, 2);
                                      if (value.length > 2) {
                                        formatted += '/' + value.substring(2, 4);
                                        if (value.length > 4) {
                                          formatted += '/' + value.substring(4, 8);
                                        }
                                      }
                                    }
                                    const currentData = employmentDates[`second-employment-${cardId}`] || { startDate: '', isPresent: false, duration: '' };
                                    updateEmploymentDuration(`second-employment-${cardId}`, currentData.startDate, formatted, currentData.isPresent);
                                  }
                                }}
                                placeholder={employmentDates[`second-employment-${cardId}`]?.isPresent ? 'Enter' : 'MM/DD/YYYY'}
                                maxLength={10}
                                readOnly={employmentDates[`second-employment-${cardId}`]?.isPresent}
                                className={employmentDates[`second-employment-${cardId}`]?.isPresent ? 'bg-muted' : ''}
                                data-testid={`input-income-second-endDate-${cardId}`}
                              />
                            </div>
                            
                            <div className="space-y-2">
                              <Label htmlFor="income-second-employment-duration">Employment Duration</Label>
                              <Input
                                id="income-second-employment-duration"
                                value={employmentDates['second-employment']?.duration || ''}
                                placeholder={employmentDates['second-employment']?.isPresent ? 'Enter' : '0'}
                                readOnly={!employmentDates['second-employment']?.isPresent}
                                className={!employmentDates['second-employment']?.isPresent ? 'bg-muted' : ''}
                                onChange={(e) => {
                                  if (employmentDates['second-employment']?.isPresent) {
                                    const currentData = employmentDates['second-employment'] || { startDate: '', endDate: '', isPresent: false };
                                    setEmploymentDates(prev => ({
                                      ...prev,
                                      'second-employment': {
                                        ...currentData,
                                        duration: e.target.value
                                      }
                                    }));
                                  }
                                }}
                                data-testid="input-income-second-employment-duration"
                              />
                            </div>
                          </div>

                          {/* Employer Address Row */}
                          <div className="grid grid-cols-1 md:grid-cols-12 gap-4">
                            <div className="space-y-2 md:col-span-3">
                              <Label htmlFor={`income-secondEmployerAddress-street-${cardId}`}>Street Address</Label>
                              <Input
                                id={`income-secondEmployerAddress-street-${cardId}`}
                                {...form.register(getSecondEmployerFieldPath(cardId, 'employerAddress.street'))}
                                data-testid={`input-income-secondEmployerAddress-street-${cardId}`}
                              />
                            </div>
                            
                            <div className="space-y-2 md:col-span-1">
                              <Label htmlFor={`income-secondEmployerAddress-unit-${cardId}`}>Unit/Suite</Label>
                              <Input
                                id={`income-secondEmployerAddress-unit-${cardId}`}
                                {...form.register(getSecondEmployerFieldPath(cardId, 'employerAddress.unit'))}
                                data-testid={`input-income-secondEmployerAddress-unit-${cardId}`}
                              />
                            </div>
                            
                            <div className="space-y-2 md:col-span-2">
                              <Label htmlFor="income-secondEmployerAddress-city">City</Label>
                              <Input
                                id={`income-secondEmployerAddress-city-${cardId}`}
                                {...form.register(getSecondEmployerFieldPath(cardId, 'employerAddress.city'))}
                                data-testid={`input-income-secondEmployerAddress-city-${cardId}`}
                              />
                            </div>
                            
                            <div className="space-y-2 md:col-span-1">
                              <Label htmlFor="income-secondEmployerAddress-state">State</Label>
                              <Select
                                value={form.watch(getSecondEmployerFieldPath(cardId, 'employerAddress.state')) || ''}
                                onValueChange={(value) => form.setValue(getSecondEmployerFieldPath(cardId, 'employerAddress.state') as any, value)}
                              >
                                <SelectTrigger data-testid="select-income-secondEmployerAddress-state">
                                  <SelectValue placeholder="State" />
                                </SelectTrigger>
                                <SelectContent>
                                  {US_STATES.map((state) => (
                                    <SelectItem key={state.value} value={state.value}>
                                      {state.value}
                                    </SelectItem>
                                  ))}
                                </SelectContent>
                              </Select>
                            </div>
                            
                            <div className="space-y-2 md:col-span-1">
                              <Label htmlFor="income-secondEmployerAddress-zip">ZIP Code</Label>
                              <Input
                                id={`income-secondEmployerAddress-zip-${cardId}`}
                                {...form.register(getSecondEmployerFieldPath(cardId, 'employerAddress.zip'))}
                                data-testid={`input-income-secondEmployerAddress-zip-${cardId}`}
                              />
                            </div>
                            
                            <div className="space-y-2 md:col-span-2">
                              <Label htmlFor="income-secondEmployerAddress-county">County</Label>
                              <Input
                                id={`income-secondEmployerAddress-county-${cardId}`}
                                {...form.register(getSecondEmployerFieldPath(cardId, 'employerAddress.county'))}
                                data-testid={`input-income-secondEmployerAddress-county-${cardId}`}
                              />
                            </div>
                            
                            <div className="space-y-2 md:col-span-2">
                              <Label htmlFor="income-secondEmploymentType">Full-Time / Part-Time</Label>
                              <Select
                                value={form.watch(getSecondEmployerFieldPath(cardId, 'employmentType')) || ''}
                                onValueChange={(value) => form.setValue(getSecondEmployerFieldPath(cardId, 'employmentType') as any, value)}
                              >
                                <SelectTrigger data-testid="select-income-secondEmploymentType">
                                  <SelectValue placeholder="Select type" />
                                </SelectTrigger>
                                <SelectContent>
                                  <SelectItem value="Full-Time">Full-Time</SelectItem>
                                  <SelectItem value="Part-Time">Part-Time</SelectItem>
                                </SelectContent>
                              </Select>
                            </div>
                          </div>

                        </div>
                      </CardContent>
                    </CollapsibleContent>
                  </Collapsible>
                </Card>
                );
              })}

              {/* Borrower - Self-Employment Cards */}
              {form.watch('income.incomeTypes.selfEmployment') && (borrowerSelfEmploymentCards || ['default']).map((cardId, index) => {
                const propertyId = cardId === 'default' ? 'self-employment-template-card' : cardId;
                const isOpen = propertyCardStates[propertyId] ?? true;
                
                return (
                  <Card key={cardId} className="transition-colors duration-200">
                    <Collapsible 
                      open={isOpen} 
                      onOpenChange={(open) => {
                        setPropertyCardStates(prev => ({ ...prev, [propertyId]: open }));
                        if (open) {
                          setTimeout(() => {
                            setShowIncomeCardAnimation(prev => ({ ...prev, 'borrower-self-employment': true }));
                            setTimeout(() => {
                              setShowIncomeCardAnimation(prev => ({ ...prev, 'borrower-self-employment': false }));
                            }, 800);
                          }, 200);
                        }
                      }}
                    >
                      <CardHeader>
                        <div className="flex items-center justify-between">
                          <div className="flex items-center gap-8">
                            <CardTitle className="flex items-center gap-2">
                              Borrower - Self-Employment
                            </CardTitle>
                          </div>
                          <div className="flex items-center gap-2">
                            {/* Add Self-Employment Button */}
                            <Button
                              type="button"
                              variant="outline"
                              size="sm"
                              onClick={() => {
                                const newId = `self-employment-${Date.now()}`;
                                setBorrowerSelfEmploymentCards(prev => [...(prev || ['default']), newId]);
                              }}
                              className="hover:bg-blue-500 hover:text-white"
                              data-testid="button-add-self-employment"
                              title="Add New Self-Employment"
                            >
                              <Plus className="h-4 w-4 mr-2" />
                              Add Self-Employment
                            </Button>
                            
                            {/* Delete Self-Employment Button - always show for default card, conditionally for additional cards */}
                            {(cardId === 'default' || (borrowerSelfEmploymentCards || []).length > 1) && (
                              <Button
                                type="button"
                                variant="outline"
                                size="sm"
                                onClick={() => setDeleteSelfEmploymentDialog({ isOpen: true, cardId: propertyId })}
                                className="hover:bg-red-500 hover:text-white"
                                data-testid={`button-delete-self-employment-${cardId}`}
                                title="Delete Self-Employment"
                              >
                                <Minus className="h-4 w-4 mr-2" />
                                Remove
                              </Button>
                            )}
                            
                            <CollapsibleTrigger asChild>
                              <Button 
                                variant="ghost" 
                                size="sm" 
                                className="hover:bg-orange-500 hover:text-white" 
                                data-testid={`button-toggle-self-employment-${propertyId}`}
                                title={isOpen ? 'Minimize' : 'Expand'}
                                key={`self-employment-${propertyId}-${isOpen}`}
                              >
                                {isOpen ? <Minus className="h-4 w-4" /> : <Plus className="h-4 w-4" />}
                              </Button>
                            </CollapsibleTrigger>
                          </div>
                        </div>
                      </CardHeader>
                    <CollapsibleContent>
                      <CardContent className="space-y-4">
                      {/* Employment Type Selection */}
                      <Card className={`bg-muted ${
                        showIncomeCardAnimation['borrower-self-employment'] ? 'animate-roll-down-subject-property' : ''
                      }`}>
                        <CardContent className="pt-6">
                          <div className="space-y-3">
                            <div className="flex gap-4 justify-between items-center">
                              <div className="flex gap-4">
                                <div className="flex items-center space-x-2">
                                  <input
                                    type="radio"
                                    id="self-employment-current"
                                    name="self-employment-type"
                                    data-testid="radio-self-employment-current"
                                  />
                                  <Label htmlFor="self-employment-current">Current</Label>
                                </div>
                                
                                <div className="flex items-center space-x-2">
                                  <input
                                    type="radio"
                                    id="self-employment-prior"
                                    name="self-employment-type"
                                    data-testid="radio-self-employment-prior"
                                  />
                                  <Label htmlFor="self-employment-prior">Prior</Label>
                                </div>
                              </div>
                              
                              <div className="flex gap-2 mr-4">
                                <Button
                                  type="button"
                                  variant="outline"
                                  size="sm"
                                  onClick={() => openBusinessDescriptionDialog(cardId)}
                                  className="bg-gray-300 text-gray-700 hover:bg-gray-400 min-w-[180px]"
                                  style={{ backgroundColor: '#d1d5db', borderColor: '#d1d5db', color: '#374151' }}
                                  data-testid="button-self-employment-description"
                                  title="Description"
                                >
                                  Description
                                </Button>
                                <Button
                                  type="button"
                                  variant="outline"
                                  size="sm"
                                  onClick={() => openTaxPreparerDialog(cardId)}
                                  className="bg-gray-300 text-gray-700 hover:bg-gray-400 min-w-[110px]"
                                  style={{ backgroundColor: '#d1d5db', borderColor: '#d1d5db', color: '#374151' }}
                                  data-testid="button-self-employment-filing"
                                  title="Filing"
                                >
                                  Filing
                                </Button>
                              </div>
                            </div>
                          </div>
                        </CardContent>
                      </Card>

                      {/* First row with business details */}
                      <div className="grid grid-cols-1 md:grid-cols-6 gap-4">
                        <div className="space-y-2">
                          <Label htmlFor={`income-businessName-${cardId}`}>Business / DBA Name</Label>
                          <Controller
                            control={form.control}
                            name={getSelfEmploymentFieldPath(cardId, 'businessName')}
                            render={({ field }) => (
                              <Input
                                id={`income-businessName-${cardId}`}
                                {...field}
                                data-testid={`input-income-businessName-${cardId}`}
                              />
                            )}
                          />
                        </div>
                        
                        <div className="space-y-2">
                          <Label htmlFor={`income-businessPhone-${cardId}`}>Phone</Label>
                          <Input
                            id={`income-businessPhone-${cardId}`}
                            placeholder=""
                            value={form.watch(getSelfEmploymentFieldPath(cardId, 'businessPhone')) || ''}
                            onChange={(e) => {
                              const value = e.target.value.replace(/\D/g, '');
                              let formatted = '';
                              if (value.length > 0) {
                                formatted = value.substring(0, 3);
                                if (value.length > 3) {
                                  formatted += '-' + value.substring(3, 6);
                                  if (value.length > 6) {
                                    formatted += '-' + value.substring(6, 10);
                                  }
                                }
                              }
                              form.setValue(getSelfEmploymentFieldPath(cardId, 'businessPhone') as any, formatted);
                            }}
                            maxLength={12}
                            data-testid={`input-income-businessPhone-${cardId}`}
                          />
                        </div>
                        
                        
                        <div className="space-y-2">
                          <Label htmlFor={`income-annualRevenue-${cardId}`}>Gross Monthly Income</Label>
                          <Controller
                            control={form.control}
                            name={getSelfEmploymentFieldPath(cardId, 'grossAnnualRevenue')}
                            defaultValue=""
                            render={({ field }) => {
                              const numVal = field.value ? field.value.replace(/[^\d]/g, '') : '';
                              const displayValue = numVal ? `$${numVal.replace(/\B(?=(\d{3})+(?!\d))/g, ',')}` : '';
                              
                              return (
                                <Input
                                  id={`income-annualRevenue-${cardId}`}
                                  type="text"
                                  placeholder="$0"
                                  value={displayValue}
                                  onChange={(e) => {
                                    const value = e.target.value.replace(/[^\d]/g, '');
                                    field.onChange(value);
                                  }}
                                  data-testid={`input-income-annualRevenue-${cardId}`}
                                />
                              );
                            }}
                          />
                        </div>
                        
                        <div className="space-y-2">
                          <Label htmlFor={`income-self-employment-startDate-${cardId}`}>Start Date</Label>
                          <Input
                            id={`income-self-employment-startDate-${cardId}`}
                            value={employmentDates[propertyId]?.startDate || ''}
                            onChange={(e) => {
                              const value = e.target.value.replace(/\D/g, ''); // Remove non-digits
                              let formatted = '';
                              if (value.length > 0) {
                                formatted = value.substring(0, 2);
                                if (value.length > 2) {
                                  formatted += '/' + value.substring(2, 4);
                                  if (value.length > 4) {
                                    formatted += '/' + value.substring(4, 8);
                                  }
                                }
                              }
                              const currentData = employmentDates[propertyId] || { endDate: '', isPresent: false, duration: '' };
                              updateEmploymentDuration(propertyId, formatted, currentData.endDate, currentData.isPresent);
                            }}
                            placeholder="MM/DD/YYYY"
                            maxLength={10}
                            data-testid={`input-income-self-employment-startDate-${cardId}`}
                          />
                        </div>
                        
                        <div className="space-y-2">
                          <div className="flex items-center justify-between mb-2">
                            <Label htmlFor={`income-self-employment-endDate-${cardId}`} className="text-sm">
                              {employmentDates[propertyId]?.isPresent ? 'Present' : 'End Date'}
                            </Label>
                            <Switch
                              checked={employmentDates[propertyId]?.isPresent ?? true}
                              onCheckedChange={(checked) => {
                                const currentData = employmentDates[propertyId] || { startDate: '', endDate: '', duration: '' };
                                updateEmploymentDuration(propertyId, currentData.startDate, currentData.endDate, checked);
                              }}
                              data-testid={`toggle-self-employment-present-${cardId}`}
                              className="scale-[0.8]"
                            />
                          </div>
                          <Input
                            id={`income-self-employment-endDate-${cardId}`}
                            value={employmentDates[propertyId]?.isPresent ? 'present' : (employmentDates[propertyId]?.endDate || '')}
                            onChange={(e) => {
                              if (!employmentDates[propertyId]?.isPresent) {
                                const value = e.target.value.replace(/\D/g, ''); // Remove non-digits
                                let formatted = '';
                                if (value.length > 0) {
                                  formatted = value.substring(0, 2);
                                  if (value.length > 2) {
                                    formatted += '/' + value.substring(2, 4);
                                    if (value.length > 4) {
                                      formatted += '/' + value.substring(4, 8);
                                    }
                                  }
                                }
                                const currentData = employmentDates[propertyId] || { startDate: '', isPresent: false, duration: '' };
                                updateEmploymentDuration(propertyId, currentData.startDate, formatted, currentData.isPresent);
                              }
                            }}
                            placeholder={employmentDates[propertyId]?.isPresent ? 'Present' : 'MM/DD/YYYY'}
                            maxLength={10}
                            readOnly={employmentDates[propertyId]?.isPresent}
                            className={employmentDates[propertyId]?.isPresent ? 'bg-muted' : ''}
                            data-testid={`input-income-self-employment-endDate-${cardId}`}
                          />
                        </div>
                        
                        <div className="space-y-2">
                          <Label htmlFor={`income-self-employment-duration-${cardId}`}>Duration</Label>
                          <Input
                            id={`income-self-employment-duration-${cardId}`}
                            value={employmentDates[propertyId]?.duration || ''}
                            placeholder={employmentDates[propertyId]?.isPresent ? 'Enter' : '0'}
                            readOnly={!employmentDates[propertyId]?.isPresent}
                            className={!employmentDates[propertyId]?.isPresent ? 'bg-muted' : ''}
                            onChange={(e) => {
                              if (employmentDates[propertyId]?.isPresent) {
                                const currentData = employmentDates[propertyId] || { startDate: '', endDate: '', isPresent: false };
                                setEmploymentDates(prev => ({
                                  ...prev,
                                  [propertyId]: {
                                    ...currentData,
                                    duration: e.target.value
                                  }
                                }));
                              }
                            }}
                            data-testid={`input-income-self-employment-duration-${cardId}`}
                          />
                        </div>
                      </div>
                        
                        {/* Business Address Row (copied from borrower residence address) */}
                        <div className="grid grid-cols-1 md:grid-cols-12 gap-4">
                          <div className="space-y-2 md:col-span-3">
                            <Label htmlFor={`income-business-street-${cardId}`}>Street Address</Label>
                            <Controller
                              control={form.control}
                              name={getSelfEmploymentFieldPath(cardId, 'businessAddress.street')}
                              render={({ field }) => (
                                <Input
                                  id={`income-business-street-${cardId}`}
                                  {...field}
                                  data-testid={`input-income-business-street-${cardId}`}
                                />
                              )}
                            />
                          </div>
                          
                          <div className="space-y-2 md:col-span-1">
                            <Label htmlFor={`income-business-unit-${cardId}`}>Unit/Suite</Label>
                            <Controller
                              control={form.control}
                              name={getSelfEmploymentFieldPath(cardId, 'businessAddress.unit')}
                              render={({ field }) => (
                                <Input
                                  id={`income-business-unit-${cardId}`}
                                  {...field}
                                  data-testid={`input-income-business-unit-${cardId}`}
                                />
                              )}
                            />
                          </div>
                          
                          <div className="space-y-2 md:col-span-2">
                            <Label htmlFor={`income-business-city-${cardId}`}>City</Label>
                            <Controller
                              control={form.control}
                              name={getSelfEmploymentFieldPath(cardId, 'businessAddress.city')}
                              render={({ field }) => (
                                <Input
                                  id={`income-business-city-${cardId}`}
                                  {...field}
                                  data-testid={`input-income-business-city-${cardId}`}
                                />
                              )}
                            />
                          </div>
                          
                          <div className="space-y-2 md:col-span-1">
                            <Label htmlFor={`income-business-state-${cardId}`}>State</Label>
                            <Select
                              value={form.watch(getSelfEmploymentFieldPath(cardId, 'businessAddress.state')) || ''}
                              onValueChange={(value) => form.setValue(getSelfEmploymentFieldPath(cardId, 'businessAddress.state') as any, value)}
                            >
                              <SelectTrigger data-testid={`select-income-business-state-${cardId}`}>
                                <SelectValue placeholder="State" />
                              </SelectTrigger>
                              <SelectContent>
                                {US_STATES.map((state) => (
                                  <SelectItem key={state.value} value={state.value}>
                                    {state.value}
                                  </SelectItem>
                                ))}
                              </SelectContent>
                            </Select>
                          </div>
                          
                          <div className="space-y-2 md:col-span-1">
                            <Label htmlFor={`income-business-zip-${cardId}`}>ZIP Code</Label>
                            <Controller
                              control={form.control}
                              name={getSelfEmploymentFieldPath(cardId, 'businessAddress.zip')}
                              render={({ field }) => (
                                <Input
                                  id={`income-business-zip-${cardId}`}
                                  {...field}
                                  data-testid={`input-income-business-zip-${cardId}`}
                                />
                              )}
                            />
                          </div>
                          
                          <div className="space-y-2 md:col-span-2">
                            <Label htmlFor={`income-business-county-${cardId}`}>County</Label>
                            <Controller
                              control={form.control}
                              name={getSelfEmploymentFieldPath(cardId, 'businessAddress.county')}
                              render={({ field }) => (
                                <Input
                                  id={`income-business-county-${cardId}`}
                                  {...field}
                                  data-testid={`input-income-business-county-${cardId}`}
                                />
                              )}
                            />
                          </div>
                          
                          <div className="space-y-2 md:col-span-2">
                            <Label htmlFor={`income-formation-${cardId}`}>Formation</Label>
                            <Select 
                              onValueChange={(value) => form.setValue(getSelfEmploymentFieldPath(cardId, 'formation') as any, value)} 
                              value={form.watch(getSelfEmploymentFieldPath(cardId, 'formation')) || ''}
                            >
                              <SelectTrigger data-testid={`select-income-formation-${cardId}`}>
                                <SelectValue placeholder="Select" />
                              </SelectTrigger>
                              <SelectContent>
                                <SelectItem value="Sole Proprietorship" data-testid="select-item-sole-proprietorship">Sole Proprietorship</SelectItem>
                                <SelectItem value="General Partnership (GP)" data-testid="select-item-general-partnership">General Partnership (GP)</SelectItem>
                                <SelectItem value="Limited Partnership (LP)" data-testid="select-item-limited-partnership">Limited Partnership (LP)</SelectItem>
                                <SelectItem value="Limited Liability Partnership (LLP)" data-testid="select-item-llp">Limited Liability Partnership (LLP)</SelectItem>
                                <SelectItem value="LLC taxed as S-Corp" data-testid="select-item-llc-s-corp">LLC taxed as S-Corp</SelectItem>
                                <SelectItem value="LLC taxed as C-Corp" data-testid="select-item-llc-c-corp">LLC taxed as C-Corp</SelectItem>
                                <SelectItem value="C Corporation (C-Corp)" data-testid="select-item-c-corporation">C Corporation (C-Corp)</SelectItem>
                                <SelectItem value="S Corporation (S-Corp)" data-testid="select-item-s-corporation">S Corporation (S-Corp)</SelectItem>
                                <SelectItem value="Benefit Corporation (B-Corp)" data-testid="select-item-benefit-corporation">Benefit Corporation (B-Corp)</SelectItem>
                                <SelectItem value="Close Corporation" data-testid="select-item-close-corporation">Close Corporation</SelectItem>
                                <SelectItem value="Non-Profit Corporation" data-testid="select-item-non-profit-corporation">Non-Profit Corporation</SelectItem>
                                <SelectItem value="Professional Corporation (PC)" data-testid="select-item-professional-corporation">Professional Corporation (PC)</SelectItem>
                                <SelectItem value="Professional LLC (PLLC)" data-testid="select-item-professional-llc">Professional LLC (PLLC)</SelectItem>
                                <SelectItem value="Joint Venture" data-testid="select-item-joint-venture">Joint Venture</SelectItem>
                                <SelectItem value="CPA" data-testid="select-item-cpa">CPA</SelectItem>
                                <SelectItem value="Other" data-testid="select-item-other-tax">Other</SelectItem>
                              </SelectContent>
                            </Select>
                          </div>
                        </div>
                        
                      </CardContent>
                    </CollapsibleContent>
                  </Collapsible>
                </Card>
                );
              })}

              {/* Pension Income Card */}
              {form.watch('income.incomeTypes.pension') && (
                <Card>
                  <Collapsible open={isPensionIncomeOpen} onOpenChange={(open) => {
                    setIsPensionIncomeOpen(open);
                    if (open && !showIncomeCardAnimation['pension']) {
                      setTimeout(() => {
                        setShowIncomeCardAnimation(prev => ({ ...prev, 'pension': true }));
                        setTimeout(() => {
                          setShowIncomeCardAnimation(prev => ({ ...prev, 'pension': false }));
                        }, 800);
                      }, 200);
                    }
                  }}>
                    <CardHeader>
                      <div className="flex items-center justify-between">
                        <CardTitle>Borrower - Pension</CardTitle>
                        <div className="flex items-center gap-2">
                          <Button 
                            type="button" 
                            variant="outline" 
                            size="sm" 
                            onClick={addBorrowerPension}
                            className="hover:bg-blue-500 hover:text-white"
                            data-testid="button-add-borrower-pension-header"
                            title="Add New Pension"
                          >
                            <Plus className="h-4 w-4 mr-2" />
                            Add Pension
                          </Button>
                          <Button
                            type="button"
                            variant="outline"
                            size="sm"
                            onClick={removeDefaultBorrowerPension}
                            className="hover:bg-red-500 hover:text-white"
                            data-testid="button-remove-default-pension"
                            title="Delete Pension"
                          >
                            <Minus className="h-4 w-4 mr-2" />
                            Remove
                          </Button>
                          <CollapsibleTrigger asChild>
                            <Button 
                              variant="ghost" 
                              size="sm" 
                              className="hover:bg-orange-500 hover:text-white" 
                              data-testid="button-toggle-pension-income"
                              title={isPensionIncomeOpen ? 'Minimize' : 'Expand'}
                              key={`pension-income-${isPensionIncomeOpen}`}
                            >
                              {isPensionIncomeOpen ? <Minus className="h-4 w-4" /> : <Plus className="h-4 w-4" />}
                            </Button>
                          </CollapsibleTrigger>
                        </div>
                      </div>
                    </CardHeader>
                    <CollapsibleContent>
                      <CardContent className="space-y-4">
                        
                        {(form.watch('income.pensions') || []).map((pension, index) => (
                          <Card key={pension.id || index} className="p-4">
                            <div className="flex items-center justify-between mb-4">
                              <h4 className="text-sm font-medium">Pension {index + 1}</h4>
                              <Button
                                type="button"
                                variant="ghost"
                                size="sm"
                                onClick={() => removeBorrowerPension(pension.id!)}
                                className="hover:bg-orange-500 hover:text-white"
                                data-testid={`button-remove-borrower-pension-${index}`}
                                title="Delete Pension"
                              >
                                <Minus className="h-4 w-4" />
                              </Button>
                            </div>
                            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                              <div className="space-y-2">
                                <Label htmlFor={`income-pension-${index}-payerName`}>Payer Name</Label>
                                <Input
                                  id={`income-pension-${index}-payerName`}
                                  {...form.register(`income.pensions.${index}.payerName`)}
                                  placeholder="e.g., Federal Retirement Fund"
                                  data-testid={`input-income-pension-${index}-payerName`}
                                />
                              </div>
                              <div className="space-y-2">
                                <Label htmlFor={`income-pension-${index}-monthlyAmount`}>Gross Monthly Income</Label>
                                <Controller
                                  control={form.control}
                                  name={`income.pensions.${index}.monthlyAmount`}
                                  defaultValue=""
                                  render={({ field }) => {
                                    const numVal = field.value ? field.value.replace(/[^\d]/g, '') : '';
                                    const displayValue = numVal ? `$${numVal.replace(/\B(?=(\d{3})+(?!\d))/g, ',')}` : '';
                                    
                                    return (
                                      <Input
                                        id={`income-pension-${index}-monthlyAmount`}
                                        type="text"
                                        placeholder="$0"
                                        value={displayValue}
                                        onChange={(e) => {
                                          const value = e.target.value.replace(/[^\d]/g, '');
                                          field.onChange(value);
                                        }}
                                        data-testid={`input-income-pension-${index}-monthlyAmount`}
                                      />
                                    );
                                  }}
                                />
                              </div>
                              <div className="space-y-2">
                                <Label htmlFor={`income-pension-${index}-startDate`}>Start Date</Label>
                                <Input
                                  id={`income-pension-${index}-startDate`}
                                  value={form.watch(`income.pensions.${index}.startDate`) || ''}
                                  onChange={(e) => {
                                    const value = e.target.value.replace(/\D/g, ''); // Remove non-digits
                                    let formatted = '';
                                    if (value.length > 0) {
                                      formatted = value.substring(0, 2);
                                      if (value.length > 2) {
                                        formatted += '/' + value.substring(2, 4);
                                        if (value.length > 4) {
                                          formatted += '/' + value.substring(4, 8);
                                        }
                                      }
                                    }
                                    form.setValue(`income.pensions.${index}.startDate`, formatted);
                                  }}
                                  placeholder="MM/DD/YYYY"
                                  maxLength={10}
                                  data-testid={`input-income-pension-${index}-startDate`}
                                />
                              </div>
                            </div>
                          </Card>
                        ))}
                      </CardContent>
                    </CollapsibleContent>
                  </Collapsible>
                </Card>
              )}

              {/* Social Security Income Card */}
              {form.watch('income.incomeTypes.socialSecurity') && (
                <Card>
                  <Collapsible open={isSocialSecurityIncomeOpen} onOpenChange={setIsSocialSecurityIncomeOpen}>
                    <CardHeader>
                      <div className="flex items-center justify-between">
                        <CardTitle>Borrower - Social Security</CardTitle>
                        <div className="flex items-center gap-2">
                          <Button
                            type="button"
                            variant="outline"
                            size="sm"
                            onClick={() => setDeleteSocialSecurityDialog({ isOpen: true })}
                            className="hover:bg-red-500 hover:text-white"
                            data-testid="button-delete-social-security"
                            title="Delete Social Security Income"
                          >
                            <Minus className="h-4 w-4 mr-2" />
                            Remove
                          </Button>
                          <CollapsibleTrigger asChild>
                            <Button 
                              variant="ghost" 
                              size="sm" 
                              className="hover:bg-orange-500 hover:text-white" 
                              data-testid="button-toggle-social-security-income"
                              title={isSocialSecurityIncomeOpen ? 'Minimize' : 'Expand'}
                              key={`social-security-income-${isSocialSecurityIncomeOpen}`}
                            >
                              {isSocialSecurityIncomeOpen ? <Minus className="h-4 w-4" /> : <Plus className="h-4 w-4" />}
                            </Button>
                          </CollapsibleTrigger>
                        </div>
                      </div>
                    </CardHeader>
                    <CollapsibleContent>
                      <CardContent className="space-y-4">
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div className="space-y-2">
                          <Label htmlFor="income-socialSecurityMonthlyAmount">Gross Monthly Income</Label>
                          <Controller
                            control={form.control}
                            name="income.socialSecurityMonthlyAmount"
                            defaultValue=""
                            render={({ field }) => {
                              const numVal = field.value ? field.value.replace(/[^\d]/g, '') : '';
                              const displayValue = numVal ? `$${numVal.replace(/\B(?=(\d{3})+(?!\d))/g, ',')}` : '';
                              
                              return (
                                <Input
                                  id="income-socialSecurityMonthlyAmount"
                                  type="text"
                                  placeholder="$0"
                                  value={displayValue}
                                  onChange={(e) => {
                                    const value = e.target.value.replace(/[^\d]/g, '');
                                    field.onChange(value);
                                  }}
                                  data-testid="input-income-socialSecurityMonthlyAmount"
                                />
                              );
                            }}
                          />
                        </div>
                        <div className="space-y-2">
                          <Label htmlFor="income-socialSecurityStartDate">Start Date</Label>
                          <Input
                            id="income-socialSecurityStartDate"
                            value={form.watch('income.socialSecurityStartDate') || ''}
                            onChange={(e) => {
                              const value = e.target.value.replace(/\D/g, ''); // Remove non-digits
                              let formatted = '';
                              if (value.length > 0) {
                                formatted = value.substring(0, 2);
                                if (value.length > 2) {
                                  formatted += '/' + value.substring(2, 4);
                                  if (value.length > 4) {
                                    formatted += '/' + value.substring(4, 8);
                                  }
                                }
                              }
                              form.setValue('income.socialSecurityStartDate', formatted);
                            }}
                            placeholder="MM/DD/YYYY"
                            maxLength={10}
                            data-testid="input-income-socialSecurityStartDate"
                          />
                        </div>
                      </div>
                      </CardContent>
                    </CollapsibleContent>
                  </Collapsible>
                </Card>
              )}

              {/* VA Benefits Income Card */}
              {form.watch('income.incomeTypes.vaBenefits') && (
                <Card>
                  <Collapsible open={isVaBenefitsIncomeOpen} onOpenChange={setIsVaBenefitsIncomeOpen}>
                    <CardHeader>
                      <div className="flex items-center justify-between">
                        <CardTitle>Borrower - Disability</CardTitle>
                        <div className="flex items-center gap-2">
                          <Button
                            type="button"
                            variant="outline"
                            size="sm"
                            onClick={() => setDeleteVaBenefitsDialog({ isOpen: true })}
                            className="hover:bg-red-500 hover:text-white"
                            data-testid="button-delete-va-benefits"
                            title="Delete VA Disability Income"
                          >
                            <Minus className="h-4 w-4 mr-2" />
                            Remove
                          </Button>
                          <CollapsibleTrigger asChild>
                            <Button 
                              variant="ghost" 
                              size="sm" 
                              className="hover:bg-orange-500 hover:text-white" 
                              data-testid="button-toggle-va-benefits-income"
                              title={isVaBenefitsIncomeOpen ? 'Minimize' : 'Expand'}
                              key={`va-benefits-income-${isVaBenefitsIncomeOpen}`}
                            >
                              {isVaBenefitsIncomeOpen ? <Minus className="h-4 w-4" /> : <Plus className="h-4 w-4" />}
                            </Button>
                          </CollapsibleTrigger>
                        </div>
                      </div>
                    </CardHeader>
                    <CollapsibleContent>
                      <CardContent className="space-y-4">
                      {/* Disability Type Selection */}
                      <Card className="bg-muted">
                        <CardContent className="pt-6">
                          <div className="space-y-3">
                            <div className="flex gap-4">
                              <div className="flex items-center space-x-2">
                                <div
                                  onClick={() => {
                                    if (vaDisabilitySelected) {
                                      setDeleteVaDisabilityTypeDialog({ isOpen: true });
                                    } else {
                                      setVaDisabilitySelected(true);
                                    }
                                  }}
                                  className={`w-4 h-4 rounded-full border-2 cursor-pointer flex items-center justify-center transition-colors ${
                                    vaDisabilitySelected ? 'bg-blue-500 border-blue-500' : 'bg-white border-gray-300'
                                  }`}
                                  data-testid="circle-disability-va"
                                >
                                  {vaDisabilitySelected && <div className="w-2 h-2 rounded-full bg-white"></div>}
                                </div>
                                <Label 
                                  htmlFor="disability-va"
                                  className="cursor-pointer"
                                  onClick={() => {
                                    if (vaDisabilitySelected) {
                                      setDeleteVaDisabilityTypeDialog({ isOpen: true });
                                    } else {
                                      setVaDisabilitySelected(true);
                                    }
                                  }}
                                >
                                  VA Disability
                                </Label>
                              </div>
                              
                              <div className="flex items-center space-x-2">
                                <div
                                  onClick={() => {
                                    if (otherDisabilitySelected) {
                                      setDeleteOtherDisabilityTypeDialog({ isOpen: true });
                                    } else {
                                      setOtherDisabilitySelected(true);
                                    }
                                  }}
                                  className={`w-4 h-4 rounded-full border-2 cursor-pointer flex items-center justify-center transition-colors ${
                                    otherDisabilitySelected ? 'bg-blue-500 border-blue-500' : 'bg-white border-gray-300'
                                  }`}
                                  data-testid="circle-disability-other"
                                >
                                  {otherDisabilitySelected && <div className="w-2 h-2 rounded-full bg-white"></div>}
                                </div>
                                <Label 
                                  htmlFor="disability-other"
                                  className="cursor-pointer"
                                  onClick={() => {
                                    if (otherDisabilitySelected) {
                                      setDeleteOtherDisabilityTypeDialog({ isOpen: true });
                                    } else {
                                      setOtherDisabilitySelected(true);
                                    }
                                  }}
                                >
                                  Other Disability
                                </Label>
                              </div>
                            </div>
                          </div>
                        </CardContent>
                      </Card>

                      {/* VA Disability Benefits Row - Only show when VA Disability is selected */}
                      {vaDisabilitySelected && (
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                          <div className="space-y-2">
                            <Label htmlFor="income-vaBenefitsMonthlyAmount">VA Disability Benefits - Gross Monthly Income</Label>
                            <Controller
                              control={form.control}
                              name="income.vaBenefitsMonthlyAmount"
                              defaultValue=""
                              render={({ field }) => {
                                const numVal = field.value ? field.value.replace(/[^\d]/g, '') : '';
                                const displayValue = numVal ? `$${numVal.replace(/\B(?=(\d{3})+(?!\d))/g, ',')}` : '';
                                
                                return (
                                  <Input
                                    id="income-vaBenefitsMonthlyAmount"
                                    type="text"
                                    placeholder="$0"
                                    value={displayValue}
                                    onChange={(e) => {
                                      const value = e.target.value.replace(/[^\d]/g, '');
                                      field.onChange(value);
                                    }}
                                    data-testid="input-income-vaBenefitsMonthlyAmount"
                                  />
                                );
                              }}
                            />
                          </div>
                          <div className="space-y-2">
                            <Label htmlFor="income-vaBenefitsStartDate">Start Date</Label>
                            <Input
                              id="income-vaBenefitsStartDate"
                              value={form.watch('income.vaBenefitsStartDate') || ''}
                              onChange={(e) => {
                                const value = e.target.value.replace(/\D/g, ''); // Remove non-digits
                                let formatted = '';
                                if (value.length > 0) {
                                  formatted = value.substring(0, 2);
                                  if (value.length > 2) {
                                    formatted += '/' + value.substring(2, 4);
                                    if (value.length > 4) {
                                      formatted += '/' + value.substring(4, 8);
                                    }
                                  }
                                }
                                form.setValue('income.vaBenefitsStartDate', formatted);
                              }}
                              placeholder="MM/DD/YYYY"
                              maxLength={10}
                              data-testid="input-income-vaBenefitsStartDate"
                            />
                          </div>
                        </div>
                      )}

                      {/* Other Disability Row - Only show when Other Disability is selected */}
                      {otherDisabilitySelected && (
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                          <div className="space-y-2">
                            <Label htmlFor="income-otherDisabilityMonthlyAmount">Disability - Gross Monthly Income</Label>
                            <Controller
                              control={form.control}
                              name="income.otherDisabilityMonthlyAmount"
                              defaultValue=""
                              render={({ field }) => {
                                const numVal = field.value ? field.value.replace(/[^\d]/g, '') : '';
                                const displayValue = numVal ? `$${numVal.replace(/\B(?=(\d{3})+(?!\d))/g, ',')}` : '';
                                
                                return (
                                  <Input
                                    id="income-otherDisabilityMonthlyAmount"
                                    type="text"
                                    placeholder="$0"
                                    value={displayValue}
                                    onChange={(e) => {
                                      const value = e.target.value.replace(/[^\d]/g, '');
                                      field.onChange(value);
                                    }}
                                    data-testid="input-income-otherDisabilityMonthlyAmount"
                                  />
                                );
                              }}
                            />
                          </div>
                          <div className="space-y-2">
                            <Label htmlFor="income-otherDisabilityStartDate">Start Date</Label>
                            <Input
                              id="income-otherDisabilityStartDate"
                              {...form.register('income.otherDisabilityStartDate')}
                              placeholder="MM/YYYY"
                              data-testid="input-income-otherDisabilityStartDate"
                            />
                          </div>
                        </div>
                      )}
                      </CardContent>
                    </CollapsibleContent>
                  </Collapsible>
                </Card>
              )}

              {/* Disability Income Card */}
              {form.watch('income.incomeTypes.disability') && (
                <Card>
                  <Collapsible open={isDisabilityIncomeOpen} onOpenChange={setIsDisabilityIncomeOpen}>
                    <CardHeader>
                      <div className="flex items-center justify-between">
                        <CardTitle>Borrower - Disability</CardTitle>
                        <div className="flex items-center gap-2">
                          <Button
                            type="button"
                            variant="outline"
                            size="sm"
                            onClick={() => setDeleteDisabilityDialog({ isOpen: true })}
                            className="hover:bg-red-500 hover:text-white"
                            data-testid="button-delete-disability"
                            title="Delete Disability Income"
                          >
                            <Minus className="h-4 w-4 mr-2" />
                            Remove
                          </Button>
                          <CollapsibleTrigger asChild>
                            <Button 
                              variant="ghost" 
                              size="sm" 
                              className="hover:bg-orange-500 hover:text-white" 
                              data-testid="button-toggle-disability-income"
                              title={isDisabilityIncomeOpen ? 'Minimize' : 'Expand'}
                              key={`disability-income-${isDisabilityIncomeOpen}`}
                            >
                              {isDisabilityIncomeOpen ? <Minus className="h-4 w-4" /> : <Plus className="h-4 w-4" />}
                            </Button>
                          </CollapsibleTrigger>
                        </div>
                      </div>
                    </CardHeader>
                    <CollapsibleContent>
                      <CardContent className="space-y-4">
                      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                        <div className="space-y-2">
                          <Label htmlFor="income-disabilityPayerName">Payer Name</Label>
                          <Input
                            id="income-disabilityPayerName"
                            {...form.register('income.disabilityPayerName')}
                            data-testid="input-income-disabilityPayerName"
                          />
                        </div>
                        <div className="space-y-2">
                          <Label htmlFor="income-disabilityMonthlyAmount">Gross Monthly Income</Label>
                          <Controller
                            control={form.control}
                            name="income.disabilityMonthlyAmount"
                            defaultValue=""
                            render={({ field }) => {
                              const numVal = field.value ? field.value.replace(/[^\d]/g, '') : '';
                              const displayValue = numVal ? `$${numVal.replace(/\B(?=(\d{3})+(?!\d))/g, ',')}` : '';
                              
                              return (
                                <Input
                                  id="income-disabilityMonthlyAmount"
                                  type="text"
                                  placeholder="$0"
                                  value={displayValue}
                                  onChange={(e) => {
                                    const value = e.target.value.replace(/[^\d]/g, '');
                                    field.onChange(value);
                                  }}
                                  data-testid="input-income-disabilityMonthlyAmount"
                                />
                              );
                            }}
                          />
                        </div>
                        <div className="space-y-2">
                          <Label htmlFor="income-disabilityStartDate">Start Date</Label>
                          <Input
                            id="income-disabilityStartDate"
                            value={form.watch('income.disabilityStartDate') || ''}
                            onChange={(e) => {
                              const value = e.target.value.replace(/\D/g, ''); // Remove non-digits
                              let formatted = '';
                              if (value.length > 0) {
                                formatted = value.substring(0, 2);
                                if (value.length > 2) {
                                  formatted += '/' + value.substring(2, 4);
                                  if (value.length > 4) {
                                    formatted += '/' + value.substring(4, 8);
                                  }
                                }
                              }
                              form.setValue('income.disabilityStartDate', formatted);
                            }}
                            placeholder="MM/DD/YYYY"
                            maxLength={10}
                            data-testid="input-income-disabilityStartDate"
                          />
                        </div>
                      </div>
                      </CardContent>
                    </CollapsibleContent>
                  </Collapsible>
                </Card>
              )}

              {/* Rental Income Card */}
              {form.watch('income.incomeTypes.other') && (
                <Card>
                  <Collapsible open={isOtherIncomeOpen} onOpenChange={setIsOtherIncomeOpen}>
                    <CardHeader>
                      <div className="flex items-center justify-between">
                        <CardTitle>Rental Income</CardTitle>
                        <CollapsibleTrigger asChild>
                          <Button 
                            variant="ghost" 
                            size="sm" 
                            className="hover:bg-orange-500 hover:text-white" 
                            data-testid="button-toggle-other-income"
                            title={isOtherIncomeOpen ? 'Minimize' : 'Expand'}
                            key={`other-income-${isOtherIncomeOpen}`}
                          >
                            {isOtherIncomeOpen ? <Minus className="h-4 w-4" /> : <Plus className="h-4 w-4" />}
                          </Button>
                        </CollapsibleTrigger>
                      </div>
                    </CardHeader>
                    <CollapsibleContent>
                      <CardContent className="space-y-4">
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div className="space-y-2">
                          <Label htmlFor="income-otherIncomeDescription">Investment Property</Label>
                          <Input
                            id="income-otherIncomeDescription"
                            {...form.register('income.otherIncomeDescription')}
                            placeholder="Property address"
                            data-testid="input-income-otherIncomeDescription"
                            readOnly
                          />
                        </div>
                        <div className="space-y-2">
                          <Label htmlFor="income-otherIncomeMonthlyAmount">Monthly Amount</Label>
                          <Input
                            id="income-otherIncomeMonthlyAmount"
                            {...form.register('income.otherIncomeMonthlyAmount')}
                            placeholder="$0.00"
                            data-testid="input-income-otherIncomeMonthlyAmount"
                            readOnly
                            className={(() => {
                              const value = form.watch('income.otherIncomeMonthlyAmount') || '';
                              if (value.startsWith('-')) return 'text-red-600';
                              if (value && !value.startsWith('$0') && parseFloat(value.replace(/[$,]/g, '')) > 0) return 'text-green-600';
                              return '';
                            })()}
                          />
                        </div>
                      </div>
                      </CardContent>
                    </CollapsibleContent>
                  </Collapsible>
                </Card>
              )}

              {/* Co-Borrower Income */}
              {hasCoBorrower && (
                <Card className="border-l-4 border-l-blue-500 hover:border-blue-500 focus-within:border-blue-500 transition-colors duration-200">
                  <CardHeader>
                    <div className="flex items-center justify-between">
                      <CardTitle className="flex items-center gap-3">
                        Co-Borrower Income
                        <span className="text-lg font-semibold" data-testid="text-total-coborrower-income">
                          {totalCoBorrowerIncomeFormatted}
                        </span>
                      </CardTitle>
                      <div className="flex items-center gap-2">
                        {/* Expand All Button */}
                        <Button
                          type="button"
                          variant="ghost"
                          size="icon"
                          onClick={() => {
                            const updates: Record<string, boolean> = {};
                            
                            // Co-Borrower Employment cards
                            if (form.watch('coBorrowerIncome.incomeTypes.employment')) {
                              (coBorrowerEmployerCards || ['default']).forEach(cardId => {
                                const propertyId = cardId === 'default' ? 'coborrower-template-card' : cardId;
                                updates[propertyId] = true;
                              });
                            }
                            
                            // Co-Borrower Second Employment cards
                            if (form.watch('coBorrowerIncome.incomeTypes.secondEmployment')) {
                              (coBorrowerSecondEmployerCards || ['default']).forEach(cardId => {
                                const propertyId = cardId === 'default' ? 'coborrower-second-template-card' : cardId;
                                updates[propertyId] = true;
                              });
                            }
                            
                            // Co-Borrower Self-Employment cards
                            if (form.watch('coBorrowerIncome.incomeTypes.selfEmployment')) {
                              (coBorrowerSelfEmploymentCards || ['default']).forEach(cardId => {
                                const propertyId = cardId === 'default' ? 'co-borrower-self-employment-template-card' : cardId;
                                updates[propertyId] = true;
                              });
                            }
                            
                            setPropertyCardStates(prev => ({ ...prev, ...updates }));
                          }}
                          className="hover:bg-blue-500 hover:text-white"
                          title="Expand All Income Tiles"
                          data-testid="button-expand-all-coborrower-income"
                        >
                          <Plus className="h-4 w-4" />
                        </Button>
                        
                        {/* Minimize All Button */}
                        <Button
                          type="button"
                          variant="ghost"
                          size="icon"
                          onClick={() => {
                            const updates: Record<string, boolean> = {};
                            
                            // Co-Borrower Employment cards
                            if (form.watch('coBorrowerIncome.incomeTypes.employment')) {
                              (coBorrowerEmployerCards || ['default']).forEach(cardId => {
                                const propertyId = cardId === 'default' ? 'coborrower-template-card' : cardId;
                                updates[propertyId] = false;
                              });
                            }
                            
                            // Co-Borrower Second Employment cards
                            if (form.watch('coBorrowerIncome.incomeTypes.secondEmployment')) {
                              (coBorrowerSecondEmployerCards || ['default']).forEach(cardId => {
                                const propertyId = cardId === 'default' ? 'coborrower-second-template-card' : cardId;
                                updates[propertyId] = false;
                              });
                            }
                            
                            // Co-Borrower Self-Employment cards
                            if (form.watch('coBorrowerIncome.incomeTypes.selfEmployment')) {
                              (coBorrowerSelfEmploymentCards || ['default']).forEach(cardId => {
                                const propertyId = cardId === 'default' ? 'co-borrower-self-employment-template-card' : cardId;
                                updates[propertyId] = false;
                              });
                            }
                            
                            setPropertyCardStates(prev => ({ ...prev, ...updates }));
                          }}
                          className="hover:bg-orange-500 hover:text-white"
                          title="Minimize All Income Tiles"
                          data-testid="button-minimize-all-coborrower-income"
                        >
                          <Minus className="h-4 w-4" />
                        </Button>
                      </div>
                    </div>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-4">
                      <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
                        <div className="flex items-center space-x-2">
                          <Checkbox
                            id="coBorrowerIncome-type-employment"
                            checked={form.watch('coBorrowerIncome.incomeTypes.employment') || false}
                            onCheckedChange={(checked) => handleIncomeTypeChange('coBorrowerIncome.incomeTypes.employment', !!checked, 'Employment', true)}
                            data-testid="checkbox-coborrower-employment"
                            className="transition-transform duration-500 hover:scale-105 data-[state=checked]:rotate-[360deg]"
                          />
                          <Label htmlFor="coBorrowerIncome-type-employment">Employment</Label>
                        </div>
                        <div className="flex items-center space-x-2">
                          <Checkbox
                            id="coBorrowerIncome-type-secondEmployment"
                            checked={form.watch('coBorrowerIncome.incomeTypes.secondEmployment') || false}
                            onCheckedChange={(checked) => handleIncomeTypeChange('coBorrowerIncome.incomeTypes.secondEmployment', !!checked, 'Second Employment', true)}
                            data-testid="checkbox-coborrower-secondEmployment"
                            className="transition-transform duration-500 hover:scale-105 data-[state=checked]:rotate-[360deg]"
                          />
                          <Label htmlFor="coBorrowerIncome-type-secondEmployment">Second Employment</Label>
                        </div>
                        <div className="flex items-center space-x-2">
                          <Checkbox
                            id="coBorrowerIncome-type-selfEmployment"
                            checked={form.watch('coBorrowerIncome.incomeTypes.selfEmployment') || false}
                            onCheckedChange={(checked) => handleIncomeTypeChange('coBorrowerIncome.incomeTypes.selfEmployment', !!checked, 'Self-Employment', true)}
                            data-testid="checkbox-coborrower-selfEmployment"
                            className="transition-transform duration-500 hover:scale-105 data-[state=checked]:rotate-[360deg]"
                          />
                          <Label htmlFor="coBorrowerIncome-type-selfEmployment">Self Employment</Label>
                        </div>
                        <div className="flex items-center space-x-2">
                          <Checkbox
                            id="coBorrowerIncome-type-pension"
                            checked={form.watch('coBorrowerIncome.incomeTypes.pension') || false}
                            onCheckedChange={(checked) => {
                              handleIncomeTypeChange('coBorrowerIncome.incomeTypes.pension', !!checked, 'Pension', true);
                            }}
                            data-testid="checkbox-coborrower-pension"
                            className="transition-transform duration-500 hover:scale-105 data-[state=checked]:rotate-[360deg]"
                          />
                          <Label htmlFor="coBorrowerIncome-type-pension">Pension</Label>
                        </div>
                        <div className="flex items-center space-x-2">
                          <Checkbox
                            id="coBorrowerIncome-type-socialSecurity"
                            checked={form.watch('coBorrowerIncome.incomeTypes.socialSecurity') || false}
                            onCheckedChange={(checked) => {
                              handleIncomeTypeChange('coBorrowerIncome.incomeTypes.socialSecurity', !!checked, 'Social Security', true);
                            }}
                            data-testid="checkbox-coborrower-socialSecurity"
                            className="transition-transform duration-500 hover:scale-105 data-[state=checked]:rotate-[360deg]"
                          />
                          <Label htmlFor="coBorrowerIncome-type-socialSecurity">Social Security</Label>
                        </div>
                        <div className="flex items-center space-x-2">
                          <Checkbox
                            id="coBorrowerIncome-type-disability"
                            checked={form.watch('coBorrowerIncome.incomeTypes.disability') || false}
                            onCheckedChange={(checked) => {
                              handleIncomeTypeChange('coBorrowerIncome.incomeTypes.disability', !!checked, 'Disability', true);
                            }}
                            data-testid="checkbox-coborrower-disability"
                            className="transition-transform duration-500 hover:scale-105 data-[state=checked]:rotate-[360deg]"
                          />
                          <Label htmlFor="coBorrowerIncome-type-disability">Disability</Label>
                        </div>
                        <div className="flex items-center space-x-2" title="Alimony / Child Support">
                          <Checkbox
                            id="coBorrowerIncome-type-alimonyChildSupport"
                            checked={form.watch('coBorrowerIncome.incomeTypes.childSupport') || false}
                            onCheckedChange={() => {
                              // Disabled - will be designed later
                              return;
                            }}
                            disabled
                            data-testid="checkbox-coborrower-alimonyChildSupport"
                            className="transition-transform duration-500 hover:scale-105 data-[state=checked]:rotate-[360deg] cursor-not-allowed opacity-50"
                          />
                          <Label htmlFor="coBorrowerIncome-type-alimonyChildSupport" className="cursor-not-allowed opacity-50">Other</Label>
                        </div>
                        <div className="flex items-center space-x-2">
                          <Checkbox
                            id="coBorrowerIncome-type-other"
                            checked={form.watch('coBorrowerIncome.incomeTypes.other') || false}
                            onCheckedChange={(checked) => {
                              if (checked) {
                                // Show popup for adding property rental
                                setPropertyRentalDialog({ isOpen: true, type: 'add', borrowerType: 'coBorrower' });
                              } else {
                                // Show popup for removing property rental
                                setPropertyRentalDialog({ isOpen: true, type: 'remove', borrowerType: 'coBorrower' });
                              }
                            }}
                            data-testid="checkbox-coborrower-other"
                            className="transition-transform duration-500 hover:scale-105 data-[state=checked]:rotate-[360deg]"
                          />
                          <Label htmlFor="coBorrowerIncome-type-other">Rental Property</Label>
                        </div>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              )}

              {/* Co-Borrower Employer Cards */}
              {hasCoBorrower && form.watch('coBorrowerIncome.incomeTypes.employment') && (coBorrowerEmployerCards || ['default']).map((cardId, index) => {
                const propertyId = cardId === 'default' ? 'coborrower-template-card' : cardId;
                const isOpen = propertyCardStates[propertyId] ?? true;
                
                return (
                  <Card key={cardId} className="transition-colors duration-200">
                    <Collapsible 
                      open={isOpen} 
                      onOpenChange={(open) => {
                        setPropertyCardStates(prev => ({ ...prev, [propertyId]: open }));
                        if (open) {
                          setTimeout(() => {
                            setShowIncomeCardAnimation(prev => ({ ...prev, [`co-borrower-employment-${propertyId}`]: true }));
                            setTimeout(() => {
                              setShowIncomeCardAnimation(prev => ({ ...prev, [`co-borrower-employment-${propertyId}`]: false }));
                            }, 800);
                          }, 200);
                        }
                      }}
                    >
                      <CardHeader>
                        <div className="flex items-center justify-between">
                          <div className="flex items-center gap-8">
                            <CardTitle className="flex items-center gap-2">
                              Co-Borrower Employer
                            </CardTitle>
                          </div>
                          <div className="flex items-center gap-2">
                            {/* Add Employer Button */}
                            <Button
                              type="button"
                              variant="outline"
                              size="sm"
                              onClick={() => {
                                const newId = `coborrower-employer-${Date.now()}`;
                                setCoBorrowerEmployerCards(prev => [...(prev || ['default']), newId]);
                              }}
                              className="hover:bg-blue-500 hover:text-white"
                              data-testid="button-add-coborrower-employer"
                              title="Add New Employer"
                            >
                              <Plus className="h-4 w-4 mr-2" />
                              Add Employer
                            </Button>
                            
                            {/* Delete Employer Button */}
                            <Button
                              type="button"
                              variant="outline"
                              size="sm"
                              onClick={() => setDeleteCoBorrowerEmployerDialog({ isOpen: true, cardId: propertyId })}
                              className="hover:bg-red-500 hover:text-white"
                              data-testid="button-delete-coborrower-employer"
                              title="Delete Employer"
                            >
                              <Minus className="h-4 w-4 mr-2" />
                              Remove
                            </Button>
                            
                            <CollapsibleTrigger asChild>
                              <Button 
                                variant="ghost" 
                                size="sm" 
                                className="hover:bg-orange-500 hover:text-white" 
                                data-testid={`button-toggle-income-property-${propertyId}`}
                                title={isOpen ? 'Minimize' : 'Expand'}
                                key={`income-property-toggle-${propertyId}-${isOpen}`}
                              >
                                {isOpen ? <Minus className="h-4 w-4" /> : <Plus className="h-4 w-4" />}
                              </Button>
                            </CollapsibleTrigger>
                          </div>
                        </div>
                      </CardHeader>
                      
                      <CollapsibleContent>
                        <CardContent>
                          <div className="space-y-6">
                            {/* Employment Type Selection */}
                            <Card className={`bg-muted ${
                              showIncomeCardAnimation[`co-borrower-employment-${propertyId}`] ? 'animate-roll-down-subject-property' : ''
                            }`}>
                              <CardContent className="pt-6">
                                <div className="space-y-3">
                                  <div className="flex gap-4">
                                    <div className="flex items-center space-x-2">
                                      <input
                                        type="radio"
                                        id={`employment-current-${propertyId}`}
                                        name={`employment-type-${propertyId}`}
                                        data-testid={`radio-employment-current-${propertyId}`}
                                      />
                                      <Label htmlFor={`employment-current-${propertyId}`}>Current Employer</Label>
                                    </div>
                                    
                                    <div className="flex items-center space-x-2">
                                      <input
                                        type="radio"
                                        id={`employment-prior-${propertyId}`}
                                        name={`employment-type-${propertyId}`}
                                        data-testid={`radio-employment-prior-${propertyId}`}
                                      />
                                      <Label htmlFor={`employment-prior-${propertyId}`}>Prior Employer</Label>
                                    </div>
                                  </div>
                                </div>
                              </CardContent>
                            </Card>

                            {/* Employment Information - Single Row */}
                            <div className="grid grid-cols-1 md:grid-cols-7 gap-4">
                              <div className="space-y-2">
                                <Label htmlFor={`${propertyId}-employerName`}>Employer Name</Label>
                                <Controller
                                  control={form.control}
                                  name={getEmployerFieldPath(cardId, 'employerName')}
                                  render={({ field }) => (
                                    <Input
                                      id={`${propertyId}-employerName`}
                                      {...field}
                                      data-testid={`input-${propertyId}-employerName`}
                                    />
                                  )}
                                />
                              </div>
                              
                              <div className="space-y-2">
                                <div className="flex items-center justify-between mb-2">
                                  <Label htmlFor={`${propertyId}-employer-phone`} className="text-xs">
                                    {form.watch(getCoBorrowerEmployerFieldPath(cardId, 'isShowingEmploymentVerification')) ? 'Job Verification' : 'Employer Phone'}
                                  </Label>
                                  <Switch
                                    checked={form.watch(getCoBorrowerEmployerFieldPath(cardId, 'isShowingEmploymentVerification')) || false}
                                    onCheckedChange={(checked) => form.setValue(getCoBorrowerEmployerFieldPath(cardId, 'isShowingEmploymentVerification') as any, checked)}
                                    data-testid={`toggle-${propertyId}-employment-verification`}
                                    className="scale-[0.8]"
                                  />
                                </div>
                                <Input
                                  id={`${propertyId}-employer-phone`}
                                  placeholder=""
                                  value={form.watch(getCoBorrowerEmployerFieldPath(cardId, 'isShowingEmploymentVerification')) 
                                    ? (form.watch(getCoBorrowerEmployerFieldPath(cardId, 'employmentVerificationPhone')) || '')
                                    : (form.watch(getCoBorrowerEmployerFieldPath(cardId, 'employerPhone')) || '')}
                                  onChange={(e) => {
                                    const value = e.target.value.replace(/\D/g, '');
                                    let formatted = '';
                                    if (value.length > 0) {
                                      formatted = value.substring(0, 3);
                                      if (value.length > 3) {
                                        formatted += '-' + value.substring(3, 6);
                                        if (value.length > 6) {
                                          formatted += '-' + value.substring(6, 10);
                                        }
                                      }
                                    }
                                    const fieldName = form.watch(getCoBorrowerEmployerFieldPath(cardId, 'isShowingEmploymentVerification')) 
                                      ? getCoBorrowerEmployerFieldPath(cardId, 'employmentVerificationPhone')
                                      : getCoBorrowerEmployerFieldPath(cardId, 'employerPhone');
                                    form.setValue(fieldName as any, formatted);
                                  }}
                                  maxLength={12}
                                  data-testid={`input-${propertyId}-employer-phone`}
                                />
                              </div>
                              
                              <div className="space-y-2">
                                <Label htmlFor={`${propertyId}-jobTitle`}>Job Title</Label>
                                <Controller
                                  control={form.control}
                                  name={getEmployerFieldPath(cardId, 'jobTitle')}
                                  render={({ field }) => (
                                    <Input
                                      id={`${propertyId}-jobTitle`}
                                      {...field}
                                      data-testid={`input-${propertyId}-jobTitle`}
                                    />
                                  )}
                                />
                              </div>
                              
                              <div className="space-y-2">
                                <Label htmlFor={`${propertyId}-monthlyIncome`}>Gross Monthly Income</Label>
                                <Controller
                                  control={form.control}
                                  name={getCoBorrowerEmployerFieldPath(cardId, 'monthlyIncome')}
                                  defaultValue=""
                                  render={({ field }) => {
                                    const numVal = field.value ? field.value.replace(/[^\d]/g, '') : '';
                                    const displayValue = numVal ? `$${numVal.replace(/\B(?=(\d{3})+(?!\d))/g, ',')}` : '';
                                    
                                    return (
                                      <Input
                                        id={`${propertyId}-monthlyIncome`}
                                        type="text"
                                        placeholder="$0"
                                        value={displayValue}
                                        onChange={(e) => {
                                          const value = e.target.value.replace(/[^\d]/g, '');
                                          field.onChange(value);
                                        }}
                                        data-testid={`input-${propertyId}-monthlyIncome`}
                                      />
                                    );
                                  }}
                                />
                              </div>
                              
                              <div className="space-y-2">
                                <Label htmlFor={`${propertyId}-startDate`}>Start Date</Label>
                                <Input
                                  id={`${propertyId}-startDate`}
                                  value={employmentDates[propertyId]?.startDate || ''}
                                  onChange={(e) => {
                                    const value = e.target.value.replace(/\D/g, ''); // Remove non-digits
                                    let formatted = '';
                                    if (value.length > 0) {
                                      formatted = value.substring(0, 2);
                                      if (value.length > 2) {
                                        formatted += '/' + value.substring(2, 4);
                                        if (value.length > 4) {
                                          formatted += '/' + value.substring(4, 8);
                                        }
                                      }
                                    }
                                    const currentData = employmentDates[propertyId] || { endDate: '', isPresent: false, duration: '' };
                                    updateEmploymentDuration(propertyId, formatted, currentData.endDate, currentData.isPresent);
                                  }}
                                  placeholder="MM/DD/YYYY"
                                  maxLength={10}
                                  data-testid={`input-${propertyId}-startDate`}
                                />
                              </div>
                              
                              <div className="space-y-2">
                                <div className="flex items-center justify-between mb-2">
                                  <Label htmlFor={`${propertyId}-endDate`} className="text-sm">
                                    {employmentDates[propertyId]?.isPresent ? 'Present' : 'End Date'}
                                  </Label>
                                  <Switch
                                    checked={employmentDates[propertyId]?.isPresent ?? false}
                                    onCheckedChange={(checked) => {
                                      const currentData = employmentDates[propertyId] || { startDate: '', endDate: '', duration: '' };
                                      updateEmploymentDuration(propertyId, currentData.startDate, currentData.endDate, checked);
                                    }}
                                    data-testid={`toggle-${propertyId}-present`}
                                    className="scale-[0.8]"
                                  />
                                </div>
                                <Input
                                  id={`${propertyId}-endDate`}
                                  value={employmentDates[propertyId]?.isPresent ? 'present' : (employmentDates[propertyId]?.endDate || '')}
                                  onChange={(e) => {
                                    if (!employmentDates[propertyId]?.isPresent) {
                                      const value = e.target.value.replace(/\D/g, ''); // Remove non-digits
                                      let formatted = '';
                                      if (value.length > 0) {
                                        formatted = value.substring(0, 2);
                                        if (value.length > 2) {
                                          formatted += '/' + value.substring(2, 4);
                                          if (value.length > 4) {
                                            formatted += '/' + value.substring(4, 8);
                                          }
                                        }
                                      }
                                      const currentData = employmentDates[propertyId] || { startDate: '', isPresent: false, duration: '' };
                                      updateEmploymentDuration(propertyId, currentData.startDate, formatted, currentData.isPresent);
                                    }
                                  }}
                                  placeholder={employmentDates[propertyId]?.isPresent ? 'Present' : 'MM/DD/YYYY'}
                                  maxLength={10}
                                  readOnly={employmentDates[propertyId]?.isPresent}
                                  className={employmentDates[propertyId]?.isPresent ? 'bg-muted' : ''}
                                  data-testid={`input-${propertyId}-endDate`}
                                />
                              </div>
                              
                              <div className="space-y-2">
                                <Label htmlFor={`${propertyId}-employment-duration`}>Employment Duration</Label>
                                <Input
                                  id={`${propertyId}-employment-duration`}
                                  value={employmentDates[propertyId]?.duration || ''}
                                  placeholder={employmentDates[propertyId]?.isPresent ? 'Enter' : '0'}
                                  readOnly={!employmentDates[propertyId]?.isPresent}
                                  className={!employmentDates[propertyId]?.isPresent ? 'bg-muted' : ''}
                                  onChange={(e) => {
                                    if (employmentDates[propertyId]?.isPresent) {
                                      const currentData = employmentDates[propertyId] || { startDate: '', endDate: '', isPresent: false };
                                      setEmploymentDates(prev => ({
                                        ...prev,
                                        [propertyId]: {
                                          ...currentData,
                                          duration: e.target.value
                                        }
                                      }));
                                    }
                                  }}
                                  data-testid={`input-${propertyId}-employment-duration`}
                                />
                              </div>
                            </div>

                            {/* Employer Address Row */}
                            <div className="grid grid-cols-1 md:grid-cols-12 gap-4">
                              <div className="space-y-2 md:col-span-3">
                                <Label htmlFor="template-employer-street">Street Address</Label>
                                <Input
                                  id="template-employer-street"
                                  data-testid="input-template-employer-street"
                                />
                              </div>
                              
                              <div className="space-y-2 md:col-span-1">
                                <Label htmlFor="template-employer-unit">Unit/Suite</Label>
                                <Input
                                  id="template-employer-unit"
                                  data-testid="input-template-employer-unit"
                                />
                              </div>
                              
                              <div className="space-y-2 md:col-span-2">
                                <Label htmlFor="template-employer-city">City</Label>
                                <Input
                                  id="template-employer-city"
                                  data-testid="input-template-employer-city"
                                />
                              </div>
                              
                              <div className="space-y-2 md:col-span-1">
                                <Label htmlFor="template-employer-state">State</Label>
                                <Select
                                  value=""
                                  onValueChange={() => {}}
                                >
                                  <SelectTrigger data-testid="select-template-employer-state">
                                    <SelectValue placeholder="Select" />
                                  </SelectTrigger>
                                  <SelectContent>
                                    {US_STATES.map((state) => (
                                      <SelectItem key={state.value} value={state.value}>
                                        {state.value}
                                      </SelectItem>
                                    ))}
                                  </SelectContent>
                                </Select>
                              </div>
                              
                              <div className="space-y-2 md:col-span-1">
                                <Label htmlFor="template-employer-zip">ZIP Code</Label>
                                <Input
                                  id="template-employer-zip"
                                  data-testid="input-template-employer-zip"
                                />
                              </div>
                              
                              <div className="space-y-2 md:col-span-2">
                                <Label htmlFor="template-employer-county">County</Label>
                                <Input
                                  id="template-employer-county"
                                  data-testid="input-template-employer-county"
                                />
                              </div>
                              
                              <div className="space-y-2 md:col-span-2">
                                <Label htmlFor="template-employer-employment-type">Full-Time / Part-Time</Label>
                                <Select
                                  value=""
                                  onValueChange={() => {}}
                                >
                                  <SelectTrigger data-testid="select-template-employer-employment-type">
                                    <SelectValue placeholder="Select" />
                                  </SelectTrigger>
                                  <SelectContent>
                                    <SelectItem value="Full-Time">Full-Time</SelectItem>
                                    <SelectItem value="Part-Time">Part-Time</SelectItem>
                                  </SelectContent>
                                </Select>
                              </div>
                            </div>

                          </div>
                        </CardContent>
                      </CollapsibleContent>
                    </Collapsible>
                  </Card>
                );
              })}


              {/* Co-borrower Second Employment Cards */}
              {hasCoBorrower && form.watch('coBorrowerIncome.incomeTypes.secondEmployment') && (coBorrowerSecondEmployerCards || ['default']).map((cardId, index) => {
                const propertyId = cardId === 'default' ? 'coborrower-second-template-card' : cardId;
                const isOpen = propertyCardStates[propertyId] ?? true;
                
                return (
                  <Card key={cardId} className="transition-colors duration-200">
                    <Collapsible 
                      open={isOpen} 
                      onOpenChange={(open) => {
                        setPropertyCardStates(prev => ({ ...prev, [propertyId]: open }));
                        if (open) {
                          setTimeout(() => {
                            setShowIncomeCardAnimation(prev => ({ ...prev, 'co-borrower-second-employment': true }));
                            setTimeout(() => {
                              setShowIncomeCardAnimation(prev => ({ ...prev, 'co-borrower-second-employment': false }));
                            }, 800);
                          }, 200);
                        }
                      }}
                    >
                      <CardHeader>
                        <div className="flex items-center justify-between">
                          <div className="flex items-center gap-8">
                            <CardTitle className="flex items-center gap-2">
                              Co-borrower - Second Employer
                            </CardTitle>
                          </div>
                          <div className="flex items-center gap-2">
                            {/* Add Employer Button */}
                            <Button
                              type="button"
                              variant="outline"
                              size="sm"
                              onClick={() => {
                                const newId = `coborrower-second-employer-${Date.now()}`;
                                setCoBorrowerSecondEmployerCards(prev => [...(prev || ['default']), newId]);
                              }}
                              className="hover:bg-blue-500 hover:text-white"
                              data-testid="button-add-coborrower-second-employer"
                              title="Add New Employer"
                            >
                              <Plus className="h-4 w-4 mr-2" />
                              Add Employer
                            </Button>
                            
                            {/* Delete Employer Button */}
                            <Button
                              type="button"
                              variant="outline"
                              size="sm"
                              onClick={() => setDeleteCoBorrowerSecondEmployerDialog({ isOpen: true, cardId: propertyId })}
                              className="hover:bg-red-500 hover:text-white"
                              data-testid="button-delete-coborrower-second-employer"
                              title="Delete Employer"
                            >
                              <Minus className="h-4 w-4 mr-2" />
                              Remove
                            </Button>
                            
                            <CollapsibleTrigger asChild>
                              <Button 
                                variant="ghost" 
                                size="sm" 
                                className="hover:bg-orange-500 hover:text-white" 
                                data-testid={`button-toggle-coborrower-second-employment-income-${propertyId}`}
                                title={isOpen ? 'Minimize' : 'Expand'}
                                key={`coborrower-second-employment-income-${propertyId}-${isOpen}`}
                              >
                                {isOpen ? <Minus className="h-4 w-4" /> : <Plus className="h-4 w-4" />}
                              </Button>
                            </CollapsibleTrigger>
                          </div>
                        </div>
                      </CardHeader>
                    
                    <CollapsibleContent>
                      <CardContent>
                        <div className="space-y-6">
                          {/* Employment Type Selection */}
                          <Card className={`bg-muted ${
                            showIncomeCardAnimation['co-borrower-second-employment'] ? 'animate-roll-down-subject-property' : ''
                          }`}>
                            <CardContent className="pt-6">
                              <div className="space-y-3">
                                <div className="flex gap-4">
                                  <div className="flex items-center space-x-2">
                                    <input
                                      type="radio"
                                      id="coborrower-second-employment-current"
                                      name="coborrower-second-employment-type"
                                      data-testid="radio-coborrower-second-employment-current"
                                    />
                                    <Label htmlFor="coborrower-second-employment-current">Current Employer</Label>
                                  </div>
                                  
                                  <div className="flex items-center space-x-2">
                                    <input
                                      type="radio"
                                      id="coborrower-second-employment-prior"
                                      name="coborrower-second-employment-type"
                                      data-testid="radio-coborrower-second-employment-prior"
                                    />
                                    <Label htmlFor="coborrower-second-employment-prior">Prior Employer</Label>
                                  </div>
                                </div>
                              </div>
                            </CardContent>
                          </Card>

                          {/* Employment Information - Single Row */}
                          <div className="grid grid-cols-1 md:grid-cols-7 gap-4">
                            <div className="space-y-2">
                              <Label htmlFor={`coBorrowerIncome-secondEmployerName-${cardId}`}>Employer Name</Label>
                              <Input
                                id={`coBorrowerIncome-secondEmployerName-${cardId}`}
                                {...form.register(getCoBorrowerSecondEmployerFieldPath(cardId, 'employerName'))}
                                data-testid={`input-coBorrowerIncome-secondEmployerName-${cardId}`}
                              />
                            </div>
                            
                            <div className="space-y-2">
                              <div className="flex items-center justify-between mb-2">
                                <Label htmlFor={`coBorrowerIncome-second-employer-phone-${cardId}`} className="text-xs">
                                  {form.watch(getCoBorrowerSecondEmployerFieldPath(cardId, 'isShowingEmploymentVerification')) ? 'Job Verification' : 'Employer Phone'}
                                </Label>
                                <Switch
                                  checked={form.watch(getCoBorrowerSecondEmployerFieldPath(cardId, 'isShowingEmploymentVerification')) || false}
                                  onCheckedChange={(checked) => form.setValue(getCoBorrowerSecondEmployerFieldPath(cardId, 'isShowingEmploymentVerification') as any, checked)}
                                  data-testid={`toggle-coborrower-second-employment-verification-${cardId}`}
                                  className="scale-[0.8]"
                                />
                              </div>
                              <Input
                                id={`coBorrowerIncome-second-employer-phone-${cardId}`}
                                placeholder=""
                                value={form.watch(getCoBorrowerSecondEmployerFieldPath(cardId, 'isShowingEmploymentVerification')) 
                                  ? (form.watch(getCoBorrowerSecondEmployerFieldPath(cardId, 'employmentVerificationPhone')) || '')
                                  : (form.watch(getCoBorrowerSecondEmployerFieldPath(cardId, 'employerPhone')) || '')}
                                onChange={(e) => {
                                  const value = e.target.value.replace(/\D/g, '');
                                  let formatted = '';
                                  if (value.length > 0) {
                                    formatted = value.substring(0, 3);
                                    if (value.length > 3) {
                                      formatted += '-' + value.substring(3, 6);
                                      if (value.length > 6) {
                                        formatted += '-' + value.substring(6, 10);
                                      }
                                    }
                                  }
                                  const fieldName = form.watch(getCoBorrowerSecondEmployerFieldPath(cardId, 'isShowingEmploymentVerification')) 
                                    ? getCoBorrowerSecondEmployerFieldPath(cardId, 'employmentVerificationPhone')
                                    : getCoBorrowerSecondEmployerFieldPath(cardId, 'employerPhone');
                                  form.setValue(fieldName as any, formatted);
                                }}
                                maxLength={12}
                                data-testid={`input-coBorrowerIncome-second-employer-phone-${cardId}`}
                              />
                            </div>
                            
                            <div className="space-y-2">
                              <Label htmlFor={`coBorrowerIncome-secondJobTitle-${cardId}`}>Job Title</Label>
                              <Input
                                id={`coBorrowerIncome-secondJobTitle-${cardId}`}
                                {...form.register(getCoBorrowerSecondEmployerFieldPath(cardId, 'jobTitle'))}
                                data-testid={`input-coBorrowerIncome-secondJobTitle-${cardId}`}
                              />
                            </div>
                            
                            <div className="space-y-2">
                              <Label htmlFor={`coBorrowerIncome-secondMonthlyIncome-${cardId}`}>Gross Monthly Income</Label>
                              <Controller
                                control={form.control}
                                name={getCoBorrowerSecondEmployerFieldPath(cardId, 'monthlyIncome')}
                                defaultValue=""
                                render={({ field }) => {
                                  const numVal = field.value ? field.value.replace(/[^\d]/g, '') : '';
                                  const displayValue = numVal ? `$${numVal.replace(/\B(?=(\d{3})+(?!\d))/g, ',')}` : '';
                                  
                                  return (
                                    <Input
                                      id={`coBorrowerIncome-secondMonthlyIncome-${cardId}`}
                                      type="text"
                                      placeholder="$0"
                                      value={displayValue}
                                      onChange={(e) => {
                                        const value = e.target.value.replace(/[^\d]/g, '');
                                        field.onChange(value);
                                      }}
                                      data-testid={`input-coBorrowerIncome-secondMonthlyIncome-${cardId}`}
                                    />
                                  );
                                }}
                              />
                            </div>
                            
                            <div className="space-y-2">
                              <Label htmlFor={`coBorrowerIncome-second-startDate-${cardId}`}>Start Date</Label>
                              <Input
                                id={`coBorrowerIncome-second-startDate-${cardId}`}
                                value={employmentDates[`coborrower-second-employment-${cardId}`]?.startDate || ''}
                                onChange={(e) => {
                                  const value = e.target.value.replace(/\D/g, ''); // Remove non-digits
                                  let formatted = '';
                                  if (value.length > 0) {
                                    formatted = value.substring(0, 2);
                                    if (value.length > 2) {
                                      formatted += '/' + value.substring(2, 4);
                                      if (value.length > 4) {
                                        formatted += '/' + value.substring(4, 8);
                                      }
                                    }
                                  }
                                  const currentData = employmentDates[`coborrower-second-employment-${cardId}`] || { endDate: '', isPresent: false, duration: '' };
                                  updateEmploymentDuration(`coborrower-second-employment-${cardId}`, formatted, currentData.endDate, currentData.isPresent);
                                }}
                                placeholder="MM/DD/YYYY"
                                maxLength={10}
                                data-testid={`input-coBorrowerIncome-second-startDate-${cardId}`}
                              />
                            </div>
                            
                            <div className="space-y-2">
                              <div className="flex items-center justify-between mb-2">
                                <Label htmlFor={`coBorrowerIncome-second-endDate-${cardId}`} className="text-sm">
                                  {employmentDates[`coborrower-second-employment-${cardId}`]?.isPresent ? 'Present' : 'End Date'}
                                </Label>
                                <Switch
                                  checked={employmentDates[`coborrower-second-employment-${cardId}`]?.isPresent ?? false}
                                  onCheckedChange={(checked) => {
                                    const currentData = employmentDates[`coborrower-second-employment-${cardId}`] || { startDate: '', endDate: '', duration: '' };
                                    updateEmploymentDuration(`coborrower-second-employment-${cardId}`, currentData.startDate, currentData.endDate, checked);
                                  }}
                                  data-testid="toggle-coborrower-second-employment-present"
                                  className="scale-[0.8]"
                                />
                              </div>
                              <Input
                                id={`coBorrowerIncome-second-endDate-${cardId}`}
                                value={employmentDates[`coborrower-second-employment-${cardId}`]?.isPresent ? 'present' : (employmentDates[`coborrower-second-employment-${cardId}`]?.endDate || '')}
                                onChange={(e) => {
                                  if (!employmentDates[`coborrower-second-employment-${cardId}`]?.isPresent) {
                                    const value = e.target.value.replace(/\D/g, ''); // Remove non-digits
                                    let formatted = '';
                                    if (value.length > 0) {
                                      formatted = value.substring(0, 2);
                                      if (value.length > 2) {
                                        formatted += '/' + value.substring(2, 4);
                                        if (value.length > 4) {
                                          formatted += '/' + value.substring(4, 8);
                                        }
                                      }
                                    }
                                    const currentData = employmentDates[`coborrower-second-employment-${cardId}`] || { startDate: '', isPresent: false, duration: '' };
                                    updateEmploymentDuration(`coborrower-second-employment-${cardId}`, currentData.startDate, formatted, currentData.isPresent);
                                  }
                                }}
                                placeholder={employmentDates[`coborrower-second-employment-${cardId}`]?.isPresent ? 'Enter' : 'MM/DD/YYYY'}
                                maxLength={10}
                                readOnly={employmentDates[`coborrower-second-employment-${cardId}`]?.isPresent}
                                className={employmentDates[`coborrower-second-employment-${cardId}`]?.isPresent ? 'bg-muted' : ''}
                                data-testid={`input-coBorrowerIncome-second-endDate-${cardId}`}
                              />
                            </div>
                            
                            <div className="space-y-2">
                              <Label htmlFor="coBorrowerIncome-second-employment-duration">Employment Duration</Label>
                              <Input
                                id="coBorrowerIncome-second-employment-duration"
                                value={employmentDates['coborrower-second-employment']?.duration || ''}
                                placeholder={employmentDates['coborrower-second-employment']?.isPresent ? 'Enter' : '0'}
                                readOnly={!employmentDates['coborrower-second-employment']?.isPresent}
                                className={!employmentDates['coborrower-second-employment']?.isPresent ? 'bg-muted' : ''}
                                onChange={(e) => {
                                  if (employmentDates['coborrower-second-employment']?.isPresent) {
                                    const currentData = employmentDates['coborrower-second-employment'] || { startDate: '', endDate: '', isPresent: false };
                                    setEmploymentDates(prev => ({
                                      ...prev,
                                      'coborrower-second-employment': {
                                        ...currentData,
                                        duration: e.target.value
                                      }
                                    }));
                                  }
                                }}
                                data-testid="input-coBorrowerIncome-second-employment-duration"
                              />
                            </div>
                          </div>

                          {/* Employer Address Row */}
                          <div className="grid grid-cols-1 md:grid-cols-12 gap-4">
                            <div className="space-y-2 md:col-span-3">
                              <Label htmlFor={`coBorrowerIncome-secondEmployerAddress-street-${cardId}`}>Street Address</Label>
                              <Input
                                id={`coBorrowerIncome-secondEmployerAddress-street-${cardId}`}
                                {...form.register(getCoBorrowerSecondEmployerFieldPath(cardId, 'employerAddress.street'))}
                                data-testid={`input-coBorrowerIncome-secondEmployerAddress-street-${cardId}`}
                              />
                            </div>
                            
                            <div className="space-y-2 md:col-span-1">
                              <Label htmlFor={`coBorrowerIncome-secondEmployerAddress-unit-${cardId}`}>Unit/Suite</Label>
                              <Input
                                id={`coBorrowerIncome-secondEmployerAddress-unit-${cardId}`}
                                {...form.register(getCoBorrowerSecondEmployerFieldPath(cardId, 'employerAddress.unit'))}
                                data-testid={`input-coBorrowerIncome-secondEmployerAddress-unit-${cardId}`}
                              />
                            </div>
                            
                            <div className="space-y-2 md:col-span-2">
                              <Label htmlFor="coBorrowerIncome-secondEmployerAddress-city">City</Label>
                              <Input
                                id={`coBorrowerIncome-secondEmployerAddress-city-${cardId}`}
                                {...form.register(getCoBorrowerSecondEmployerFieldPath(cardId, 'employerAddress.city'))}
                                data-testid={`input-coBorrowerIncome-secondEmployerAddress-city-${cardId}`}
                              />
                            </div>
                            
                            <div className="space-y-2 md:col-span-1">
                              <Label htmlFor="coBorrowerIncome-secondEmployerAddress-state">State</Label>
                              <Select
                                value={form.watch(getCoBorrowerSecondEmployerFieldPath(cardId, 'employerAddress.state')) || ''}
                                onValueChange={(value) => form.setValue(getCoBorrowerSecondEmployerFieldPath(cardId, 'employerAddress.state') as any, value)}
                              >
                                <SelectTrigger data-testid="select-coBorrowerIncome-secondEmployerAddress-state">
                                  <SelectValue placeholder="State" />
                                </SelectTrigger>
                                <SelectContent>
                                  {US_STATES.map((state) => (
                                    <SelectItem key={state.value} value={state.value}>
                                      {state.value}
                                    </SelectItem>
                                  ))}
                                </SelectContent>
                              </Select>
                            </div>
                            
                            <div className="space-y-2 md:col-span-1">
                              <Label htmlFor="coBorrowerIncome-secondEmployerAddress-zip">ZIP Code</Label>
                              <Input
                                id={`coBorrowerIncome-secondEmployerAddress-zip-${cardId}`}
                                {...form.register(getCoBorrowerSecondEmployerFieldPath(cardId, 'employerAddress.zip'))}
                                onChange={(e) => {
                                  form.setValue(getCoBorrowerSecondEmployerFieldPath(cardId, 'employerAddress.zip') as any, e.target.value);
                                  handleCoBorrowerSecondEmployerZipCodeLookup(e.target.value, cardId);
                                }}
                                data-testid={`input-coBorrowerIncome-secondEmployerAddress-zip-${cardId}`}
                              />
                            </div>
                            
                            <div className="space-y-2 md:col-span-2">
                              <Label htmlFor="coBorrowerIncome-secondEmployerAddress-county">County</Label>
                              {(coBorrowerSecondEmployerCountyOptions[cardId] || []).length > 0 ? (
                                <Select
                                  value={form.watch(getCoBorrowerSecondEmployerFieldPath(cardId, 'employerAddress.county')) || ''}
                                  onValueChange={(value) => form.setValue(getCoBorrowerSecondEmployerFieldPath(cardId, 'employerAddress.county') as any, value)}
                                >
                                  <SelectTrigger data-testid={`select-coBorrowerIncome-secondEmployerAddress-county-${cardId}`}>
                                    <SelectValue placeholder="Select county" />
                                  </SelectTrigger>
                                  <SelectContent>
                                    {(coBorrowerSecondEmployerCountyOptions[cardId] || []).map((county) => (
                                      <SelectItem key={county.value} value={county.label}>
                                        {county.label}
                                      </SelectItem>
                                    ))}
                                  </SelectContent>
                                </Select>
                              ) : (
                                <Input
                                  id={`coBorrowerIncome-secondEmployerAddress-county-${cardId}`}
                                  {...form.register(getCoBorrowerSecondEmployerFieldPath(cardId, 'employerAddress.county'))}
                                  data-testid={`input-coBorrowerIncome-secondEmployerAddress-county-${cardId}`}
                                />
                              )}
                            </div>
                            
                            <div className="space-y-2 md:col-span-2">
                              <Label htmlFor="coBorrowerIncome-secondEmploymentType">Full-Time / Part-Time</Label>
                              <Select
                                value={form.watch(getCoBorrowerSecondEmployerFieldPath(cardId, 'employmentType')) || ''}
                                onValueChange={(value) => form.setValue(getCoBorrowerSecondEmployerFieldPath(cardId, 'employmentType') as any, value)}
                              >
                                <SelectTrigger data-testid="select-coBorrowerIncome-secondEmploymentType">
                                  <SelectValue placeholder="Select type" />
                                </SelectTrigger>
                                <SelectContent>
                                  <SelectItem value="Full-Time">Full-Time</SelectItem>
                                  <SelectItem value="Part-Time">Part-Time</SelectItem>
                                </SelectContent>
                              </Select>
                            </div>
                          </div>

                        </div>
                      </CardContent>
                    </CollapsibleContent>
                  </Collapsible>
                </Card>
                );
              })}

              {/* Co-Borrower - Self-Employment Cards */}
              {hasCoBorrower && form.watch('coBorrowerIncome.incomeTypes.selfEmployment') && (coBorrowerSelfEmploymentCards || ['default']).map((cardId, index) => {
                const propertyId = cardId === 'default' ? 'co-borrower-self-employment-template-card' : cardId;
                const isOpen = propertyCardStates[propertyId] ?? true;
                
                return (
                  <Card key={cardId} className="transition-colors duration-200">
                    <Collapsible 
                      open={isOpen} 
                      onOpenChange={(open) => {
                        setPropertyCardStates(prev => ({ ...prev, [propertyId]: open }));
                        if (open) {
                          setTimeout(() => {
                            setShowIncomeCardAnimation(prev => ({ ...prev, 'co-borrower-self-employment': true }));
                            setTimeout(() => {
                              setShowIncomeCardAnimation(prev => ({ ...prev, 'co-borrower-self-employment': false }));
                            }, 800);
                          }, 200);
                        }
                      }}
                    >
                      <CardHeader>
                        <div className="flex items-center justify-between">
                          <div className="flex items-center gap-8">
                            <CardTitle className="flex items-center gap-2">
                              Co-Borrower - Self-Employment
                            </CardTitle>
                          </div>
                          <div className="flex items-center gap-2">
                            {/* Add Self-Employment Button */}
                            <Button
                              type="button"
                              variant="outline"
                              size="sm"
                              onClick={() => {
                                const newId = `co-borrower-self-employment-${Date.now()}`;
                                setCoBorrowerSelfEmploymentCards(prev => [...(prev || ['default']), newId]);
                              }}
                              className="hover:bg-blue-500 hover:text-white"
                              data-testid="button-add-co-borrower-self-employment"
                              title="Add New Co-Borrower Self-Employment"
                            >
                              <Plus className="h-4 w-4 mr-2" />
                              Add Self-Employment
                            </Button>
                            
                            {/* Delete Self-Employment Button - always show for default card, conditionally for additional cards */}
                            {(cardId === 'default' || (coBorrowerSelfEmploymentCards || []).length > 1) && (
                              <Button
                                type="button"
                                variant="outline"
                                size="sm"
                                onClick={() => setDeleteCoBorrowerSelfEmploymentDialog({ isOpen: true, cardId: propertyId })}
                                className="hover:bg-red-500 hover:text-white"
                                data-testid={`button-delete-co-borrower-self-employment-${cardId}`}
                                title="Delete Co-Borrower Self-Employment"
                              >
                                <Minus className="h-4 w-4 mr-2" />
                                Remove
                              </Button>
                            )}
                            
                            <CollapsibleTrigger asChild>
                              <Button 
                                variant="ghost" 
                                size="sm" 
                                className="hover:bg-orange-500 hover:text-white" 
                                data-testid={`button-toggle-co-borrower-self-employment-${propertyId}`}
                                title={isOpen ? 'Minimize' : 'Expand'}
                                key={`co-borrower-self-employment-${propertyId}-${isOpen}`}
                              >
                                {isOpen ? <Minus className="h-4 w-4" /> : <Plus className="h-4 w-4" />}
                              </Button>
                            </CollapsibleTrigger>
                          </div>
                        </div>
                      </CardHeader>
                    <CollapsibleContent>
                      <CardContent className="space-y-4">
                      {/* Employment Type Selection */}
                      <Card className={`bg-muted ${
                        showIncomeCardAnimation['co-borrower-self-employment'] ? 'animate-roll-down-subject-property' : ''
                      }`}>
                        <CardContent className="pt-6">
                          <div className="space-y-3">
                            <div className="flex gap-4 justify-between items-center">
                              <div className="flex gap-4">
                                <div className="flex items-center space-x-2">
                                  <input
                                    type="radio"
                                    id={`co-borrower-self-employment-current-${cardId}`}
                                    name={`co-borrower-self-employment-type-${cardId}`}
                                    data-testid="radio-co-borrower-self-employment-current"
                                  />
                                  <Label htmlFor={`co-borrower-self-employment-current-${cardId}`}>Current</Label>
                                </div>
                                
                                <div className="flex items-center space-x-2">
                                  <input
                                    type="radio"
                                    id={`co-borrower-self-employment-prior-${cardId}`}
                                    name={`co-borrower-self-employment-type-${cardId}`}
                                    data-testid="radio-co-borrower-self-employment-prior"
                                  />
                                  <Label htmlFor={`co-borrower-self-employment-prior-${cardId}`}>Prior</Label>
                                </div>
                              </div>
                              
                              <div className="flex gap-2 mr-4">
                                <Button
                                  type="button"
                                  variant="outline"
                                  size="sm"
                                  onClick={() => openCoBorrowerBusinessDescriptionDialog(cardId)}
                                  className="bg-gray-300 text-gray-700 hover:bg-gray-400 min-w-[180px]"
                                  style={{ backgroundColor: '#d1d5db', borderColor: '#d1d5db', color: '#374151' }}
                                  data-testid="button-co-borrower-self-employment-description"
                                  title="Description"
                                >
                                  Description
                                </Button>
                                <Button
                                  type="button"
                                  variant="outline"
                                  size="sm"
                                  onClick={() => openCoBorrowerTaxPreparerDialog(cardId)}
                                  className="bg-gray-300 text-gray-700 hover:bg-gray-400 min-w-[110px]"
                                  style={{ backgroundColor: '#d1d5db', borderColor: '#d1d5db', color: '#374151' }}
                                  data-testid="button-co-borrower-self-employment-filing"
                                  title="Filing"
                                >
                                  Filing
                                </Button>
                              </div>
                            </div>
                          </div>
                        </CardContent>
                      </Card>

                      {/* First row with business details */}
                      <div className="grid grid-cols-1 md:grid-cols-12 gap-4">
                        <div className="space-y-2 md:col-span-2">
                          <Label htmlFor={`coBorrowerIncome-businessName-${cardId}`}>Business / DBA Name</Label>
                          <Input
                            id={`coBorrowerIncome-businessName-${cardId}`}
                            {...form.register(getCoBorrowerSelfEmploymentFieldPath(cardId, 'businessName') as any)}
                            data-testid={`input-coBorrowerIncome-businessName-${cardId}`}
                          />
                        </div>
                        
                        <div className="space-y-2 md:col-span-2">
                          <Label htmlFor={`coBorrowerIncome-businessPhone-${cardId}`}>Phone</Label>
                          <Input
                            id={`coBorrowerIncome-businessPhone-${cardId}`}
                            placeholder=""
                            value={form.watch(getCoBorrowerSelfEmploymentFieldPath(cardId, 'businessPhone') as any) || ''}
                            onChange={(e) => {
                              const value = e.target.value.replace(/\D/g, '');
                              let formatted = '';
                              if (value.length > 0) {
                                formatted = value.substring(0, 3);
                                if (value.length > 3) {
                                  formatted += '-' + value.substring(3, 6);
                                  if (value.length > 6) {
                                    formatted += '-' + value.substring(6, 10);
                                  }
                                }
                              }
                              form.setValue(getCoBorrowerSelfEmploymentFieldPath(cardId, 'businessPhone') as any, formatted);
                            }}
                            maxLength={12}
                            data-testid={`input-coBorrowerIncome-businessPhone-${cardId}`}
                          />
                        </div>
                        
                        
                        <div className="space-y-2 md:col-span-2">
                          <Label htmlFor={`coBorrowerIncome-annualRevenue-${cardId}`}>Gross Monthly Income</Label>
                          <Controller
                            control={form.control}
                            name={getCoBorrowerSelfEmploymentFieldPath(cardId, 'grossAnnualRevenue')}
                            defaultValue=""
                            render={({ field }) => {
                              const numVal = field.value ? field.value.replace(/[^\d]/g, '') : '';
                              const displayValue = numVal ? `$${numVal.replace(/\B(?=(\d{3})+(?!\d))/g, ',')}` : '';
                              
                              return (
                                <Input
                                  id={`coBorrowerIncome-annualRevenue-${cardId}`}
                                  type="text"
                                  placeholder="$0"
                                  value={displayValue}
                                  onChange={(e) => {
                                    const value = e.target.value.replace(/[^\d]/g, '');
                                    field.onChange(value);
                                  }}
                                  data-testid={`input-coBorrowerIncome-annualRevenue-${cardId}`}
                                />
                              );
                            }}
                          />
                        </div>
                        
                        <div className="space-y-2 md:col-span-2">
                          <Label htmlFor={`coBorrowerIncome-self-employment-startDate-${cardId}`}>Start Date</Label>
                          <Input
                            id={`coBorrowerIncome-self-employment-startDate-${cardId}`}
                            value={employmentDates[`co-borrower-self-employment-${cardId}`]?.startDate || ''}
                            onChange={(e) => {
                              const value = e.target.value.replace(/\D/g, ''); // Remove non-digits
                              let formatted = '';
                              if (value.length > 0) {
                                formatted = value.substring(0, 2);
                                if (value.length > 2) {
                                  formatted += '/' + value.substring(2, 4);
                                  if (value.length > 4) {
                                    formatted += '/' + value.substring(4, 8);
                                  }
                                }
                              }
                              const currentData = employmentDates[`co-borrower-self-employment-${cardId}`] || { endDate: '', isPresent: false, duration: '' };
                              updateEmploymentDuration(`co-borrower-self-employment-${cardId}`, formatted, currentData.endDate, currentData.isPresent);
                            }}
                            placeholder="MM/DD/YYYY"
                            maxLength={10}
                            data-testid={`input-coBorrowerIncome-self-employment-startDate-${cardId}`}
                          />
                        </div>
                        
                        <div className="space-y-2 md:col-span-2">
                          <div className="flex items-center justify-between mb-2">
                            <Label htmlFor={`coBorrowerIncome-self-employment-endDate-${cardId}`} className="text-sm">
                              {employmentDates[`co-borrower-self-employment-${cardId}`]?.isPresent ? 'Present' : 'End Date'}
                            </Label>
                            <Switch
                              checked={employmentDates[`co-borrower-self-employment-${cardId}`]?.isPresent ?? true}
                              onCheckedChange={(checked) => {
                                const currentData = employmentDates[`co-borrower-self-employment-${cardId}`] || { startDate: '', endDate: '', duration: '' };
                                updateEmploymentDuration(`co-borrower-self-employment-${cardId}`, currentData.startDate, currentData.endDate, checked);
                              }}
                              data-testid={`toggle-co-borrower-self-employment-present-${cardId}`}
                              className="scale-[0.8]"
                            />
                          </div>
                          <Input
                            id={`coBorrowerIncome-self-employment-endDate-${cardId}`}
                            value={employmentDates[`co-borrower-self-employment-${cardId}`]?.isPresent ? 'present' : (employmentDates[`co-borrower-self-employment-${cardId}`]?.endDate || '')}
                            onChange={(e) => {
                              if (!employmentDates[`co-borrower-self-employment-${cardId}`]?.isPresent) {
                                const value = e.target.value.replace(/\D/g, ''); // Remove non-digits
                                let formatted = '';
                                if (value.length > 0) {
                                  formatted = value.substring(0, 2);
                                  if (value.length > 2) {
                                    formatted += '/' + value.substring(2, 4);
                                    if (value.length > 4) {
                                      formatted += '/' + value.substring(4, 8);
                                    }
                                  }
                                }
                                const currentData = employmentDates[`co-borrower-self-employment-${cardId}`] || { startDate: '', isPresent: false, duration: '' };
                                updateEmploymentDuration(`co-borrower-self-employment-${cardId}`, currentData.startDate, formatted, currentData.isPresent);
                              }
                            }}
                            placeholder={employmentDates[`co-borrower-self-employment-${cardId}`]?.isPresent ? 'Present' : 'MM/DD/YYYY'}
                            maxLength={10}
                            readOnly={employmentDates[`co-borrower-self-employment-${cardId}`]?.isPresent}
                            className={employmentDates[`co-borrower-self-employment-${cardId}`]?.isPresent ? 'bg-muted' : ''}
                            data-testid={`input-coBorrowerIncome-self-employment-endDate-${cardId}`}
                          />
                        </div>
                        
                        <div className="space-y-2 md:col-span-2">
                          <Label htmlFor={`coBorrowerIncome-self-employment-duration-${cardId}`}>Duration</Label>
                          <Input
                            id={`coBorrowerIncome-self-employment-duration-${cardId}`}
                            value={employmentDates[`co-borrower-self-employment-${cardId}`]?.duration || ''}
                            placeholder={employmentDates[`co-borrower-self-employment-${cardId}`]?.isPresent ? 'Enter' : '0'}
                            readOnly={!employmentDates[`co-borrower-self-employment-${cardId}`]?.isPresent}
                            className={!employmentDates[`co-borrower-self-employment-${cardId}`]?.isPresent ? 'bg-muted' : ''}
                            onChange={(e) => {
                              if (employmentDates[`co-borrower-self-employment-${cardId}`]?.isPresent) {
                                const currentData = employmentDates[`co-borrower-self-employment-${cardId}`] || { startDate: '', endDate: '', isPresent: false };
                                setEmploymentDates(prev => ({
                                  ...prev,
                                  [`co-borrower-self-employment-${cardId}`]: {
                                    ...currentData,
                                    duration: e.target.value
                                  }
                                }));
                              }
                            }}
                            data-testid={`input-coBorrowerIncome-self-employment-duration-${cardId}`}
                          />
                        </div>
                      </div>
                        
                        {/* Business Address Row (copied from borrower residence address) */}
                        <div className="grid grid-cols-1 md:grid-cols-12 gap-4">
                          <div className="space-y-2 md:col-span-3">
                            <Label htmlFor={`coBorrowerIncome-business-street-${cardId}`}>Street Address</Label>
                            <Input
                              id={`coBorrowerIncome-business-street-${cardId}`}
                              {...form.register(getCoBorrowerSelfEmploymentFieldPath(cardId, 'businessAddress.street') as any)}
                              data-testid={`input-coBorrowerIncome-business-street-${cardId}`}
                            />
                          </div>
                          
                          <div className="space-y-2 md:col-span-1">
                            <Label htmlFor={`coBorrowerIncome-business-unit-${cardId}`}>Unit/Suite</Label>
                            <Input
                              id={`coBorrowerIncome-business-unit-${cardId}`}
                              {...form.register(getCoBorrowerSelfEmploymentFieldPath(cardId, 'businessAddress.unit') as any)}
                              data-testid={`input-coBorrowerIncome-business-unit-${cardId}`}
                            />
                          </div>
                          
                          <div className="space-y-2 md:col-span-2">
                            <Label htmlFor={`coBorrowerIncome-business-city-${cardId}`}>City</Label>
                            <Input
                              id={`coBorrowerIncome-business-city-${cardId}`}
                              {...form.register(getCoBorrowerSelfEmploymentFieldPath(cardId, 'businessAddress.city') as any)}
                              data-testid={`input-coBorrowerIncome-business-city-${cardId}`}
                            />
                          </div>
                          
                          <div className="space-y-2 md:col-span-1">
                            <Label htmlFor={`coBorrowerIncome-business-state-${cardId}`}>State</Label>
                            <Select
                              value={form.watch(getCoBorrowerSelfEmploymentFieldPath(cardId, 'businessAddress.state') as any) || ''}
                              onValueChange={(value) => form.setValue(getCoBorrowerSelfEmploymentFieldPath(cardId, 'businessAddress.state') as any, value)}
                            >
                              <SelectTrigger data-testid={`select-coBorrowerIncome-business-state-${cardId}`}>
                                <SelectValue placeholder="State" />
                              </SelectTrigger>
                              <SelectContent>
                                {US_STATES.map((state) => (
                                  <SelectItem key={state.value} value={state.value}>
                                    {state.value}
                                  </SelectItem>
                                ))}
                              </SelectContent>
                            </Select>
                          </div>
                          
                          <div className="space-y-2 md:col-span-1">
                            <Label htmlFor={`coBorrowerIncome-business-zip-${cardId}`}>ZIP Code</Label>
                            <Input
                              id={`coBorrowerIncome-business-zip-${cardId}`}
                              {...form.register(getCoBorrowerSelfEmploymentFieldPath(cardId, 'businessAddress.zip') as any)}
                              data-testid={`input-coBorrowerIncome-business-zip-${cardId}`}
                            />
                          </div>
                          
                          <div className="space-y-2 md:col-span-2">
                            <Label htmlFor={`coBorrowerIncome-business-county-${cardId}`}>County</Label>
                            <Input
                              id={`coBorrowerIncome-business-county-${cardId}`}
                              {...form.register(getCoBorrowerSelfEmploymentFieldPath(cardId, 'businessAddress.county') as any)}
                              data-testid={`input-coBorrowerIncome-business-county-${cardId}`}
                            />
                          </div>
                          
                          <div className="space-y-2 md:col-span-2">
                            <Label htmlFor={`coBorrowerIncome-formation-${cardId}`}>Formation</Label>
                            <Select onValueChange={(value) => form.setValue(getCoBorrowerSelfEmploymentFieldPath(cardId, 'formation') as any, value)} value={form.watch(getCoBorrowerSelfEmploymentFieldPath(cardId, 'formation') as any) || ''}>
                              <SelectTrigger data-testid={`select-coBorrowerIncome-formation-${cardId}`}>
                                <SelectValue placeholder="Select" />
                              </SelectTrigger>
                              <SelectContent>
                                <SelectItem value="Sole Proprietorship" data-testid="select-item-sole-proprietorship">Sole Proprietorship</SelectItem>
                                <SelectItem value="General Partnership (GP)" data-testid="select-item-general-partnership">General Partnership (GP)</SelectItem>
                                <SelectItem value="Limited Partnership (LP)" data-testid="select-item-limited-partnership">Limited Partnership (LP)</SelectItem>
                                <SelectItem value="Limited Liability Partnership (LLP)" data-testid="select-item-llp">Limited Liability Partnership (LLP)</SelectItem>
                                <SelectItem value="LLC taxed as S-Corp" data-testid="select-item-llc-s-corp">LLC taxed as S-Corp</SelectItem>
                                <SelectItem value="LLC taxed as C-Corp" data-testid="select-item-llc-c-corp">LLC taxed as C-Corp</SelectItem>
                                <SelectItem value="C Corporation (C-Corp)" data-testid="select-item-c-corporation">C Corporation (C-Corp)</SelectItem>
                                <SelectItem value="S Corporation (S-Corp)" data-testid="select-item-s-corporation">S Corporation (S-Corp)</SelectItem>
                                <SelectItem value="Benefit Corporation (B-Corp)" data-testid="select-item-benefit-corporation">Benefit Corporation (B-Corp)</SelectItem>
                                <SelectItem value="Close Corporation" data-testid="select-item-close-corporation">Close Corporation</SelectItem>
                                <SelectItem value="Non-Profit Corporation" data-testid="select-item-non-profit-corporation">Non-Profit Corporation</SelectItem>
                                <SelectItem value="Professional Corporation (PC)" data-testid="select-item-professional-corporation">Professional Corporation (PC)</SelectItem>
                                <SelectItem value="Professional LLC (PLLC)" data-testid="select-item-professional-llc">Professional LLC (PLLC)</SelectItem>
                                <SelectItem value="Joint Venture" data-testid="select-item-joint-venture">Joint Venture</SelectItem>
                              </SelectContent>
                            </Select>
                          </div>
                        </div>
                        
                      </CardContent>
                    </CollapsibleContent>
                  </Collapsible>
                </Card>
                );
              })}

              {/* Co-Borrower Pension Card */}
              {hasCoBorrower && form.watch('coBorrowerIncome.incomeTypes.pension') && (
                <Card>
                  <Collapsible open={isCoBorrowerPensionIncomeOpen} onOpenChange={(open) => {
                    setIsCoBorrowerPensionIncomeOpen(open);
                    if (open && !showIncomeCardAnimation['co-borrower-pension']) {
                      setTimeout(() => {
                        setShowIncomeCardAnimation(prev => ({ ...prev, 'co-borrower-pension': true }));
                        setTimeout(() => {
                          setShowIncomeCardAnimation(prev => ({ ...prev, 'co-borrower-pension': false }));
                        }, 800);
                      }, 200);
                    }
                  }}>
                    <CardHeader>
                      <div className="flex items-center justify-between">
                        <CardTitle>Co-Borrower - Pension</CardTitle>
                        <div className="flex items-center gap-2">
                          <Button 
                            type="button" 
                            variant="outline" 
                            size="sm" 
                            onClick={addCoBorrowerPension}
                            className="hover:bg-blue-500 hover:text-white"
                            data-testid="button-add-coborrower-pension-header"
                            title="Add New Pension"
                          >
                            <Plus className="h-4 w-4 mr-2" />
                            Add Pension
                          </Button>
                          <Button
                            type="button"
                            variant="outline"
                            size="sm"
                            onClick={removeDefaultCoBorrowerPension}
                            className="hover:bg-red-500 hover:text-white"
                            data-testid="button-remove-default-coborrower-pension"
                            title="Delete Pension"
                          >
                            <Minus className="h-4 w-4 mr-2" />
                            Remove
                          </Button>
                          <CollapsibleTrigger asChild>
                            <Button 
                              variant="ghost" 
                              size="sm" 
                              className="hover:bg-orange-500 hover:text-white" 
                              data-testid="button-toggle-coborrower-pension-income"
                              title={isCoBorrowerPensionIncomeOpen ? 'Minimize' : 'Expand'}
                              key={`coborrower-pension-income-${isCoBorrowerPensionIncomeOpen}`}
                            >
                              {isCoBorrowerPensionIncomeOpen ? <Minus className="h-4 w-4" /> : <Plus className="h-4 w-4" />}
                            </Button>
                          </CollapsibleTrigger>
                        </div>
                      </div>
                    </CardHeader>
                    <CollapsibleContent>
                      <CardContent className="space-y-4">
                        
                        {(form.watch('coBorrowerIncome.pensions') || []).map((pension, index) => (
                          <Card key={pension.id || index} className="p-4">
                            <div className="flex items-center justify-between mb-4">
                              <h4 className="text-sm font-medium">Pension {index + 1}</h4>
                              <Button
                                type="button"
                                variant="ghost"
                                size="sm"
                                onClick={() => removeCoBorrowerPension(pension.id!)}
                                className="hover:bg-orange-500 hover:text-white"
                                data-testid={`button-remove-coborrower-pension-${index}`}
                                title="Delete Pension"
                              >
                                <Minus className="h-4 w-4" />
                              </Button>
                            </div>
                            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                              <div className="space-y-2">
                                <Label htmlFor={`coBorrowerIncome-pension-${index}-payerName`}>Payer Name</Label>
                                <Input
                                  id={`coBorrowerIncome-pension-${index}-payerName`}
                                  {...form.register(`coBorrowerIncome.pensions.${index}.payerName`)}
                                  placeholder="e.g., Federal Retirement Fund"
                                  data-testid={`input-coborrowerIncome-pension-${index}-payerName`}
                                />
                              </div>
                              <div className="space-y-2">
                                <Label htmlFor={`coBorrowerIncome-pension-${index}-monthlyAmount`}>Gross Monthly Income</Label>
                                <Controller
                                  control={form.control}
                                  name={`coBorrowerIncome.pensions.${index}.monthlyAmount`}
                                  defaultValue=""
                                  render={({ field }) => {
                                    const numVal = field.value ? field.value.replace(/[^\d]/g, '') : '';
                                    const displayValue = numVal ? `$${numVal.replace(/\B(?=(\d{3})+(?!\d))/g, ',')}` : '';
                                    
                                    return (
                                      <Input
                                        id={`coBorrowerIncome-pension-${index}-monthlyAmount`}
                                        type="text"
                                        placeholder="$0"
                                        value={displayValue}
                                        onChange={(e) => {
                                          const value = e.target.value.replace(/[^\d]/g, '');
                                          field.onChange(value);
                                        }}
                                        data-testid={`input-coborrowerIncome-pension-${index}-monthlyAmount`}
                                      />
                                    );
                                  }}
                                />
                              </div>
                              <div className="space-y-2">
                                <Label htmlFor={`coBorrowerIncome-pension-${index}-startDate`}>Start Date</Label>
                                <Input
                                  id={`coBorrowerIncome-pension-${index}-startDate`}
                                  value={form.watch(`coBorrowerIncome.pensions.${index}.startDate`) || ''}
                                  onChange={(e) => {
                                    const value = e.target.value.replace(/\D/g, ''); // Remove non-digits
                                    let formatted = '';
                                    if (value.length > 0) {
                                      formatted = value.substring(0, 2);
                                      if (value.length > 2) {
                                        formatted += '/' + value.substring(2, 4);
                                        if (value.length > 4) {
                                          formatted += '/' + value.substring(4, 8);
                                        }
                                      }
                                    }
                                    form.setValue(`coBorrowerIncome.pensions.${index}.startDate`, formatted);
                                  }}
                                  placeholder="MM/DD/YYYY"
                                  maxLength={10}
                                  data-testid={`input-coborrowerIncome-pension-${index}-startDate`}
                                />
                              </div>
                            </div>
                          </Card>
                        ))}
                      </CardContent>
                    </CollapsibleContent>
                  </Collapsible>
                </Card>
              )}

              {/* Co-Borrower Social Security Card */}
              {hasCoBorrower && form.watch('coBorrowerIncome.incomeTypes.socialSecurity') && (
                <Card>
                  <Collapsible open={isCoBorrowerSocialSecurityIncomeOpen} onOpenChange={setIsCoBorrowerSocialSecurityIncomeOpen}>
                    <CardHeader>
                      <div className="flex items-center justify-between">
                        <CardTitle>Co-Borrower - Social Security</CardTitle>
                        <div className="flex items-center gap-2">
                          <Button
                            type="button"
                            variant="outline"
                            size="sm"
                            onClick={() => setDeleteCoBorrowerSocialSecurityDialog({ isOpen: true })}
                            className="hover:bg-red-500 hover:text-white"
                            data-testid="button-delete-coborrower-social-security"
                            title="Delete Co-Borrower Social Security Income"
                          >
                            <Minus className="h-4 w-4 mr-2" />
                            Remove
                          </Button>
                          <CollapsibleTrigger asChild>
                            <Button 
                              variant="ghost" 
                              size="sm" 
                              className="hover:bg-orange-500 hover:text-white" 
                              data-testid="button-toggle-coborrower-social-security-income"
                              title={isCoBorrowerSocialSecurityIncomeOpen ? 'Minimize' : 'Expand'}
                              key={`coborrower-social-security-income-${isCoBorrowerSocialSecurityIncomeOpen}`}
                            >
                              {isCoBorrowerSocialSecurityIncomeOpen ? <Minus className="h-4 w-4" /> : <Plus className="h-4 w-4" />}
                            </Button>
                          </CollapsibleTrigger>
                        </div>
                      </div>
                    </CardHeader>
                    <CollapsibleContent>
                      <CardContent className="space-y-4">
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div className="space-y-2">
                          <Label htmlFor="coBorrowerIncome-socialSecurityMonthlyAmount">Gross Monthly Income</Label>
                          <Controller
                            control={form.control}
                            name="coBorrowerIncome.socialSecurityMonthlyAmount"
                            defaultValue=""
                            render={({ field }) => {
                              const numVal = field.value ? field.value.replace(/[^\d]/g, '') : '';
                              const displayValue = numVal ? `$${numVal.replace(/\B(?=(\d{3})+(?!\d))/g, ',')}` : '';
                              
                              return (
                                <Input
                                  id="coBorrowerIncome-socialSecurityMonthlyAmount"
                                  type="text"
                                  placeholder="$0"
                                  value={displayValue}
                                  onChange={(e) => {
                                    const value = e.target.value.replace(/[^\d]/g, '');
                                    field.onChange(value);
                                  }}
                                  data-testid="input-coborrowerIncome-socialSecurityMonthlyAmount"
                                />
                              );
                            }}
                          />
                        </div>
                        <div className="space-y-2">
                          <Label htmlFor="coBorrowerIncome-socialSecurityStartDate">Start Date</Label>
                          <Input
                            id="coBorrowerIncome-socialSecurityStartDate"
                            value={form.watch('coBorrowerIncome.socialSecurityStartDate') || ''}
                            onChange={(e) => {
                              const value = e.target.value.replace(/\D/g, ''); // Remove non-digits
                              let formatted = '';
                              if (value.length > 0) {
                                formatted = value.substring(0, 2);
                                if (value.length > 2) {
                                  formatted += '/' + value.substring(2, 4);
                                  if (value.length > 4) {
                                    formatted += '/' + value.substring(4, 8);
                                  }
                                }
                              }
                              form.setValue('coBorrowerIncome.socialSecurityStartDate', formatted);
                            }}
                            placeholder="MM/DD/YYYY"
                            maxLength={10}
                            data-testid="input-coborrowerIncome-socialSecurityStartDate"
                          />
                        </div>
                      </div>
                      </CardContent>
                    </CollapsibleContent>
                  </Collapsible>
                </Card>
              )}

              {/* Co-Borrower Disability Card */}
              {hasCoBorrower && form.watch('coBorrowerIncome.incomeTypes.disability') && (
                <Card>
                  <Collapsible open={isCoBorrowerVaBenefitsIncomeOpen} onOpenChange={setIsCoBorrowerVaBenefitsIncomeOpen}>
                    <CardHeader>
                      <div className="flex items-center justify-between">
                        <CardTitle>Co-Borrower - Disability</CardTitle>
                        <div className="flex items-center gap-2">
                          <Button
                            type="button"
                            variant="outline"
                            size="sm"
                            onClick={() => setDeleteCoBorrowerVaBenefitsDialog({ isOpen: true })}
                            className="hover:bg-red-500 hover:text-white"
                            data-testid="button-delete-coborrower-va-benefits"
                            title="Delete Co-Borrower VA Disability Income"
                          >
                            <Minus className="h-4 w-4 mr-2" />
                            Remove
                          </Button>
                          <CollapsibleTrigger asChild>
                            <Button 
                              variant="ghost" 
                              size="sm" 
                              className="hover:bg-orange-500 hover:text-white" 
                              data-testid="button-toggle-coborrower-va-benefits-income"
                              title={isCoBorrowerVaBenefitsIncomeOpen ? 'Minimize' : 'Expand'}
                              key={`coborrower-va-benefits-income-${isCoBorrowerVaBenefitsIncomeOpen}`}
                            >
                              {isCoBorrowerVaBenefitsIncomeOpen ? <Minus className="h-4 w-4" /> : <Plus className="h-4 w-4" />}
                            </Button>
                          </CollapsibleTrigger>
                        </div>
                      </div>
                    </CardHeader>
                    <CollapsibleContent>
                      <CardContent className="space-y-4">
                      {/* Disability Type Selection */}
                      <Card className="bg-muted">
                        <CardContent className="pt-6">
                          <div className="space-y-3">
                            <div className="flex gap-4">
                              <div className="flex items-center space-x-2">
                                <div
                                  onClick={() => {
                                    if (coBorrowerVaDisabilitySelected) {
                                      setDeleteCoBorrowerVaDisabilityTypeDialog({ isOpen: true });
                                    } else {
                                      setCoBorrowerVaDisabilitySelected(true);
                                    }
                                  }}
                                  className={`w-4 h-4 rounded-full border-2 cursor-pointer flex items-center justify-center transition-colors ${
                                    coBorrowerVaDisabilitySelected ? 'bg-blue-500 border-blue-500' : 'bg-white border-gray-300'
                                  }`}
                                  data-testid="circle-coborrower-disability-va"
                                >
                                  {coBorrowerVaDisabilitySelected && <div className="w-2 h-2 rounded-full bg-white"></div>}
                                </div>
                                <Label 
                                  htmlFor="coborrower-disability-va"
                                  className="cursor-pointer"
                                  onClick={() => {
                                    if (coBorrowerVaDisabilitySelected) {
                                      setDeleteCoBorrowerVaDisabilityTypeDialog({ isOpen: true });
                                    } else {
                                      setCoBorrowerVaDisabilitySelected(true);
                                    }
                                  }}
                                >
                                  VA Disability
                                </Label>
                              </div>
                              
                              <div className="flex items-center space-x-2">
                                <div
                                  onClick={() => {
                                    if (coBorrowerOtherDisabilitySelected) {
                                      setDeleteCoBorrowerOtherDisabilityTypeDialog({ isOpen: true });
                                    } else {
                                      setCoBorrowerOtherDisabilitySelected(true);
                                    }
                                  }}
                                  className={`w-4 h-4 rounded-full border-2 cursor-pointer flex items-center justify-center transition-colors ${
                                    coBorrowerOtherDisabilitySelected ? 'bg-blue-500 border-blue-500' : 'bg-white border-gray-300'
                                  }`}
                                  data-testid="circle-coborrower-disability-other"
                                >
                                  {coBorrowerOtherDisabilitySelected && <div className="w-2 h-2 rounded-full bg-white"></div>}
                                </div>
                                <Label 
                                  htmlFor="coborrower-disability-other"
                                  className="cursor-pointer"
                                  onClick={() => {
                                    if (coBorrowerOtherDisabilitySelected) {
                                      setDeleteCoBorrowerOtherDisabilityTypeDialog({ isOpen: true });
                                    } else {
                                      setCoBorrowerOtherDisabilitySelected(true);
                                    }
                                  }}
                                >
                                  Other Disability
                                </Label>
                              </div>
                            </div>
                          </div>
                        </CardContent>
                      </Card>

                      {/* VA Disability Benefits Row - Only show when VA Disability is selected */}
                      {coBorrowerVaDisabilitySelected && (
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                          <div className="space-y-2">
                            <Label htmlFor="coBorrowerIncome-vaBenefitsMonthlyAmount">VA Disability Benefits - Gross Monthly Income</Label>
                            <Controller
                              control={form.control}
                              name="coBorrowerIncome.vaBenefitsMonthlyAmount"
                              defaultValue=""
                              render={({ field }) => {
                                const numVal = field.value ? field.value.replace(/[^\d]/g, '') : '';
                                const displayValue = numVal ? `$${numVal.replace(/\B(?=(\d{3})+(?!\d))/g, ',')}` : '';
                                
                                return (
                                  <Input
                                    id="coBorrowerIncome-vaBenefitsMonthlyAmount"
                                    type="text"
                                    placeholder="$0"
                                    value={displayValue}
                                    onChange={(e) => {
                                      const value = e.target.value.replace(/[^\d]/g, '');
                                      field.onChange(value);
                                    }}
                                    data-testid="input-coBorrowerIncome-vaBenefitsMonthlyAmount"
                                  />
                                );
                              }}
                            />
                          </div>
                          <div className="space-y-2">
                            <Label htmlFor="coBorrowerIncome-vaBenefitsStartDate">Start Date</Label>
                            <Input
                              id="coBorrowerIncome-vaBenefitsStartDate"
                              value={form.watch('coBorrowerIncome.vaBenefitsStartDate') || ''}
                              onChange={(e) => {
                                const value = e.target.value.replace(/\D/g, ''); // Remove non-digits
                                let formatted = '';
                                if (value.length > 0) {
                                  formatted = value.substring(0, 2);
                                  if (value.length > 2) {
                                    formatted += '/' + value.substring(2, 4);
                                    if (value.length > 4) {
                                      formatted += '/' + value.substring(4, 8);
                                    }
                                  }
                                }
                                form.setValue('coBorrowerIncome.vaBenefitsStartDate', formatted);
                              }}
                              placeholder="MM/DD/YYYY"
                              maxLength={10}
                              data-testid="input-coBorrowerIncome-vaBenefitsStartDate"
                            />
                          </div>
                        </div>
                      )}

                      {/* Other Disability Row - Only show when Other Disability is selected */}
                      {coBorrowerOtherDisabilitySelected && (
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                          <div className="space-y-2">
                            <Label htmlFor="coBorrowerIncome-otherDisabilityMonthlyAmount">Disability - Gross Monthly Income</Label>
                            <Controller
                              control={form.control}
                              name="coBorrowerIncome.otherDisabilityMonthlyAmount"
                              defaultValue=""
                              render={({ field }) => {
                                const numVal = field.value ? field.value.replace(/[^\d]/g, '') : '';
                                const displayValue = numVal ? `$${numVal.replace(/\B(?=(\d{3})+(?!\d))/g, ',')}` : '';
                                
                                return (
                                  <Input
                                    id="coBorrowerIncome-otherDisabilityMonthlyAmount"
                                    type="text"
                                    placeholder="$0"
                                    value={displayValue}
                                    onChange={(e) => {
                                      const value = e.target.value.replace(/[^\d]/g, '');
                                      field.onChange(value);
                                    }}
                                    data-testid="input-coBorrowerIncome-otherDisabilityMonthlyAmount"
                                  />
                                );
                              }}
                            />
                          </div>
                          <div className="space-y-2">
                            <Label htmlFor="coBorrowerIncome-otherDisabilityStartDate">Start Date</Label>
                            <Input
                              id="coBorrowerIncome-otherDisabilityStartDate"
                              {...form.register('coBorrowerIncome.otherDisabilityStartDate')}
                              placeholder="MM/YYYY"
                              data-testid="input-coBorrowerIncome-otherDisabilityStartDate"
                            />
                          </div>
                        </div>
                      )}
                      </CardContent>
                    </CollapsibleContent>
                  </Collapsible>
                </Card>
              )}

              {/* Co-Borrower VA Benefits Income Card */}
              {hasCoBorrower && form.watch('coBorrowerIncome.incomeTypes.vaBenefits') && (
                <Card>
                  <Collapsible open={isCoBorrowerVaBenefitsIncomeOpen} onOpenChange={setIsCoBorrowerVaBenefitsIncomeOpen}>
                    <CardHeader>
                      <div className="flex items-center justify-between">
                        <CardTitle>Co-Borrower - VA Disability</CardTitle>
                        <div className="flex items-center gap-2">
                          <Button
                            type="button"
                            variant="outline"
                            size="sm"
                            onClick={() => setDeleteCoBorrowerVaBenefitsDialog({ isOpen: true })}
                            className="hover:bg-red-500 hover:text-white"
                            data-testid="button-delete-coborrower-va-benefits"
                            title="Delete Co-Borrower VA Disability Income"
                          >
                            <Minus className="h-4 w-4 mr-2" />
                            Remove
                          </Button>
                          <CollapsibleTrigger asChild>
                            <Button 
                              variant="ghost" 
                              size="sm" 
                              className="hover:bg-orange-500 hover:text-white" 
                              data-testid="button-toggle-coborrower-va-benefits-income"
                              title={isCoBorrowerVaBenefitsIncomeOpen ? 'Minimize' : 'Expand'}
                              key={`coborrower-va-benefits-income-${isCoBorrowerVaBenefitsIncomeOpen}`}
                            >
                              {isCoBorrowerVaBenefitsIncomeOpen ? <Minus className="h-4 w-4" /> : <Plus className="h-4 w-4" />}
                            </Button>
                          </CollapsibleTrigger>
                        </div>
                      </div>
                    </CardHeader>
                    <CollapsibleContent>
                      <CardContent className="space-y-4">
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div className="space-y-2">
                          <Label htmlFor="coBorrowerIncome-vaBenefitsMonthlyAmount">Gross Monthly Income</Label>
                          <Controller
                            control={form.control}
                            name="coBorrowerIncome.vaBenefitsMonthlyAmount"
                            defaultValue=""
                            render={({ field }) => {
                              const numVal = field.value ? field.value.replace(/[^\d]/g, '') : '';
                              const displayValue = numVal ? `$${numVal.replace(/\B(?=(\d{3})+(?!\d))/g, ',')}` : '';
                              
                              return (
                                <Input
                                  id="coBorrowerIncome-vaBenefitsMonthlyAmount"
                                  type="text"
                                  placeholder="$0"
                                  value={displayValue}
                                  onChange={(e) => {
                                    const value = e.target.value.replace(/[^\d]/g, '');
                                    field.onChange(value);
                                  }}
                                  data-testid="input-coborrowerIncome-vaBenefitsMonthlyAmount"
                                />
                              );
                            }}
                          />
                        </div>
                        <div className="space-y-2">
                          <Label htmlFor="coBorrowerIncome-vaBenefitsStartDate">Start Date</Label>
                          <Input
                            id="coBorrowerIncome-vaBenefitsStartDate"
                            {...form.register('coBorrowerIncome.vaBenefitsStartDate')}
                            placeholder="MM/YYYY"
                            data-testid="input-coborrowerIncome-vaBenefitsStartDate"
                          />
                        </div>
                      </div>
                      </CardContent>
                    </CollapsibleContent>
                  </Collapsible>
                </Card>
              )}

              {/* Co-Borrower Other Income Card */}
              {hasCoBorrower && form.watch('coBorrowerIncome.incomeTypes.other') && (
                <Card>
                  <Collapsible open={isCoBorrowerOtherIncomeOpen} onOpenChange={setIsCoBorrowerOtherIncomeOpen}>
                    <CardHeader>
                      <div className="flex items-center justify-between">
                        <CardTitle>Co-Borrower - Other Income</CardTitle>
                        <div className="flex items-center gap-2">
                          <Button
                            type="button"
                            variant="outline"
                            size="sm"
                            onClick={() => setDeleteCoBorrowerOtherDialog({ isOpen: true })}
                            className="hover:bg-red-500 hover:text-white"
                            data-testid="button-delete-coborrower-other"
                            title="Delete Co-Borrower Other Income"
                          >
                            <Minus className="h-4 w-4 mr-2" />
                            Remove
                          </Button>
                          <CollapsibleTrigger asChild>
                            <Button 
                              variant="ghost" 
                              size="sm" 
                              className="hover:bg-orange-500 hover:text-white" 
                              data-testid="button-toggle-coborrower-other-income"
                              title={isCoBorrowerOtherIncomeOpen ? 'Minimize' : 'Expand'}
                              key={`coborrower-other-income-${isCoBorrowerOtherIncomeOpen}`}
                            >
                              {isCoBorrowerOtherIncomeOpen ? <Minus className="h-4 w-4" /> : <Plus className="h-4 w-4" />}
                            </Button>
                          </CollapsibleTrigger>
                        </div>
                      </div>
                    </CardHeader>
                    <CollapsibleContent>
                      <CardContent className="space-y-4">
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div className="space-y-2">
                          <Label htmlFor="coBorrowerIncome-otherIncomeDescription">Income Description</Label>
                          <Input
                            id="coBorrowerIncome-otherIncomeDescription"
                            {...form.register('coBorrowerIncome.otherIncomeDescription')}
                            placeholder=""
                            data-testid="input-coborrowerIncome-otherIncomeDescription"
                          />
                        </div>
                        <div className="space-y-2">
                          <Label htmlFor="coBorrowerIncome-otherIncomeMonthlyAmount">Gross Monthly Income</Label>
                          <Input
                            id="coBorrowerIncome-otherIncomeMonthlyAmount"
                            {...form.register('coBorrowerIncome.otherIncomeMonthlyAmount')}
                            placeholder="$0.00"
                            data-testid="input-coborrowerIncome-otherIncomeMonthlyAmount"
                          />
                        </div>
                      </div>
                      </CardContent>
                    </CollapsibleContent>
                  </Collapsible>
                </Card>
              )}
            </TabsContent>

            {/* Property Tab */}
            <TabsContent value="property" className="space-y-6">
              {/* Property Summary Card - Matching Income Tab Structure */}
              <Card className="transition-all duration-700">
                <CardContent className="grid grid-cols-1 md:grid-cols-4 gap-4 pt-6">
                  <div className="space-y-2">
                    <Label className="text-lg font-semibold">Subject Property</Label>
                    <div className="mt-24">
                      <span className="text-muted-foreground" style={{ fontSize: '28px', color: '#1a3373', fontWeight: 'bold' }}>
                        {(() => {
                          // Find properties that have isSubject=true and get their property type
                          const properties = form.watch('property.properties') || [];
                          const subjectProperty = properties.find(p => p.isSubject === true);
                          
                          // If no subject property found, display TBD
                          if (!subjectProperty) {
                            return 'TBD';
                          }
                          
                          // Get the property type from the subject property
                          const propertyType = subjectProperty.propertyType || '';
                          
                          // If no property type selected, display TBD
                          if (!propertyType || propertyType.trim() === '') {
                            return 'TBD';
                          }
                          
                          // Apply mapping rules
                          if (propertyType === 'mobile-home-sw') {
                            return 'SW';
                          } else if (propertyType === 'mobile-home-dw') {
                            return 'DW';
                          } else if (propertyType === 'other') {
                            return 'TBD';
                          } else {
                            // For other values, display them as-is with proper formatting
                            return propertyType
                              .split('-')
                              .map(word => word.charAt(0).toUpperCase() + word.slice(1))
                              .join(' ');
                          }
                        })()}
                      </span>
                    </div>
                  </div>
                  
                  <div className="space-y-2">
                    <Label className="text-lg font-semibold">Estimated LTV</Label>
                    <div className="min-h-[40px] flex items-center">
                      <div
                        className="bg-navy-900 hover:bg-navy-800 text-white rounded-full w-20 h-20 flex items-center justify-center transition-colors duration-200"
                        style={{
                          fontFamily: 'ui-sans-serif, system-ui, sans-serif',
                          fontSize: '36px',
                          fontWeight: 600,
                          backgroundColor: '#1a3373',
                          boxShadow: '0 4px 8px rgba(0, 0, 0, 0.15)'
                        }}
                        data-testid="text-estimated-ltv"
                      >
                        <span className={`${showPropertyAnimation ? 'animate-roll-down' : ''}`}>
                          {(() => {
                            // Check which new loan card is open
                            const hasRefinanceCards = (newRefinanceLoanCards || []).length > 0;
                            const hasPurchaseCards = (newPurchaseLoanCards || []).length > 0;
                            
                            // Get the New Loan Amount from whichever card is open
                            let newLoanAmount = '';
                            if (hasRefinanceCards) {
                              newLoanAmount = form.watch('abc.loanBalance') || '';
                            } else if (hasPurchaseCards) {
                              newLoanAmount = form.watch('bbb.loanBalance') || '';
                            }
                            
                            // Find the Primary Residence property
                            const properties = form.watch('property.properties') || [];
                            const primaryResidence = properties.find(p => p.use === 'primary');
                            
                            // If no primary residence or new loan amount, return default %
                            if (!primaryResidence || !newLoanAmount || newLoanAmount.trim() === '') {
                              return <span style={{ fontSize: '28px' }}>%</span>;
                            }
                            
                            // Get estimated value from primary residence
                            const estimatedValue = primaryResidence.estimatedValue || '';
                            
                            if (!estimatedValue || estimatedValue.trim() === '') {
                              return <span style={{ fontSize: '28px' }}>%</span>;
                            }
                            
                            // Parse values (handle currency formatting)
                            const parseValue = (value: string) => {
                              const cleaned = value.replace(/[$,]/g, '');
                              return cleaned ? parseFloat(cleaned) : 0;
                            };
                            
                            const loanNum = parseValue(newLoanAmount);
                            const valueNum = parseValue(estimatedValue);
                            
                            if (loanNum === 0 || valueNum === 0) {
                              return <span style={{ fontSize: '28px' }}>%</span>;
                            }
                            
                            // Calculate LTV percentage
                            const ltv = (loanNum / valueNum) * 100;
                            return (
                              <span>
                                {Math.round(ltv)}
                                <span style={{ fontSize: '28px' }}>%</span>
                              </span>
                            );
                          })()}
                        </span>
                      </div>
                    </div>
                  </div>
                  
                  <div className="space-y-2">
                    <Label className="text-lg font-semibold">Final LTV</Label>
                    <div className="min-h-[40px] flex items-center">
                      <div
                        className="bg-navy-900 hover:bg-navy-800 text-white rounded-full w-20 h-20 flex items-center justify-center transition-colors duration-200"
                        style={{
                          fontFamily: 'ui-sans-serif, system-ui, sans-serif',
                          fontSize: '36px',
                          fontWeight: 600,
                          backgroundColor: '#1a3373',
                          boxShadow: '0 4px 8px rgba(0, 0, 0, 0.15)'
                        }}
                        data-testid="text-final-ltv"
                      >
                        <span className={`${showPropertyAnimation ? 'animate-roll-down' : ''}`}>
                          {(() => {
                            // Check which new loan card is open
                            const hasRefinanceCards = (newRefinanceLoanCards || []).length > 0;
                            const hasPurchaseCards = (newPurchaseLoanCards || []).length > 0;
                            
                            // Get the New Loan Amount from whichever card is open
                            let newLoanAmount = '';
                            if (hasRefinanceCards) {
                              newLoanAmount = form.watch('abc.loanBalance') || '';
                            } else if (hasPurchaseCards) {
                              newLoanAmount = form.watch('bbb.loanBalance') || '';
                            }
                            
                            // Find the Primary Residence property
                            const properties = form.watch('property.properties') || [];
                            const primaryResidence = properties.find(p => p.use === 'primary');
                            
                            // If no primary residence or new loan amount, return default %
                            if (!primaryResidence || !newLoanAmount || newLoanAmount.trim() === '') {
                              return <span style={{ fontSize: '28px' }}>%</span>;
                            }
                            
                            // Get appraised value from primary residence
                            const appraisedValue = primaryResidence.appraisedValue || '';
                            
                            if (!appraisedValue || appraisedValue.trim() === '') {
                              return <span style={{ fontSize: '28px' }}>%</span>;
                            }
                            
                            // Parse values (handle currency formatting)
                            const parseValue = (value: string) => {
                              const cleaned = value.replace(/[$,]/g, '');
                              return cleaned ? parseFloat(cleaned) : 0;
                            };
                            
                            const loanNum = parseValue(newLoanAmount);
                            const valueNum = parseValue(appraisedValue);
                            
                            if (loanNum === 0 || valueNum === 0) {
                              return <span style={{ fontSize: '28px' }}>%</span>;
                            }
                            
                            // Calculate LTV percentage
                            const ltv = (loanNum / valueNum) * 100;
                            return (
                              <span>
                                {Math.round(ltv)}
                                <span style={{ fontSize: '28px' }}>%</span>
                              </span>
                            );
                          })()}
                        </span>
                      </div>
                    </div>
                  </div>
                  
                  <div className="space-y-2">
                    <Label className="text-lg font-semibold">Property Count</Label>
                    <div className="min-h-[40px] flex items-center">
                      <div
                        className="bg-navy-900 hover:bg-navy-800 text-white rounded-full w-20 h-20 flex items-center justify-center transition-colors duration-200"
                        style={{
                          fontFamily: 'ui-sans-serif, system-ui, sans-serif',
                          fontSize: '36px',
                          fontWeight: 600,
                          backgroundColor: '#1a3373',
                          boxShadow: '0 4px 8px rgba(0, 0, 0, 0.15)'
                        }}
                        data-testid="text-property-count"
                      >
                        <span className={`${showPropertyAnimation ? 'animate-roll-down' : ''}`}>
                          {(() => {
                            // Count all active property cards (excluding home-purchase since it's a future event)
                            const primaryCards = (primaryResidenceCards || []).length;
                            const secondHomeCardsCount = (secondHomeCards || []).length;
                            const formProperties = (form.watch('property.properties') || []);
                            const investmentCards = formProperties.filter(p => p.use === 'investment').length;
                            
                            return primaryCards + secondHomeCardsCount + investmentCards;
                          })()}
                        </span>
                      </div>
                    </div>
                  </div>
                </CardContent>
              </Card>


              {/* Property List Card */}
              <Card className="transition-all duration-700">
                <CardHeader>
                  <div className="flex items-center justify-between">
                    <CardTitle>Properties</CardTitle>
                    <div className="flex items-center gap-2">
                      {/* Expand All Button */}
                      <Button
                        type="button"
                        variant="ghost"
                        size="icon"
                        onClick={() => {
                          const updates: Record<string, boolean> = {};
                          
                          // Get all properties
                          const allProperties = form.watch('property.properties') || [];
                          
                          // Update all property cards that are checked/active
                          allProperties.forEach(property => {
                            const propertyId = property.id || `property-${property.use}`;
                            // Only expand if the property type is checked
                            if (property.use === 'home-purchase' && hasPropertyType('home-purchase')) {
                              updates[propertyId] = true;
                            } else if (property.use === 'primary' && (hasPropertyType('primary') || (primaryResidenceCards || []).length > 0)) {
                              updates[propertyId] = true;
                            } else if (property.use === 'second-home' && (hasPropertyType('second-home') || (secondHomeCards || []).length > 0)) {
                              updates[propertyId] = true;
                            } else if (property.use === 'investment' && (hasPropertyType('investment') || (investmentCards || []).length > 0)) {
                              updates[propertyId] = true;
                            }
                          });
                          
                          setPropertyCardStates(prev => ({ ...prev, ...updates }));
                        }}
                        className="hover:bg-blue-500 hover:text-white"
                        title="Expand All Property Tiles"
                        data-testid="button-expand-all-properties"
                      >
                        <Plus className="h-4 w-4" />
                      </Button>
                      
                      {/* Minimize All Button */}
                      <Button
                        type="button"
                        variant="ghost"
                        size="icon"
                        onClick={() => {
                          const updates: Record<string, boolean> = {};
                          
                          // Get all properties
                          const allProperties = form.watch('property.properties') || [];
                          
                          // Update all property cards that are checked/active
                          allProperties.forEach(property => {
                            const propertyId = property.id || `property-${property.use}`;
                            // Only minimize if the property type is checked
                            if (property.use === 'home-purchase' && hasPropertyType('home-purchase')) {
                              updates[propertyId] = false;
                            } else if (property.use === 'primary' && (hasPropertyType('primary') || (primaryResidenceCards || []).length > 0)) {
                              updates[propertyId] = false;
                            } else if (property.use === 'second-home' && (hasPropertyType('second-home') || (secondHomeCards || []).length > 0)) {
                              updates[propertyId] = false;
                            } else if (property.use === 'investment' && (hasPropertyType('investment') || (investmentCards || []).length > 0)) {
                              updates[propertyId] = false;
                            }
                          });
                          
                          setPropertyCardStates(prev => ({ ...prev, ...updates }));
                        }}
                        className="hover:bg-orange-500 hover:text-white"
                        title="Minimize All Property Tiles"
                        data-testid="button-minimize-all-properties"
                      >
                        <Minus className="h-4 w-4" />
                      </Button>
                    </div>
                  </div>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
                      <div className="flex items-center space-x-2">
                        <Checkbox
                          id="property-type-primary"
                          checked={hasPropertyType('primary') || (primaryResidenceCards || []).length > 0}
                          onCheckedChange={(checked) => handlePropertyTypeChange(checked, 'primary')}
                          className="transition-transform duration-500 hover:scale-105 data-[state=checked]:rotate-[360deg]"
                          data-testid="checkbox-property-primary"
                        />
                        <Label htmlFor="property-type-primary" className="font-medium">
                          Primary Residence
                        </Label>
                      </div>

                      <div className="flex items-center space-x-2">
                        <Checkbox
                          id="property-type-second-home"
                          checked={hasPropertyType('second-home') || (secondHomeCards || []).length > 0}
                          onCheckedChange={(checked) => handlePropertyTypeChange(checked, 'second-home')}
                          className="transition-transform duration-500 hover:scale-105 data-[state=checked]:rotate-[360deg]"
                          data-testid="checkbox-property-second-home"
                        />
                        <Label htmlFor="property-type-second-home" className="font-medium">
                          Second Home
                        </Label>
                      </div>

                      <div className="flex items-center space-x-2">
                        <Checkbox
                          id="property-type-investment"
                          checked={hasPropertyType('investment') || (investmentCards || []).length > 0}
                          onCheckedChange={(checked) => handlePropertyTypeChange(checked, 'investment')}
                          className="transition-transform duration-500 hover:scale-105 data-[state=checked]:rotate-[360deg]"
                          data-testid="checkbox-property-investment"
                        />
                        <Label htmlFor="property-type-investment" className="font-medium">
                          Investment Property
                        </Label>
                      </div>

                      <div className="flex items-center space-x-2">
                        <Checkbox
                          id="property-type-home-purchase"
                          checked={hasPropertyType('home-purchase')}
                          onCheckedChange={(checked) => handlePropertyTypeChange(checked, 'home-purchase')}
                          className="transition-transform duration-500 hover:scale-105 data-[state=checked]:rotate-[360deg]"
                          data-testid="checkbox-property-home-purchase"
                        />
                        <Label htmlFor="property-type-home-purchase" className="font-medium">
                          Home Purchase
                        </Label>
                      </div>
                    </div>
                  </div>
                </CardContent>
              </Card>

              {/* Home Purchase Cards - Moved to appear first after Properties card */}
              {sortPropertiesByHierarchy(form.watch('property.properties') || [])
                .filter(property => property.use === 'home-purchase') // Only show Home Purchase properties
                .map((property, index) => {
                const propertyId = property.id || `property-${index}`;
                const isOpen = propertyCardStates[propertyId] ?? true;
                
                // Find the actual index in the full properties array using stable ID
                const fullProperties = form.watch('property.properties') || [];
                const actualPropertyIndex = fullProperties.findIndex(p => p.id === property.id);
                
                // Guard: Skip rendering if we can't find the property in the form state
                if (actualPropertyIndex < 0) {
                  console.warn(`Property ${propertyId} not found in form state, skipping render`);
                  return null;
                }
                
                const getPropertyTitle = () => {
                  const typeLabels = {
                    'home-purchase': 'Home Purchase',
                    'primary': 'Primary Residence',
                    'second-home': 'Second Home',
                    'investment': 'Investment Property'
                  };
                  const baseTitle = typeLabels[property.use as keyof typeof typeLabels] || 'Property';
                  const sameTypeCount = (form.watch('property.properties') || [])
                    .filter(p => p.use === property.use)
                    .findIndex(p => p.id === property.id) + 1;
                  return (property.use === 'primary' || property.use === 'home-purchase' || property.use === 'second-home' || property.use === 'investment') ? baseTitle : `${baseTitle} ${sameTypeCount}`;
                };

                return (
                  <Card key={propertyId} className={`border-l-4 transition-colors duration-200 ${
                    property.use === 'home-purchase' ? 'border-l-cyan-500 hover:border-cyan-500 focus-within:border-cyan-500' :
                    property.use === 'primary' ? 'border-l-green-500 hover:border-green-500 focus-within:border-green-500' : 
                    property.use === 'second-home' ? 'border-l-blue-500 hover:border-blue-500 focus-within:border-blue-500' : 
                    property.use === 'investment' ? 'border-l-purple-500 hover:border-purple-500 focus-within:border-purple-500' : ''
                  }`}>
                    <Collapsible 
                      open={isOpen} 
                      onOpenChange={(open) => setPropertyCardStates(prev => ({ ...prev, [propertyId]: open }))}
                    >
                      <CardHeader>
                        <div className="flex items-center justify-between">
                          <div className="flex items-center gap-8">
                            <CardTitle className="flex items-center gap-2">
                              {getPropertyTitle()}
                              {property.isSubject && (
                                <span className="text-white px-2 py-1 rounded text-xs font-medium" style={{ backgroundColor: '#1a3373' }}>
                                  Subject Property
                                </span>
                              )}
                            </CardTitle>
                          </div>
                          <div className="flex items-center gap-2">
                            {/* Home Purchase Remove button - Primary Residence style */}
                            {property.use === 'home-purchase' && (
                              <Button
                                type="button"
                                variant="outline"
                                size="sm"
                                onClick={() => setDeleteHomePurchaseDialog({ isOpen: true, cardId: propertyId })}
                                className="hover:bg-red-500 hover:text-white"
                                data-testid="button-delete-home-purchase-property"
                                title="Delete Home Purchase"
                              >
                                <Minus className="h-4 w-4 mr-2" />
                                Remove
                              </Button>
                            )}
                            <CollapsibleTrigger asChild>
                              <Button 
                                variant="ghost" 
                                size="sm" 
                                className="hover:bg-orange-500 hover:text-white" 
                                data-testid={`button-toggle-property-${propertyId}`}
                                title={isOpen ? 'Minimize' : 'Expand'}
                                key={`property-toggle-${propertyId}-${isOpen}`}
                              >
                                {isOpen ? <Minus className="h-4 w-4" /> : <Plus className="h-4 w-4" />}
                              </Button>
                            </CollapsibleTrigger>
                          </div>
                        </div>
                      </CardHeader>
                      
                      <CollapsibleContent>
                        <CardContent>
                          <div className="space-y-6">
                            {/* Subject Property Question - Moved to top */}
                            <Card className={`bg-muted ${
                              showSubjectPropertyAnimation[propertyId] ? 'animate-roll-down-subject-property' : ''
                            }`}>
                              <CardContent className="pt-6">
                                <div className="flex justify-between items-center">
                                  <div className="space-y-3 flex-1">
                                    <Label className="text-base font-semibold">Is this the subject property that will secure the new loan?</Label>
                                    <div className="flex gap-4">
                                      <div className="flex items-center space-x-2">
                                        <input
                                          type="radio"
                                          id={`subject-yes-${propertyId}`}
                                          name={`subject-${propertyId}`}
                                          checked={property.isSubject === true}
                                          onChange={() => {
                                            // Update the property's isSubject status in the form
                                            const properties = form.watch('property.properties') || [];
                                            const updatedProperties = properties.map(p => 
                                              p.id === propertyId ? { ...p, isSubject: true } : { ...p, isSubject: false }
                                            );
                                            form.setValue('property.properties', updatedProperties);
                                            // Trigger same green animation as Primary Residence
                                            setSubjectProperty(propertyId);
                                          }}
                                          data-testid={`radio-subject-yes-${propertyId}`}
                                        />
                                        <Label htmlFor={`subject-yes-${propertyId}`}>Yes</Label>
                                      </div>
                                      
                                      <div className="flex items-center space-x-2">
                                        <input
                                          type="radio"
                                          id={`subject-no-${propertyId}`}
                                          name={`subject-${propertyId}`}
                                          checked={property.isSubject === false}
                                          onChange={() => {
                                            // Update the property's isSubject status to false
                                            const properties = form.watch('property.properties') || [];
                                            const updatedProperties = properties.map(p => 
                                              p.id === propertyId ? { ...p, isSubject: false } : p
                                            );
                                            form.setValue('property.properties', updatedProperties);
                                          }}
                                          data-testid={`radio-subject-no-${propertyId}`}
                                        />
                                        <Label htmlFor={`subject-no-${propertyId}`}>No</Label>
                                      </div>
                                    </div>
                                  </div>
                                  
                                  {/* New button positioned more to the left */}
                                  <div className="flex items-center mr-8">
                                    <Button
                                      type="button"
                                      variant={(() => {
                                        const properties = form.watch('property.properties') || [];
                                        const currentProperty = actualPropertyIndex >= 0 ? properties[actualPropertyIndex] : null;
                                        
                                        // Check which loans are attached to this property for counter
                                        const currentLoanAttached = form.watch('currentLoan.attachedToProperty');
                                        const isCurrentLoanAttached = Boolean(currentLoanAttached && currentProperty?.id && currentLoanAttached === currentProperty.id);
                                        
                                        const secondLoanAttached = form.watch('secondLoan.attachedToProperty');
                                        const isSecondLoanAttached = Boolean(secondLoanAttached && currentProperty?.id && secondLoanAttached === currentProperty.id);
                                        
                                        // Check third loan
                                        const thirdLoanAttached = form.watch('thirdLoan.attachedToProperty');
                                        const isThirdLoanAttached = Boolean(thirdLoanAttached && currentProperty?.id && thirdLoanAttached === currentProperty.id);
                                        
                                        // Count active loans
                                        let activeLoansCount = 0;
                                        if (isCurrentLoanAttached) activeLoansCount++;
                                        if (isSecondLoanAttached) activeLoansCount++;
                                        if (isThirdLoanAttached) activeLoansCount++;
                                        
                                        return activeLoansCount > 0 ? "default" : "outline";
                                      })()}
                                      size="sm"
                                      onClick={() => {
                                        // Add your button functionality here
                                        console.log('Home Purchase button clicked');
                                      }}
                                      style={(() => {
                                        const properties = form.watch('property.properties') || [];
                                        const currentProperty = actualPropertyIndex >= 0 ? properties[actualPropertyIndex] : null;
                                        
                                        // Check which loans are attached to this property for counter
                                        const currentLoanAttached = form.watch('currentLoan.attachedToProperty');
                                        const isCurrentLoanAttached = Boolean(currentLoanAttached && currentProperty?.id && currentLoanAttached === currentProperty.id);
                                        
                                        const secondLoanAttached = form.watch('secondLoan.attachedToProperty');
                                        const isSecondLoanAttached = Boolean(secondLoanAttached && currentProperty?.id && secondLoanAttached === currentProperty.id);
                                        
                                        // Check third loan
                                        const thirdLoanAttached = form.watch('thirdLoan.attachedToProperty');
                                        const isThirdLoanAttached = Boolean(thirdLoanAttached && currentProperty?.id && thirdLoanAttached === currentProperty.id);
                                        
                                        // Count active loans
                                        let activeLoansCount = 0;
                                        if (isCurrentLoanAttached) activeLoansCount++;
                                        if (isSecondLoanAttached) activeLoansCount++;
                                        if (isThirdLoanAttached) activeLoansCount++;
                                        
                                        return activeLoansCount > 0 
                                          ? { backgroundColor: '#d1d5db', borderColor: '#d1d5db', color: '#374151' } 
                                          : {};
                                      })()}
                                      className={(() => {
                                        const properties = form.watch('property.properties') || [];
                                        const currentProperty = actualPropertyIndex >= 0 ? properties[actualPropertyIndex] : null;
                                        
                                        // Check which loans are attached to this property for counter
                                        const currentLoanAttached = form.watch('currentLoan.attachedToProperty');
                                        const isCurrentLoanAttached = Boolean(currentLoanAttached && currentProperty?.id && currentLoanAttached === currentProperty.id);
                                        
                                        const secondLoanAttached = form.watch('secondLoan.attachedToProperty');
                                        const isSecondLoanAttached = Boolean(secondLoanAttached && currentProperty?.id && secondLoanAttached === currentProperty.id);
                                        
                                        // Check third loan
                                        const thirdLoanAttached = form.watch('thirdLoan.attachedToProperty');
                                        const isThirdLoanAttached = Boolean(thirdLoanAttached && currentProperty?.id && thirdLoanAttached === currentProperty.id);
                                        
                                        // Count active loans
                                        let activeLoansCount = 0;
                                        if (isCurrentLoanAttached) activeLoansCount++;
                                        if (isSecondLoanAttached) activeLoansCount++;
                                        if (isThirdLoanAttached) activeLoansCount++;
                                        
                                        return activeLoansCount > 0 
                                          ? "w-24 text-white border-2" 
                                          : "w-24 hover:bg-red-500 hover:text-white";
                                      })()}
                                      data-testid={`button-grey-box-action-${propertyId}`}
                                      title="Loans"
                                    >
                                      {(() => {
                                        const properties = form.watch('property.properties') || [];
                                        const currentProperty = actualPropertyIndex >= 0 ? properties[actualPropertyIndex] : null;
                                        
                                        // Check which loans are attached to this property for counter
                                        const currentLoanAttached = form.watch('currentLoan.attachedToProperty');
                                        const isCurrentLoanAttached = Boolean(currentLoanAttached && currentProperty?.id && currentLoanAttached === currentProperty.id);
                                        
                                        const secondLoanAttached = form.watch('secondLoan.attachedToProperty');
                                        const isSecondLoanAttached = Boolean(secondLoanAttached && currentProperty?.id && secondLoanAttached === currentProperty.id);
                                        
                                        // Check third loan
                                        const thirdLoanAttached = form.watch('thirdLoan.attachedToProperty');
                                        const isThirdLoanAttached = Boolean(thirdLoanAttached && currentProperty?.id && thirdLoanAttached === currentProperty.id);
                                        
                                        // Count active loans
                                        let activeLoansCount = 0;
                                        if (isCurrentLoanAttached) activeLoansCount++;
                                        if (isSecondLoanAttached) activeLoansCount++;
                                        if (isThirdLoanAttached) activeLoansCount++;
                                        
                                        return (
                                          <span>
                                            <span className="mr-3 font-semibold">{activeLoansCount}</span>
                                            <span>{activeLoansCount === 1 ? 'Loan' : 'Loans'}</span>
                                          </span>
                                        );
                                      })()}
                                    </Button>
                                  </div>
                                </div>
                              </CardContent>
                            </Card>

                            {/* Property Details - Common Section */}
                            <div className="grid grid-cols-1 md:grid-cols-12 gap-4">
                              {/* Property Address - Street */}
                              <div className="space-y-2 md:col-span-3">
                                <Label htmlFor={`property-address-street-${propertyId}`}>Street Address *</Label>
                                <Input
                                  id={`property-address-street-${propertyId}`}
                                  {...(actualPropertyIndex >= 0 ? form.register(`property.properties.${actualPropertyIndex}.address.street` as any) : {})}
                                  data-testid={`input-property-street-${propertyId}`}
                                />
                              </div>
                              
                              {/* Unit/Apt */}
                              <div className="space-y-2 md:col-span-1">
                                <Label htmlFor={`property-address-unit-${propertyId}`}>Unit/Apt</Label>
                                <Input
                                  id={`property-address-unit-${propertyId}`}
                                  {...(actualPropertyIndex >= 0 ? form.register(`property.properties.${actualPropertyIndex}.address.unit` as any) : {})}
                                  data-testid={`input-property-unit-${propertyId}`}
                                />
                              </div>
                              
                              {/* City */}
                              <div className="space-y-2 md:col-span-2">
                                <Label htmlFor={`property-address-city-${propertyId}`}>City *</Label>
                                <Input
                                  id={`property-address-city-${propertyId}`}
                                  {...(actualPropertyIndex >= 0 ? form.register(`property.properties.${actualPropertyIndex}.address.city` as any) : {})}
                                  data-testid={`input-property-city-${propertyId}`}
                                />
                              </div>
                              
                              {/* State */}
                              <div className="space-y-2 md:col-span-1">
                                <Label htmlFor={`property-address-state-${propertyId}`}>State *</Label>
                                <Controller
                                  control={form.control}
                                  name={`property.properties.${actualPropertyIndex}.address.state` as any}
                                  render={({ field }) => (
                                    <Select 
                                      value={field.value || ''} 
                                      onValueChange={field.onChange}
                                    >
                                      <SelectTrigger data-testid={`select-property-state-${propertyId}`}>
                                        <SelectValue placeholder="Select" />
                                      </SelectTrigger>
                                      <SelectContent>
                                        {US_STATES.map((state) => (
                                          <SelectItem key={state.value} value={state.value}>
                                            {state.label}
                                          </SelectItem>
                                        ))}
                                      </SelectContent>
                                    </Select>
                                  )}
                                />
                              </div>
                              
                              {/* ZIP Code */}
                              <div className="space-y-2 md:col-span-1">
                                <Label htmlFor={`property-address-zip-${propertyId}`}>ZIP Code *</Label>
                                <Input
                                  id={`property-address-zip-${propertyId}`}
                                  placeholder="94103"
                                  {...(actualPropertyIndex >= 0 ? form.register(`property.properties.${actualPropertyIndex}.address.zip` as any) : {})}
                                  data-testid={`input-property-zip-${propertyId}`}
                                />
                              </div>
                              
                              {/* County */}
                              <div className="space-y-2 md:col-span-2">
                                <Label htmlFor={`property-address-county-${propertyId}`}>County</Label>
                                <Input
                                  id={`property-address-county-${propertyId}`}
                                  {...(actualPropertyIndex >= 0 ? form.register(`property.properties.${actualPropertyIndex}.address.county` as any) : {})}
                                  data-testid={`input-property-county-${propertyId}`}
                                />
                              </div>
                              
                              {/* Property Type */}
                              <div className="space-y-2 md:col-span-2">
                                <Label htmlFor={`property-type-${propertyId}`}>Property Type</Label>
                                <Controller
                                  control={form.control}
                                  name={`property.properties.${actualPropertyIndex}.propertyType` as any}
                                  render={({ field }) => (
                                    <Select 
                                      value={field.value || ''} 
                                      onValueChange={field.onChange}
                                    >
                                      <SelectTrigger data-testid={`select-property-type-${propertyId}`}>
                                        <SelectValue placeholder="Select" />
                                      </SelectTrigger>
                                      <SelectContent>
                                        <SelectItem value="single-family">Single Family</SelectItem>
                                        <SelectItem value="condo">Condo</SelectItem>
                                        <SelectItem value="townhouse">Townhouse</SelectItem>
                                        <SelectItem value="duplex">Duplex</SelectItem>
                                        <SelectItem value="multi-family">Multi-Family</SelectItem>
                                        <SelectItem value="mobile-home-sw">Mobile Home SW</SelectItem>
                                        <SelectItem value="mobile-home-dw">Mobile Home DW</SelectItem>
                                        <SelectItem value="other">Other</SelectItem>
                                      </SelectContent>
                                    </Select>
                                  )}
                                />
                              </div>
                            </div>

                            {/* Property Details - Row 2: Purchase Price, Owned Since, Title Held By, Estimated Property Value */}
                            <div className="grid grid-cols-1 md:grid-cols-12 gap-4 mt-4">
                              <div className="space-y-2 md:col-span-2">
                                <div className="flex items-center gap-2">
                                  <Label htmlFor={`property-purchase-price-${propertyId}`}>Purchase Price</Label>
                                  <Button
                                    type="button"
                                    variant="ghost"
                                    size="sm"
                                    className="p-1 h-auto text-black hover:text-gray-600"
                                    title="Purchase Property Value"
                                    data-testid={`button-purchase-price-info-${propertyId}`}
                                  >
                                    <DollarSign className="h-4 w-4" />
                                  </Button>
                                </div>
                                <CurrencyInput
                                  form={form}
                                  name={`property.properties.${actualPropertyIndex >= 0 ? actualPropertyIndex : 0}.purchasePrice` as const}
                                  id={`property-purchase-price-${propertyId}`}
                                  placeholder="$0.00"
                                  data-testid={`input-property-purchase-price-${propertyId}`}
                                />
                              </div>
                              
                              <div className="space-y-2 md:col-span-2">
                                <div className="min-h-5 flex items-center gap-2">
                                  <Label htmlFor={`property-purpose-${propertyId}`}>Property Purpose</Label>
                                  <Tooltip>
                                    <TooltipTrigger asChild>
                                      <Button
                                        type="button"
                                        variant="ghost"
                                        size="sm"
                                        className="p-1 h-auto text-blue-600 hover:text-blue-800"
                                        onClick={() => {
                                          toast({
                                            title: "Purchase Information",
                                            description: "Please see purchase and record dates in title report located in vendor page.",
                                            duration: 5000,
                                          });
                                        }}
                                        data-testid={`button-property-purpose-info-${propertyId}`}
                                      >
                                        <Info className="h-4 w-4" />
                                      </Button>
                                    </TooltipTrigger>
                                    <TooltipContent side="top" sideOffset={15} className="text-sm">
                                      Purchase Information
                                    </TooltipContent>
                                  </Tooltip>
                                </div>
                                <Select>
                                  <SelectTrigger data-testid={`select-property-purpose-${propertyId}`}>
                                    <SelectValue placeholder="Select" />
                                  </SelectTrigger>
                                  <SelectContent>
                                    <SelectItem value="select">Select</SelectItem>
                                    <SelectItem value="primary">Primary</SelectItem>
                                    <SelectItem value="second">Second</SelectItem>
                                    <SelectItem value="investment">Investment</SelectItem>
                                  </SelectContent>
                                </Select>
                              </div>
                              
                              <div className="space-y-2 md:col-span-2">
                                <div className="min-h-5 flex items-center gap-2">
                                  <Label htmlFor={`property-title-held-by-${propertyId}`}>Title to be Held By</Label>
                                  <Tooltip>
                                    <TooltipTrigger asChild>
                                      <Button
                                        type="button"
                                        variant="ghost"
                                        size="sm"
                                        className="p-1 h-auto text-blue-600 hover:text-blue-800"
                                        onClick={() => {
                                          toast({
                                            title: "Title Information",
                                            description: "Please see title report in vendor page.",
                                            duration: 5000,
                                          });
                                        }}
                                        data-testid={`button-title-held-info-${propertyId}`}
                                      >
                                        <Info className="h-4 w-4" />
                                      </Button>
                                    </TooltipTrigger>
                                    <TooltipContent side="top" sideOffset={15} className="text-sm">
                                      Title Information
                                    </TooltipContent>
                                  </Tooltip>
                                </div>
                                <Select>
                                  <SelectTrigger data-testid={`select-property-title-held-by-${propertyId}`}>
                                    <SelectValue placeholder="Select" />
                                  </SelectTrigger>
                                  <SelectContent>
                                    <SelectItem value="select">Select</SelectItem>
                                    <SelectItem value="borrower">Borrower</SelectItem>
                                    <SelectItem value="borrowers">Borrowers</SelectItem>
                                    <SelectItem value="co-borrower">Co-Borrower</SelectItem>
                                    <SelectItem value="other">Other</SelectItem>
                                  </SelectContent>
                                </Select>
                              </div>
                              
                              <div className="space-y-2 md:col-span-2">
                                <div className="flex items-center gap-2">
                                  <Label htmlFor={`property-estimated-value-${propertyId}`}>Est. Value</Label>
                                  <div className="flex items-center gap-1">
                                    {/* Zillow */}
                                    <div className="flex items-center gap-1">
                                      <Button
                                        type="button"
                                        variant="ghost"
                                        size="sm"
                                        className="p-1 h-auto text-blue-600 hover:text-blue-800 no-default-hover-elevate no-default-active-elevate"
                                        onClick={() => {
                                          openValuationDialog('zillow', actualPropertyIndex >= 0 ? actualPropertyIndex : 0);
                                        }}
                                        onMouseEnter={(e) => {
                                          handleValuationHover('zillow', actualPropertyIndex >= 0 ? actualPropertyIndex : 0, e);
                                        }}
                                        onMouseLeave={handleValuationHoverLeave}
                                        data-testid={`button-zillow-valuation-${propertyId}`}
                                        title="Enter Zillow valuation manually"
                                      >
                                        <SiZillow className="h-4 w-4" />
                                      </Button>
                                    </div>
                                    {/* Realtor */}
                                    <div className="flex items-center gap-1">
                                      <Button
                                        type="button"
                                        variant="ghost"
                                        size="sm"
                                        className="p-1 h-auto text-purple-600 hover:text-purple-800 no-default-hover-elevate no-default-active-elevate"
                                        onClick={() => {
                                          openValuationDialog('realtor', actualPropertyIndex >= 0 ? actualPropertyIndex : 0);
                                        }}
                                        onMouseEnter={(e) => {
                                          handleValuationHover('realtor', actualPropertyIndex >= 0 ? actualPropertyIndex : 0, e);
                                        }}
                                        onMouseLeave={handleValuationHoverLeave}
                                        data-testid={`button-realtor-valuation-${propertyId}`}
                                        title="Enter Realtor.com valuation manually"
                                      >
                                        <MdRealEstateAgent className="h-4 w-4" />
                                      </Button>
                                    </div>
                                    {/* Redfin */}
                                    <div className="flex items-center gap-1">
                                      <Button
                                        type="button"
                                        variant="ghost"
                                        size="sm"
                                        className="p-1 h-auto text-red-600 hover:text-red-800 no-default-hover-elevate no-default-active-elevate"
                                        onClick={() => {
                                          openValuationDialog('redfin', actualPropertyIndex >= 0 ? actualPropertyIndex : 0);
                                        }}
                                        onMouseEnter={(e) => {
                                          handleValuationHover('redfin', actualPropertyIndex >= 0 ? actualPropertyIndex : 0, e);
                                        }}
                                        onMouseLeave={handleValuationHoverLeave}
                                        data-testid={`button-redfin-valuation-${propertyId}`}
                                        title="Enter Redfin valuation manually"
                                      >
                                        <FaHome className="h-4 w-4" />
                                      </Button>
                                      <Button
                                        type="button"
                                        variant="ghost"
                                        size="sm"
                                        className="p-1 h-auto text-blue-600 hover:text-blue-800"
                                        onClick={() => {
                                          openValuationSummary(actualPropertyIndex >= 0 ? actualPropertyIndex : 0);
                                        }}
                                        data-testid={`button-valuation-info-${propertyId}`}
                                        title="View all valuation estimates"
                                      >
                                        <Info className="h-3 w-3" />
                                      </Button>
                                    </div>
                                  </div>
                                </div>
                                <CurrencyInput
                                  form={form}
                                  name={`property.properties.${actualPropertyIndex >= 0 ? actualPropertyIndex : 0}.estimatedValue` as const}
                                  id={`property-estimated-value-${propertyId}`}
                                  placeholder="$0.00"
                                  data-testid={`input-property-estimated-value-${propertyId}`}
                                />
                              </div>
                              
                              <div className="space-y-2 md:col-span-2">
                                <div className="flex items-center gap-2 min-h-8">
                                  <Label htmlFor={`property-appraised-value-${propertyId}`}>Appraised Value</Label>
                                  <Button
                                    type="button"
                                    variant="ghost"
                                    size="sm"
                                    className="p-1 h-auto"
                                    title="Appraised Property Value"
                                    data-testid={`button-appraised-value-info-${propertyId}`}
                                  >
                                    <AppraisalIcon index={actualPropertyIndex >= 0 ? actualPropertyIndex : 0} control={form.control} />
                                  </Button>
                                </div>
                                <CurrencyInput
                                  form={form}
                                  name={`property.properties.${actualPropertyIndex >= 0 ? actualPropertyIndex : 0}.appraisedValue` as const}
                                  id={`property-appraised-value-${propertyId}`}
                                  placeholder="$0.00"
                                  data-testid={`input-property-appraised-value-${propertyId}`}
                                  shadowColor={(() => {
                                    const estimatedValue = form.watch(`property.properties.${actualPropertyIndex >= 0 ? actualPropertyIndex : 0}.estimatedValue` as const) || '';
                                    const appraisedValue = form.watch(`property.properties.${actualPropertyIndex >= 0 ? actualPropertyIndex : 0}.appraisedValue` as const) || '';
                                    return getValueComparisonColor(estimatedValue, appraisedValue).shadowColor;
                                  })()}
                                />
                              </div>
                              
                              <div className="space-y-2 md:col-span-2">
                                <div className="flex items-center gap-2 min-h-8">
                                  <div className="flex items-center gap-2">
                                    <Label htmlFor={`property-active-secured-loan-${propertyId}`}>Secured Loan</Label>
                                    {(() => {
                                      // Check ALL loans for attachment to this property
                                      const properties = form.watch('property.properties') || [];
                                      const currentProperty = actualPropertyIndex >= 0 ? properties[actualPropertyIndex] : null;
                                      
                                      // Check all Existing Primary Loan cards
                                      const isCurrentLoanAttached = (currentPrimaryLoanCards || []).some(cardId => {
                                        const attachedPropertyId = form.watch(`${cardId}.attachedToProperty`);
                                        return Boolean(attachedPropertyId && currentProperty?.id && attachedPropertyId === currentProperty.id);
                                      });
                                      
                                      // Check all Existing Second Loan cards
                                      const isSecondLoanAttached = (currentSecondLoanCards || []).some(cardId => {
                                        const attachedPropertyId = form.watch(`${cardId}.attachedToProperty`);
                                        return Boolean(attachedPropertyId && currentProperty?.id && attachedPropertyId === currentProperty.id);
                                      });
                                      
                                      // Check all Existing Third Loan cards
                                      const isThirdLoanAttached = (currentThirdLoanCards || []).some(cardId => {
                                        const attachedPropertyId = form.watch(`${cardId}.attachedToProperty`);
                                        return Boolean(attachedPropertyId && currentProperty?.id && attachedPropertyId === currentProperty.id);
                                      });
                                      
                                      // Check other additional loans (loan4, loan5, etc.)
                                      const additionalLoansData = additionalLoans || [];
                                      const isOtherAdditionalLoanAttached = additionalLoansData.slice(1).some(loan => {
                                        const attachedPropertyId = getDyn(`${loan.id}.attachedToProperty`);
                                        return Boolean(attachedPropertyId && currentProperty?.id && attachedPropertyId === currentProperty.id);
                                      });
                                      
                                      const hasAnyLoanAttached = isCurrentLoanAttached || isSecondLoanAttached || isThirdLoanAttached || isOtherAdditionalLoanAttached;
                                      
                                      return (
                                        <div className="flex items-center gap-1">
                                          <div 
                                            className={`w-4 h-4 rounded-full border-2 cursor-pointer flex items-center justify-center ${
                                              isCurrentLoanAttached
                                                ? 'bg-blue-500 border-blue-500 hover:bg-blue-600'
                                                : 'bg-gray-200 border-gray-300'
                                            }`}
                                            style={{
                                              backgroundColor: isCurrentLoanAttached ? '#3b82f6' : '#e5e7eb',
                                              borderColor: isCurrentLoanAttached ? '#3b82f6' : '#d1d5db'
                                            }}
                                            onClick={() => {
                                              if (isCurrentLoanAttached) {
                                                setIsCurrentLoanPreviewOpen(true);
                                              }
                                            }}
                                            title={isCurrentLoanAttached ? "View Current Loan Details" : ""}
                                            data-testid={`indicator-secured-loan-1-${propertyId}`}
                                          >
                                            {isCurrentLoanAttached && (
                                              <span className="text-xs font-semibold text-white">P</span>
                                            )}
                                          </div>
                                          <div 
                                            className={`w-4 h-4 rounded-full border-2 cursor-pointer flex items-center justify-center ${
                                              isSecondLoanAttached
                                                ? 'bg-purple-500 border-purple-500 hover:bg-purple-600'
                                                : 'bg-gray-200 border-gray-300'
                                            }`}
                                            style={{
                                              backgroundColor: isSecondLoanAttached ? '#8b5cf6' : '#e5e7eb',
                                              borderColor: isSecondLoanAttached ? '#8b5cf6' : '#d1d5db'
                                            }}
                                            onClick={() => {
                                              if (isSecondLoanAttached) {
                                                setIsCurrentSecondLoanPreviewOpen(true);
                                              }
                                            }}
                                            title={isSecondLoanAttached ? "View Current Loan 2 Details" : ""}
                                            data-testid={`indicator-secured-loan-2-${propertyId}`}
                                          >
                                            {isSecondLoanAttached && (
                                              <span className="text-xs font-semibold text-white">S</span>
                                            )}
                                          </div>
                                          <div 
                                            className={`w-4 h-4 rounded-full border-2 cursor-pointer flex items-center justify-center ${
                                              isThirdLoanAttached
                                                ? 'bg-orange-500 border-orange-500 hover:bg-orange-600'
                                                : 'bg-gray-200 border-gray-300'
                                            }`}
                                            style={{
                                              backgroundColor: isThirdLoanAttached ? '#f97316' : '#e5e7eb',
                                              borderColor: isThirdLoanAttached ? '#f97316' : '#d1d5db'
                                            }}
                                            onClick={() => {
                                              if (isThirdLoanAttached) {
                                                setIsCurrentThirdLoanPreviewOpen(true);
                                              }
                                            }}
                                            title={isThirdLoanAttached ? "View Current Third Loan Details" : ""}
                                            data-testid={`indicator-secured-loan-3-${propertyId}`}
                                          >
                                            {isThirdLoanAttached && (
                                              <span className="text-xs font-semibold text-white">T</span>
                                            )}
                                          </div>
                                        </div>
                                      );
                                    })()}
                                  </div>
                                </div>
                                {(() => {
                                  // Automatic loan detection logic
                                  const properties = form.watch('property.properties') || [];
                                  const currentProperty = actualPropertyIndex >= 0 ? properties[actualPropertyIndex] : null;
                                  
                                  if (!currentProperty?.id) return (
                                    <div className="flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background cursor-default">
                                      <span className="text-muted-foreground">Attach</span>
                                    </div>
                                  );
                                  
                                  // Check all loans for attachment to this property
                                  const attachedLoans = [];
                                  
                                  // Check all Existing Primary Loan cards
                                  (currentPrimaryLoanCards || []).forEach((cardId, index) => {
                                    const attachedPropertyId = form.watch(`${cardId}.attachedToProperty`);
                                    if (attachedPropertyId && attachedPropertyId === currentProperty.id) {
                                      attachedLoans.push('Existing Primary Loan');
                                    }
                                  });
                                  
                                  // Check all Existing Second Loan cards
                                  (currentSecondLoanCards || []).forEach((cardId, index) => {
                                    const attachedPropertyId = form.watch(`${cardId}.attachedToProperty`);
                                    if (attachedPropertyId && attachedPropertyId === currentProperty.id) {
                                      attachedLoans.push('Existing Second Loan');
                                    }
                                  });
                                  
                                  // Check all Existing Third Loan cards
                                  (currentThirdLoanCards || []).forEach((cardId, index) => {
                                    const attachedPropertyId = form.watch(`${cardId}.attachedToProperty`);
                                    if (attachedPropertyId && attachedPropertyId === currentProperty.id) {
                                      attachedLoans.push('Existing Third Loan');
                                    }
                                  });
                                  
                                  // Check other additional loans
                                  const additionalLoansData = additionalLoans || [];
                                  additionalLoansData.slice(1).forEach((loan, index) => {
                                    const attachedPropertyId = getDyn(`${loan.id}.attachedToProperty`);
                                    if (attachedPropertyId && attachedPropertyId === currentProperty.id) {
                                      attachedLoans.push(`Current Loan ${index + 4}`);
                                    }
                                  });
                                  
                                  // Determine display text
                                  let displayText = 'Attach';
                                  if (attachedLoans.length === 1) {
                                    displayText = attachedLoans[0];
                                  } else if (attachedLoans.length === 2) {
                                    displayText = '1st & 2nd Loan';
                                  } else if (attachedLoans.length === 3) {
                                    displayText = 'Three Loans';
                                  } else if (attachedLoans.length > 3) {
                                    displayText = `${attachedLoans.length} Loans`;
                                  }
                                  
                                  const hasLoansAttached = attachedLoans.length > 0;
                                  
                                  return (
                                    <Select>
                                      <SelectTrigger data-testid={`select-property-secured-loan-${propertyId}`}>
                                        <SelectValue placeholder={displayText} />
                                      </SelectTrigger>
                                      <SelectContent>
                                        <SelectItem value="paid-off">Paid Off</SelectItem>
                                      </SelectContent>
                                    </Select>
                                  );
                                })()}
                              </div>
                            </div>
                          </div>
                        </CardContent>
                      </CollapsibleContent>
                    </Collapsible>
                  </Card>
                );
              })}

              {/* Primary Residence Cards */}
              {(primaryResidenceCards || []).length > 0 && (primaryResidenceCards || ['default']).map((cardId, index) => {
                // Get the actual property from the properties array
                const properties = form.watch('property.properties') || [];
                const property = properties.find(p => p.id === cardId);
                const propertyId = property?.id || cardId;
                const propertyIndex = properties.findIndex(p => p.id === cardId);
                const isOpen = propertyCardStates[propertyId] ?? true;
                
                return (
                  <Card key={cardId} className="border-l-4 border-l-green-500 hover:border-green-500 focus-within:border-green-500 transition-colors duration-200">
                    <Collapsible 
                      open={isOpen} 
                      onOpenChange={(open) => setPropertyCardStates(prev => ({ ...prev, [propertyId]: open }))}
                    >
                      <CardHeader>
                        <div className="flex items-center justify-between">
                          <div className="flex items-center gap-8">
                            <CardTitle className="flex items-center gap-2">
                              Primary Residence
                              {property?.isSubject && (
                                <span className="text-white px-2 py-1 rounded text-xs font-medium" style={{ backgroundColor: '#1a3373' }}>
                                  Subject Property
                                </span>
                              )}
                            </CardTitle>
                          </div>
                          <div className="flex items-center gap-2">
                            {/* Delete Property Button */}
                            <Button
                              type="button"
                              variant="outline"
                              size="sm"
                              onClick={() => setDeletePrimaryResidenceDialog({ isOpen: true, cardId: propertyId })}
                              className="hover:bg-red-500 hover:text-white"
                              data-testid="button-delete-primary-property"
                              title="Delete Primary Residence"
                            >
                              <Minus className="h-4 w-4 mr-2" />
                              Remove
                            </Button>
                            
                            <CollapsibleTrigger asChild>
                              <Button 
                                variant="ghost" 
                                size="sm" 
                                className="hover:bg-orange-500 hover:text-white" 
                                data-testid={`button-toggle-primary-property-${propertyId}`}
                                title={isOpen ? 'Minimize' : 'Expand'}
                                key={`primary-property-toggle-${propertyId}-${isOpen}`}
                              >
                                {isOpen ? <Minus className="h-4 w-4" /> : <Plus className="h-4 w-4" />}
                              </Button>
                            </CollapsibleTrigger>
                          </div>
                        </div>
                      </CardHeader>
                      
                      <CollapsibleContent>
                        <CardContent>
                          <div className="space-y-6">
                            {/* Subject Property Question - Moved to top */}
                            <Card className={`bg-muted ${
                              showSubjectPropertyAnimation[propertyId] ? 'animate-roll-down-subject-property' : ''
                            }`}>
                              <CardContent className="pt-6">
                                <div className="flex justify-between items-center">
                                  <div className="space-y-3 flex-1">
                                    <Label className="text-base font-semibold">Is this the subject property that will secure the new loan?</Label>
                                    <div className="flex gap-4">
                                      <div className="flex items-center space-x-2">
                                        <input
                                          type="radio"
                                          id={`subject-yes-${propertyId}`}
                                          name={`subject-${propertyId}`}
                                          checked={primaryResidenceData[propertyId]?.isSubjectProperty === true}
                                          onChange={() => {
                                            setPrimaryResidenceData(prev => ({
                                              ...prev,
                                              [propertyId]: { 
                                                ...prev[propertyId],
                                                purpose: prev[propertyId]?.purpose ?? 'primary',
                                                isSubjectProperty: true
                                              }
                                            }));
                                            // Trigger same green animation as Second Home
                                            setSubjectProperty(propertyId);
                                          }}
                                          data-testid={`radio-subject-yes-${propertyId}`}
                                        />
                                        <Label htmlFor={`subject-yes-${propertyId}`}>Yes</Label>
                                      </div>
                                      
                                      <div className="flex items-center space-x-2">
                                        <input
                                          type="radio"
                                          id={`subject-no-${propertyId}`}
                                          name={`subject-${propertyId}`}
                                          checked={primaryResidenceData[propertyId]?.isSubjectProperty === false}
                                          onChange={() => {
                                            setPrimaryResidenceData(prev => ({
                                              ...prev,
                                              [propertyId]: { 
                                                ...prev[propertyId],
                                                purpose: prev[propertyId]?.purpose ?? 'primary',
                                                isSubjectProperty: false
                                              }
                                            }));
                                            // Update global form state to reverse green animation (same as Second Home)
                                            const properties = form.watch('property.properties') || [];
                                            const updatedProperties = properties.map(p => 
                                              p.id === propertyId ? { ...p, isSubject: false } : p
                                            );
                                            form.setValue('property.properties', updatedProperties);
                                          }}
                                          data-testid={`radio-subject-no-${propertyId}`}
                                        />
                                        <Label htmlFor={`subject-no-${propertyId}`}>No</Label>
                                      </div>
                                    </div>
                                  </div>
                                  
                                  {/* New button positioned more to the left */}
                                  <div className="flex items-center mr-8">
                                    <Button
                                      type="button"
                                      variant={(() => {
                                        const properties = form.watch('property.properties') || [];
                                        const primaryIndex = properties.findIndex(p => p.use === 'primary');
                                        const currentProperty = primaryIndex >= 0 ? properties[primaryIndex] : null;
                                        
                                        // Check which loans are attached to this property for counter
                                        const currentLoanAttached = form.watch('currentLoan.attachedToProperty');
                                        const isCurrentLoanAttached = Boolean(currentLoanAttached && currentProperty?.id && currentLoanAttached === currentProperty.id);
                                        
                                        const secondLoanAttached = form.watch('secondLoan.attachedToProperty');
                                        const isSecondLoanAttached = Boolean(secondLoanAttached && currentProperty?.id && secondLoanAttached === currentProperty.id);
                                        
                                        // Check third loan
                                        const thirdLoanAttached = form.watch('thirdLoan.attachedToProperty');
                                        const isThirdLoanAttached = Boolean(thirdLoanAttached && currentProperty?.id && thirdLoanAttached === currentProperty.id);
                                        
                                        // Count active loans
                                        let activeLoansCount = 0;
                                        if (isCurrentLoanAttached) activeLoansCount++;
                                        if (isSecondLoanAttached) activeLoansCount++;
                                        if (isThirdLoanAttached) activeLoansCount++;
                                        
                                        return activeLoansCount > 0 ? "default" : "outline";
                                      })()}
                                      size="sm"
                                      onClick={() => {
                                        // Add your button functionality here
                                        console.log('New button clicked');
                                      }}
                                      style={(() => {
                                        const properties = form.watch('property.properties') || [];
                                        const primaryIndex = properties.findIndex(p => p.use === 'primary');
                                        const currentProperty = primaryIndex >= 0 ? properties[primaryIndex] : null;
                                        
                                        // Check which loans are attached to this property for counter
                                        const currentLoanAttached = form.watch('currentLoan.attachedToProperty');
                                        const isCurrentLoanAttached = Boolean(currentLoanAttached && currentProperty?.id && currentLoanAttached === currentProperty.id);
                                        
                                        const secondLoanAttached = form.watch('secondLoan.attachedToProperty');
                                        const isSecondLoanAttached = Boolean(secondLoanAttached && currentProperty?.id && secondLoanAttached === currentProperty.id);
                                        
                                        // Check third loan
                                        const thirdLoanAttached = form.watch('thirdLoan.attachedToProperty');
                                        const isThirdLoanAttached = Boolean(thirdLoanAttached && currentProperty?.id && thirdLoanAttached === currentProperty.id);
                                        
                                        // Count active loans
                                        let activeLoansCount = 0;
                                        if (isCurrentLoanAttached) activeLoansCount++;
                                        if (isSecondLoanAttached) activeLoansCount++;
                                        if (isThirdLoanAttached) activeLoansCount++;
                                        
                                        return activeLoansCount > 0 
                                          ? { backgroundColor: '#d1d5db', borderColor: '#d1d5db', color: '#374151' } 
                                          : {};
                                      })()}
                                      className={(() => {
                                        const properties = form.watch('property.properties') || [];
                                        const primaryIndex = properties.findIndex(p => p.use === 'primary');
                                        const currentProperty = primaryIndex >= 0 ? properties[primaryIndex] : null;
                                        
                                        // Check which loans are attached to this property for counter
                                        const currentLoanAttached = form.watch('currentLoan.attachedToProperty');
                                        const isCurrentLoanAttached = Boolean(currentLoanAttached && currentProperty?.id && currentLoanAttached === currentProperty.id);
                                        
                                        const secondLoanAttached = form.watch('secondLoan.attachedToProperty');
                                        const isSecondLoanAttached = Boolean(secondLoanAttached && currentProperty?.id && secondLoanAttached === currentProperty.id);
                                        
                                        // Check third loan
                                        const thirdLoanAttached = form.watch('thirdLoan.attachedToProperty');
                                        const isThirdLoanAttached = Boolean(thirdLoanAttached && currentProperty?.id && thirdLoanAttached === currentProperty.id);
                                        
                                        // Count active loans
                                        let activeLoansCount = 0;
                                        if (isCurrentLoanAttached) activeLoansCount++;
                                        if (isSecondLoanAttached) activeLoansCount++;
                                        if (isThirdLoanAttached) activeLoansCount++;
                                        
                                        return activeLoansCount > 0 
                                          ? "w-24 text-white border-2" 
                                          : "w-24 hover:bg-red-500 hover:text-white";
                                      })()}
                                      data-testid={`button-grey-box-action-${propertyId}`}
                                      title="Loans"
                                    >
                                      {(() => {
                                        const properties = form.watch('property.properties') || [];
                                        const primaryIndex = properties.findIndex(p => p.use === 'primary');
                                        const currentProperty = primaryIndex >= 0 ? properties[primaryIndex] : null;
                                        
                                        // Check which loans are attached to this property for counter
                                        const currentLoanAttached = form.watch('currentLoan.attachedToProperty');
                                        const isCurrentLoanAttached = Boolean(currentLoanAttached && currentProperty?.id && currentLoanAttached === currentProperty.id);
                                        
                                        const secondLoanAttached = form.watch('secondLoan.attachedToProperty');
                                        const isSecondLoanAttached = Boolean(secondLoanAttached && currentProperty?.id && secondLoanAttached === currentProperty.id);
                                        
                                        // Check third loan
                                        const thirdLoanAttached = form.watch('thirdLoan.attachedToProperty');
                                        const isThirdLoanAttached = Boolean(thirdLoanAttached && currentProperty?.id && thirdLoanAttached === currentProperty.id);
                                        
                                        // Count active loans
                                        let activeLoansCount = 0;
                                        if (isCurrentLoanAttached) activeLoansCount++;
                                        if (isSecondLoanAttached) activeLoansCount++;
                                        if (isThirdLoanAttached) activeLoansCount++;
                                        
                                        return (
                                          <span>
                                            <span className="mr-3 font-semibold">{activeLoansCount}</span>
                                            <span>{activeLoansCount === 1 ? 'Loan' : 'Loans'}</span>
                                          </span>
                                        );
                                      })()}
                                    </Button>
                                  </div>
                                </div>
                              </CardContent>
                            </Card>

                            {/* Property Address - Row 1: Street Address, Unit/Apt, City, State, ZIP Code, County, Property Type */}
                            <div className="grid grid-cols-1 md:grid-cols-12 gap-4">
                              <div className="space-y-2 md:col-span-3">
                                <Label htmlFor={`property-address-street-${propertyId}`}>Street Address *</Label>
                                <div 
                                  className="flex h-9 w-full rounded-md border border-input bg-gray-50 px-3 py-1 text-sm shadow-sm items-center"
                                  data-testid={`display-property-street-${propertyId}`}
                                >
                                  {form.watch('borrower.residenceAddress.street') || ''}
                                </div>
                              </div>
                              
                              <div className="space-y-2 md:col-span-1">
                                <Label htmlFor={`property-address-unit-${propertyId}`}>Unit/Apt</Label>
                                <div 
                                  className="flex h-9 w-full rounded-md border border-input bg-gray-50 px-3 py-1 text-sm shadow-sm items-center"
                                  data-testid={`display-property-unit-${propertyId}`}
                                >
                                  {form.watch('borrower.residenceAddress.unit') || ''}
                                </div>
                              </div>
                              
                              <div className="space-y-2 md:col-span-2">
                                <Label htmlFor={`property-address-city-${propertyId}`}>City *</Label>
                                <div 
                                  className="flex h-9 w-full rounded-md border border-input bg-gray-50 px-3 py-1 text-sm shadow-sm items-center"
                                  data-testid={`display-property-city-${propertyId}`}
                                >
                                  {form.watch('borrower.residenceAddress.city') || ''}
                                </div>
                              </div>
                              
                              <div className="space-y-2 md:col-span-1">
                                <Label htmlFor={`property-address-state-${propertyId}`}>State *</Label>
                                <div 
                                  className="flex h-9 w-full rounded-md border border-input bg-gray-50 px-3 py-1 text-sm shadow-sm items-center"
                                  data-testid={`display-property-state-${propertyId}`}
                                >
                                  {form.watch('borrower.residenceAddress.state') || ''}
                                </div>
                              </div>
                              
                              <div className="space-y-2 md:col-span-1">
                                <Label htmlFor={`property-address-zip-${propertyId}`}>ZIP Code *</Label>
                                <div 
                                  className="flex h-9 w-full rounded-md border border-input bg-gray-50 px-3 py-1 text-sm shadow-sm items-center"
                                  data-testid={`display-property-zip-${propertyId}`}
                                >
                                  {form.watch('borrower.residenceAddress.zip') || ''}
                                </div>
                              </div>
                              
                              <div className="space-y-2 md:col-span-2">
                                <Label htmlFor={`property-address-county-${propertyId}`}>County</Label>
                                <div 
                                  className="flex h-9 w-full rounded-md border border-input bg-gray-50 px-3 py-1 text-sm shadow-sm items-center"
                                  data-testid={`display-property-county-${propertyId}`}
                                >
                                  {form.watch('borrower.residenceAddress.county') || ''}
                                </div>
                              </div>
                              
                              <div className="space-y-2 md:col-span-2">
                                <Label htmlFor={`property-type-${propertyId}`}>Property Type</Label>
                                <Select 
                                  value={propertyIndex >= 0 ? form.watch(`property.properties.${propertyIndex}.propertyType`) : ''}
                                  onValueChange={(value) => propertyIndex >= 0 && form.setValue(`property.properties.${propertyIndex}.propertyType` as any, value)}
                                >
                                  <SelectTrigger data-testid={`select-property-type-${propertyId}`}>
                                    <SelectValue placeholder="Select" />
                                  </SelectTrigger>
                                  <SelectContent>
                                    <SelectItem value="single-family">Single Family</SelectItem>
                                    <SelectItem value="condo">Condo</SelectItem>
                                    <SelectItem value="townhouse">Townhouse</SelectItem>
                                    <SelectItem value="duplex">Duplex</SelectItem>
                                    <SelectItem value="multi-family">Multi-Family</SelectItem>
                                    <SelectItem value="mobile-home-sw">Mobile Home SW</SelectItem>
                                    <SelectItem value="mobile-home-dw">Mobile Home DW</SelectItem>
                                    <SelectItem value="other">Other</SelectItem>
                                  </SelectContent>
                                </Select>
                              </div>
                            </div>

                            {/* Property Details - Row 2: Purchase Price, Owned Since, Title Held By, Estimated Property Value */}
                            <div className="grid grid-cols-1 md:grid-cols-12 gap-4 mt-4">
                              <div className="space-y-2 md:col-span-2">
                                <div className="flex items-center gap-2">
                                  <Label htmlFor={`property-purchase-price-${propertyId}`}>Purchase Price</Label>
                                  <Button
                                    type="button"
                                    variant="ghost"
                                    size="sm"
                                    className="p-1 h-auto text-black hover:text-gray-600"
                                    title="Purchase Property Value"
                                    data-testid={`button-purchase-price-info-${propertyId}`}
                                  >
                                    <DollarSign className="h-4 w-4" />
                                  </Button>
                                </div>
                                <CurrencyInput
                                  form={form}
                                  name={(() => {
                                    const properties = form.watch('property.properties') || [];
                                    const primaryIndex = properties.findIndex(p => p.use === 'primary');
                                    return `property.properties.${primaryIndex >= 0 ? primaryIndex : 0}.purchasePrice` as const;
                                  })()}
                                  id={`property-purchase-price-${propertyId}`}
                                  placeholder="$0.00"
                                  data-testid={`input-property-purchase-price-${propertyId}`}
                                />
                              </div>
                              
                              <div className="space-y-2 md:col-span-2">
                                <div className="min-h-5 flex items-center gap-2">
                                  <Label htmlFor={`property-owned-since-${propertyId}`}>Purchase Date</Label>
                                  <Tooltip>
                                    <TooltipTrigger asChild>
                                      <Button
                                        type="button"
                                        variant="ghost"
                                        size="sm"
                                        className="p-1 h-auto text-blue-600 hover:text-blue-800"
                                        onClick={() => {
                                          toast({
                                            title: "Purchase Information",
                                            description: "Please see purchase and record dates in title report located in vendor page.",
                                            duration: 5000,
                                          });
                                        }}
                                        data-testid={`button-purchased-info-${propertyId}`}
                                      >
                                        <Info className="h-4 w-4" />
                                      </Button>
                                    </TooltipTrigger>
                                    <TooltipContent side="top" sideOffset={15} className="text-sm">
                                      Purchase Information
                                    </TooltipContent>
                                  </Tooltip>
                                </div>
                                <Input
                                  id={`property-owned-since-${propertyId}`}
                                  value={(() => {
                                    const properties = form.watch('property.properties') || [];
                                    const primaryIndex = properties.findIndex(p => p.use === 'primary');
                                    return form.watch(`property.properties.${primaryIndex >= 0 ? primaryIndex : 0}.purchaseDate`) || '';
                                  })()}
                                  onChange={(e) => {
                                    const value = e.target.value.replace(/\D/g, ''); // Remove non-digits
                                    let formatted = '';
                                    if (value.length > 0) {
                                      formatted = value.substring(0, 2);
                                      if (value.length > 2) {
                                        formatted += '/' + value.substring(2, 4);
                                        if (value.length > 4) {
                                          formatted += '/' + value.substring(4, 8);
                                        }
                                      }
                                    }
                                    const properties = form.watch('property.properties') || [];
                                    const primaryIndex = properties.findIndex(p => p.use === 'primary');
                                    form.setValue(`property.properties.${primaryIndex >= 0 ? primaryIndex : 0}.purchaseDate`, formatted);
                                  }}
                                  placeholder="MM/DD/YYYY"
                                  maxLength={10}
                                  data-testid={`input-property-owned-since-${propertyId}`}
                                />
                              </div>
                              
                              <div className="space-y-2 md:col-span-2">
                                <div className="min-h-5 flex items-center gap-2">
                                  <Label htmlFor={`property-title-held-by-${propertyId}`}>Title Held By</Label>
                                  <Tooltip>
                                    <TooltipTrigger asChild>
                                      <Button
                                        type="button"
                                        variant="ghost"
                                        size="sm"
                                        className="p-1 h-auto text-blue-600 hover:text-blue-800"
                                        onClick={() => {
                                          toast({
                                            title: "Title Information",
                                            description: "Please see title report in vendor page.",
                                            duration: 5000,
                                          });
                                        }}
                                        data-testid={`button-title-held-info-${propertyId}`}
                                      >
                                        <Info className="h-4 w-4" />
                                      </Button>
                                    </TooltipTrigger>
                                    <TooltipContent side="top" sideOffset={15} className="text-sm">
                                      Title Information
                                    </TooltipContent>
                                  </Tooltip>
                                </div>
                                <Select>
                                  <SelectTrigger data-testid={`select-property-title-held-by-${propertyId}`}>
                                    <SelectValue placeholder="Select" />
                                  </SelectTrigger>
                                  <SelectContent>
                                    <SelectItem value="select">Select</SelectItem>
                                    <SelectItem value="borrower">Borrower</SelectItem>
                                    <SelectItem value="borrowers">Borrowers</SelectItem>
                                    <SelectItem value="co-borrower">Co-Borrower</SelectItem>
                                    <SelectItem value="other">Other</SelectItem>
                                  </SelectContent>
                                </Select>
                              </div>
                              
                              <div className="space-y-2 md:col-span-2">
                                <div className="flex items-center gap-2">
                                  <Label htmlFor={`property-estimated-value-${propertyId}`}>Est. Value</Label>
                                  <div className="flex items-center gap-1">
                                    {/* Zillow */}
                                    <div className="flex items-center gap-1">
                                      <Button
                                        type="button"
                                        variant="ghost"
                                        size="sm"
                                        className="p-1 h-auto text-blue-600 hover:text-blue-800 no-default-hover-elevate no-default-active-elevate"
                                        onClick={() => {
                                          const properties = form.watch('property.properties') || [];
                                          const primaryIndex = properties.findIndex(p => p.use === 'primary');
                                          openValuationDialog('zillow', primaryIndex >= 0 ? primaryIndex : 0);
                                        }}
                                        onMouseEnter={(e) => {
                                          const properties = form.watch('property.properties') || [];
                                          const primaryIndex = properties.findIndex(p => p.use === 'primary');
                                          handleValuationHover('zillow', primaryIndex >= 0 ? primaryIndex : 0, e);
                                        }}
                                        onMouseLeave={handleValuationHoverLeave}
                                        data-testid={`button-zillow-valuation-${propertyId}`}
                                        title="Enter Zillow valuation manually"
                                      >
                                        <SiZillow className="h-4 w-4" />
                                      </Button>
                                    </div>
                                    {/* Realtor */}
                                    <div className="flex items-center gap-1">
                                      <Button
                                        type="button"
                                        variant="ghost"
                                        size="sm"
                                        className="p-1 h-auto text-purple-600 hover:text-purple-800 no-default-hover-elevate no-default-active-elevate"
                                        onClick={() => {
                                          const properties = form.watch('property.properties') || [];
                                          const primaryIndex = properties.findIndex(p => p.use === 'primary');
                                          openValuationDialog('realtor', primaryIndex >= 0 ? primaryIndex : 0);
                                        }}
                                        onMouseEnter={(e) => {
                                          const properties = form.watch('property.properties') || [];
                                          const primaryIndex = properties.findIndex(p => p.use === 'primary');
                                          handleValuationHover('realtor', primaryIndex >= 0 ? primaryIndex : 0, e);
                                        }}
                                        onMouseLeave={handleValuationHoverLeave}
                                        data-testid={`button-realtor-valuation-${propertyId}`}
                                        title="Enter Realtor.com valuation manually"
                                      >
                                        <MdRealEstateAgent className="h-4 w-4" />
                                      </Button>
                                    </div>
                                    {/* Redfin */}
                                    <div className="flex items-center gap-1">
                                      <Button
                                        type="button"
                                        variant="ghost"
                                        size="sm"
                                        className="p-1 h-auto text-red-600 hover:text-red-800 no-default-hover-elevate no-default-active-elevate"
                                        onClick={() => {
                                          const properties = form.watch('property.properties') || [];
                                          const primaryIndex = properties.findIndex(p => p.use === 'primary');
                                          openValuationDialog('redfin', primaryIndex >= 0 ? primaryIndex : 0);
                                        }}
                                        onMouseEnter={(e) => {
                                          const properties = form.watch('property.properties') || [];
                                          const primaryIndex = properties.findIndex(p => p.use === 'primary');
                                          handleValuationHover('redfin', primaryIndex >= 0 ? primaryIndex : 0, e);
                                        }}
                                        onMouseLeave={handleValuationHoverLeave}
                                        data-testid={`button-redfin-valuation-${propertyId}`}
                                        title="Enter Redfin valuation manually"
                                      >
                                        <FaHome className="h-4 w-4" />
                                      </Button>
                                      <Button
                                        type="button"
                                        variant="ghost"
                                        size="sm"
                                        className="p-1 h-auto text-blue-600 hover:text-blue-800"
                                        onClick={() => {
                                          const properties = form.watch('property.properties') || [];
                                          const primaryIndex = properties.findIndex(p => p.use === 'primary');
                                          openValuationSummary(primaryIndex >= 0 ? primaryIndex : 0);
                                        }}
                                        data-testid={`button-valuation-info-${propertyId}`}
                                        title="View all valuation estimates"
                                      >
                                        <Info className="h-3 w-3" />
                                      </Button>
                                    </div>
                                  </div>
                                </div>
                                <CurrencyInput
                                  form={form}
                                  name={(() => {
                                    const properties = form.watch('property.properties') || [];
                                    const primaryIndex = properties.findIndex(p => p.use === 'primary');
                                    return `property.properties.${primaryIndex >= 0 ? primaryIndex : 0}.estimatedValue` as const;
                                  })()}
                                  id={`property-estimated-value-${propertyId}`}
                                  placeholder="$0.00"
                                  data-testid={`input-property-estimated-value-${propertyId}`}
                                />
                              </div>
                              
                              <div className="space-y-2 md:col-span-2">
                                <div className="flex items-center gap-2 min-h-8">
                                  <Label htmlFor={`property-appraised-value-${propertyId}`}>Appraised Value</Label>
                                  <Button
                                    type="button"
                                    variant="ghost"
                                    size="sm"
                                    className="p-1 h-auto"
                                    title="Appraised Property Value"
                                    data-testid={`button-appraised-value-info-${propertyId}`}
                                  >
                                    {(() => {
                                      const properties = form.watch('property.properties') || [];
                                      const primaryIndex = properties.findIndex(p => p.use === 'primary');
                                      return <AppraisalIcon index={primaryIndex >= 0 ? primaryIndex : 0} control={form.control} />;
                                    })()}
                                  </Button>
                                </div>
                                <CurrencyInput
                                  form={form}
                                  name={(() => {
                                    const properties = form.watch('property.properties') || [];
                                    const primaryIndex = properties.findIndex(p => p.use === 'primary');
                                    return `property.properties.${primaryIndex >= 0 ? primaryIndex : 0}.appraisedValue` as const;
                                  })()}
                                  id={`property-appraised-value-${propertyId}`}
                                  placeholder="$0.00"
                                  data-testid={`input-property-appraised-value-${propertyId}`}
                                  shadowColor={(() => {
                                    const properties = form.watch('property.properties') || [];
                                    const primaryIndex = properties.findIndex(p => p.use === 'primary');
                                    const estimatedValue = form.watch(`property.properties.${primaryIndex >= 0 ? primaryIndex : 0}.estimatedValue` as const) || '';
                                    const appraisedValue = form.watch(`property.properties.${primaryIndex >= 0 ? primaryIndex : 0}.appraisedValue` as const) || '';
                                    return getValueComparisonColor(estimatedValue, appraisedValue).shadowColor;
                                  })()}
                                />
                              </div>
                              
                              <div className="space-y-2 md:col-span-2">
                                <div className="flex items-center gap-2 min-h-8">
                                  <div className="flex items-center gap-2">
                                    <Label htmlFor={`property-active-secured-loan-${propertyId}`}>Secured Loan</Label>
                                    {(() => {
                                      // Check ALL loans for attachment to this property
                                      const properties = form.watch('property.properties') || [];
                                      const primaryIndex = properties.findIndex(p => p.use === 'primary');
                                      const currentProperty = primaryIndex >= 0 ? properties[primaryIndex] : null;
                                      
                                      // Check current loan
                                      const currentLoanAttached = form.watch('currentLoan.attachedToProperty');
                                      const isCurrentLoanAttached = Boolean(currentLoanAttached && currentProperty?.id && currentLoanAttached === currentProperty.id);
                                      
                                      // Check second loan
                                      const secondLoanAttached = form.watch('secondLoan.attachedToProperty');
                                      const isSecondLoanAttached = Boolean(secondLoanAttached && currentProperty?.id && secondLoanAttached === currentProperty.id);
                                      
                                      // Check third loan
                                      const thirdLoanAttached = form.watch('thirdLoan.attachedToProperty');
                                      const isThirdLoanAttached = Boolean(thirdLoanAttached && currentProperty?.id && thirdLoanAttached === currentProperty.id);
                                      
                                      // Check other additional loans (loan4, loan5, etc.)
                                      const additionalLoansData = additionalLoans || [];
                                      const isOtherAdditionalLoanAttached = additionalLoansData.slice(1).some(loan => {
                                        const attachedPropertyId = getDyn(`${loan.id}.attachedToProperty`);
                                        return Boolean(attachedPropertyId && currentProperty?.id && attachedPropertyId === currentProperty.id);
                                      });
                                      
                                      const hasAnyLoanAttached = isCurrentLoanAttached || isSecondLoanAttached || isThirdLoanAttached || isOtherAdditionalLoanAttached;
                                      
                                      return (
                                        <div className="flex items-center gap-1">
                                          <div 
                                            className={`w-4 h-4 rounded-full border-2 cursor-pointer flex items-center justify-center ${
                                              isCurrentLoanAttached
                                                ? 'bg-blue-500 border-blue-500 hover:bg-blue-600'
                                                : 'bg-gray-200 border-gray-300'
                                            }`}
                                            style={{
                                              backgroundColor: isCurrentLoanAttached ? '#3b82f6' : '#e5e7eb',
                                              borderColor: isCurrentLoanAttached ? '#3b82f6' : '#d1d5db'
                                            }}
                                            onClick={() => {
                                              if (isCurrentLoanAttached) {
                                                setIsCurrentLoanPreviewOpen(true);
                                              }
                                            }}
                                            title={isCurrentLoanAttached ? "View Current Loan Details" : ""}
                                            data-testid={`indicator-secured-loan-1-${propertyId}`}
                                          >
                                            {isCurrentLoanAttached && (
                                              <span className="text-xs font-semibold text-white">P</span>
                                            )}
                                          </div>
                                          <div 
                                            className={`w-4 h-4 rounded-full border-2 cursor-pointer flex items-center justify-center ${
                                              isSecondLoanAttached
                                                ? 'bg-purple-500 border-purple-500 hover:bg-purple-600'
                                                : 'bg-gray-200 border-gray-300'
                                            }`}
                                            style={{
                                              backgroundColor: isSecondLoanAttached ? '#8b5cf6' : '#e5e7eb',
                                              borderColor: isSecondLoanAttached ? '#8b5cf6' : '#d1d5db'
                                            }}
                                            onClick={() => {
                                              if (isSecondLoanAttached) {
                                                setIsCurrentSecondLoanPreviewOpen(true);
                                              }
                                            }}
                                            title={isSecondLoanAttached ? "View Current Loan 2 Details" : ""}
                                            data-testid={`indicator-secured-loan-2-${propertyId}`}
                                          >
                                            {isSecondLoanAttached && (
                                              <span className="text-xs font-semibold text-white">S</span>
                                            )}
                                          </div>
                                          <div 
                                            className={`w-4 h-4 rounded-full border-2 cursor-pointer flex items-center justify-center ${
                                              isThirdLoanAttached
                                                ? 'bg-orange-500 border-orange-500 hover:bg-orange-600'
                                                : 'bg-gray-200 border-gray-300'
                                            }`}
                                            style={{
                                              backgroundColor: isThirdLoanAttached ? '#f97316' : '#e5e7eb',
                                              borderColor: isThirdLoanAttached ? '#f97316' : '#d1d5db'
                                            }}
                                            onClick={() => {
                                              if (isThirdLoanAttached) {
                                                setIsCurrentThirdLoanPreviewOpen(true);
                                              }
                                            }}
                                            title={isThirdLoanAttached ? "View Current Third Loan Details" : ""}
                                            data-testid={`indicator-secured-loan-3-${propertyId}`}
                                          >
                                            {isThirdLoanAttached && (
                                              <span className="text-xs font-semibold text-white">T</span>
                                            )}
                                          </div>
                                        </div>
                                      );
                                    })()}
                                  </div>
                                </div>
                                {(() => {
                                  // Automatic loan detection logic
                                  const properties = form.watch('property.properties') || [];
                                  const primaryIndex = properties.findIndex(p => p.use === 'primary');
                                  const currentProperty = primaryIndex >= 0 ? properties[primaryIndex] : null;
                                  
                                  if (!currentProperty?.id) return (
                                    <div className="flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background cursor-default">
                                      <span className="text-muted-foreground">Attach</span>
                                    </div>
                                  );
                                  
                                  // Check all loans for attachment to this property
                                  const attachedLoans = [];
                                  
                                  // Check current loan
                                  const currentLoanAttached = form.watch('currentLoan.attachedToProperty');
                                  if (currentLoanAttached && currentLoanAttached === currentProperty.id) {
                                    attachedLoans.push('Current Primary Loan');
                                  }
                                  
                                  // Check second loan
                                  const secondLoanAttached = form.watch('secondLoan.attachedToProperty');
                                  if (secondLoanAttached && secondLoanAttached === currentProperty.id) {
                                    attachedLoans.push('Current Second Loan');
                                  }
                                  
                                  // Check third loan
                                  const thirdLoanAttached = form.watch('thirdLoan.attachedToProperty');
                                  if (thirdLoanAttached && thirdLoanAttached === currentProperty.id) {
                                    attachedLoans.push('Current Third Loan');
                                  }
                                  
                                  // Check other additional loans
                                  const additionalLoansData = additionalLoans || [];
                                  additionalLoansData.slice(1).forEach((loan, index) => {
                                    const attachedPropertyId = getDyn(`${loan.id}.attachedToProperty`);
                                    if (attachedPropertyId && attachedPropertyId === currentProperty.id) {
                                      attachedLoans.push(`Current Loan ${index + 4}`);
                                    }
                                  });
                                  
                                  // Determine display text
                                  let displayText = 'Attach';
                                  if (attachedLoans.length === 1) {
                                    displayText = attachedLoans[0];
                                  } else if (attachedLoans.length === 2) {
                                    displayText = '1st & 2nd Loan';
                                  } else if (attachedLoans.length === 3) {
                                    displayText = 'Three Loans';
                                  } else if (attachedLoans.length > 3) {
                                    displayText = `${attachedLoans.length} Loans`;
                                  }
                                  
                                  const hasLoansAttached = attachedLoans.length > 0;
                                  
                                  return (
                                    <Select>
                                      <SelectTrigger data-testid={`select-property-secured-loan-${propertyId}`}>
                                        <SelectValue placeholder={displayText} />
                                      </SelectTrigger>
                                      <SelectContent>
                                        <SelectItem value="paid-off">Paid Off</SelectItem>
                                      </SelectContent>
                                    </Select>
                                  );
                                })()}
                              </div>
                            </div>
                          </div>
                        </CardContent>
                      </CollapsibleContent>
                    </Collapsible>
                  </Card>
                );
              })}

              {/* Second Home Cards */}
              {(secondHomeCards || []).length > 0 && (secondHomeCards || ['default']).map((cardId, index) => {
                // Get the actual property from the properties array
                const properties = form.watch('property.properties') || [];
                const property = properties.find(p => p.id === cardId);
                const propertyId = property?.id || cardId;
                const propertyIndex = properties.findIndex(p => p.id === cardId);
                const isOpen = propertyCardStates[propertyId] ?? true;
                
                return (
                  <Card key={cardId} className="border-l-4 border-l-blue-500 hover:border-blue-500 focus-within:border-blue-500 transition-colors duration-200">
                    <Collapsible 
                      open={isOpen} 
                      onOpenChange={(open) => setPropertyCardStates(prev => ({ ...prev, [propertyId]: open }))}
                    >
                      <CardHeader>
                        <div className="flex items-center justify-between">
                          <div className="flex items-center gap-8">
                            <CardTitle className="flex items-center gap-2">
                              Second Home
                              {property?.isSubject && (
                                <span className="text-white px-2 py-1 rounded text-xs font-medium" style={{ backgroundColor: '#1a3373' }}>
                                  Subject Property
                                </span>
                              )}
                            </CardTitle>
                          </div>
                          <div className="flex items-center gap-2">
                            {/* Add Property Button */}
                            <Button
                              type="button"
                              variant="outline"
                              size="sm"
                              onClick={() => {
                                // Create entry in main form's property array first
                                addProperty('second-home');
                                
                                // Get the ID of the newly created property
                                const currentProperties = form.watch('property.properties') || [];
                                const newProperty = currentProperties[currentProperties.length - 1];
                                const newPropertyId = newProperty?.id;
                                
                                if (newPropertyId) {
                                  setSecondHomeCards(prev => [...(prev || ['default']), newPropertyId]);
                                  // Initialize data state for new card
                                  setSecondHomeData(prev => ({ 
                                    ...prev, 
                                    [newPropertyId]: { isSubjectProperty: null } 
                                  }));
                                  
                                  // Auto-expand the new property card
                                  setPropertyCardStates(prev => ({ ...prev, [newPropertyId]: true }));
                                }
                              }}
                              className="hover:bg-blue-500 hover:text-white"
                              data-testid="button-add-second-home-property"
                              title="Add New Second Home"
                            >
                              <Plus className="h-4 w-4 mr-2" />
                              Add Property
                            </Button>
                            
                            {/* Delete Property Button */}
                            <Button
                              type="button"
                              variant="outline"
                              size="sm"
                              onClick={() => setDeleteSecondHomeDialog({ isOpen: true, cardId: propertyId })}
                              className="hover:bg-red-500 hover:text-white"
                              data-testid="button-delete-second-home-property"
                              title="Delete Second Home"
                            >
                              <Minus className="h-4 w-4 mr-2" />
                              Remove
                            </Button>
                            
                            <CollapsibleTrigger asChild>
                              <Button 
                                variant="ghost" 
                                size="sm" 
                                className="hover:bg-orange-500 hover:text-white" 
                                data-testid={`button-toggle-second-home-property-${propertyId}`}
                                title={isOpen ? 'Minimize' : 'Expand'}
                                key={`second-home-property-toggle-${propertyId}-${isOpen}`}
                              >
                                {isOpen ? <Minus className="h-4 w-4" /> : <Plus className="h-4 w-4" />}
                              </Button>
                            </CollapsibleTrigger>
                          </div>
                        </div>
                      </CardHeader>
                      
                      <CollapsibleContent>
                        <CardContent>
                          <div className="space-y-6">
                            {/* Subject Property Question - Moved to top */}
                            <Card className={`bg-muted ${
                              showSubjectPropertyAnimation[propertyId] ? 'animate-roll-down-subject-property' : ''
                            }`}>
                              <CardContent className="pt-6">
                                <div className="flex justify-between items-center">
                                  <div className="space-y-3 flex-1">
                                    <Label className="text-base font-semibold">Is this the subject property that will secure the new loan?</Label>
                                    <div className="flex gap-4">
                                      <div className="flex items-center space-x-2">
                                        <input
                                          type="radio"
                                          id={`second-home-subject-yes-${propertyId}`}
                                          name={`second-home-subject-${propertyId}`}
                                          checked={secondHomeData[propertyId]?.isSubjectProperty === true}
                                          onChange={() => {
                                            setSecondHomeData(prev => ({
                                              ...prev,
                                              [propertyId]: { 
                                                ...prev[propertyId],
                                                isSubjectProperty: true
                                              }
                                            }));
                                            // Trigger same green animation as Primary Residence
                                            setSubjectProperty(propertyId);
                                          }}
                                          data-testid={`radio-second-home-subject-yes-${propertyId}`}
                                        />
                                        <Label htmlFor={`second-home-subject-yes-${propertyId}`}>Yes</Label>
                                      </div>
                                      
                                      <div className="flex items-center space-x-2">
                                        <input
                                          type="radio"
                                          id={`second-home-subject-no-${propertyId}`}
                                          name={`second-home-subject-${propertyId}`}
                                          checked={secondHomeData[propertyId]?.isSubjectProperty === false}
                                          onChange={() => {
                                            setSecondHomeData(prev => ({
                                              ...prev,
                                              [propertyId]: { 
                                                ...prev[propertyId],
                                                isSubjectProperty: false
                                              }
                                            }));
                                            // Update global form state to reverse green animation (same as Primary Residence)
                                            const properties = form.watch('property.properties') || [];
                                            const updatedProperties = properties.map(p => 
                                              p.id === propertyId ? { ...p, isSubject: false } : p
                                            );
                                            form.setValue('property.properties', updatedProperties);
                                          }}
                                          data-testid={`radio-second-home-subject-no-${propertyId}`}
                                        />
                                        <Label htmlFor={`second-home-subject-no-${propertyId}`}>No</Label>
                                      </div>
                                    </div>
                                  </div>
                                  
                                  {/* New button positioned more to the left */}
                                  <div className="flex items-center mr-8">
                                    <Button
                                      type="button"
                                      variant={(() => {
                                        const currentProperty = property;
                                        
                                        // Check which loans are attached to this property for counter
                                        const currentLoanAttached = form.watch('currentLoan.attachedToProperty');
                                        const isCurrentLoanAttached = Boolean(currentLoanAttached && currentProperty?.id && currentLoanAttached === currentProperty.id);
                                        
                                        const secondLoanAttached = form.watch('secondLoan.attachedToProperty');
                                        const isSecondLoanAttached = Boolean(secondLoanAttached && currentProperty?.id && secondLoanAttached === currentProperty.id);
                                        
                                        // Check third loan
                                        const thirdLoanAttached = form.watch('thirdLoan.attachedToProperty');
                                        const isThirdLoanAttached = Boolean(thirdLoanAttached && currentProperty?.id && thirdLoanAttached === currentProperty.id);
                                        
                                        // Count active loans
                                        let activeLoansCount = 0;
                                        if (isCurrentLoanAttached) activeLoansCount++;
                                        if (isSecondLoanAttached) activeLoansCount++;
                                        if (isThirdLoanAttached) activeLoansCount++;
                                        
                                        return activeLoansCount > 0 ? "default" : "outline";
                                      })()}
                                      size="sm"
                                      onClick={() => {
                                        // Add your button functionality here
                                        console.log('Second Home Loans button clicked');
                                      }}
                                      style={(() => {
                                        const currentProperty = property;
                                        
                                        // Check which loans are attached to this property for counter
                                        const currentLoanAttached = form.watch('currentLoan.attachedToProperty');
                                        const isCurrentLoanAttached = Boolean(currentLoanAttached && currentProperty?.id && currentLoanAttached === currentProperty.id);
                                        
                                        const secondLoanAttached = form.watch('secondLoan.attachedToProperty');
                                        const isSecondLoanAttached = Boolean(secondLoanAttached && currentProperty?.id && secondLoanAttached === currentProperty.id);
                                        
                                        // Check third loan
                                        const thirdLoanAttached = form.watch('thirdLoan.attachedToProperty');
                                        const isThirdLoanAttached = Boolean(thirdLoanAttached && currentProperty?.id && thirdLoanAttached === currentProperty.id);
                                        
                                        // Count active loans
                                        let activeLoansCount = 0;
                                        if (isCurrentLoanAttached) activeLoansCount++;
                                        if (isSecondLoanAttached) activeLoansCount++;
                                        if (isThirdLoanAttached) activeLoansCount++;
                                        
                                        return activeLoansCount > 0 
                                          ? { backgroundColor: '#d1d5db', borderColor: '#d1d5db', color: '#374151' } 
                                          : {};
                                      })()}
                                      className={(() => {
                                        const currentProperty = property;
                                        
                                        // Check which loans are attached to this property for counter
                                        const currentLoanAttached = form.watch('currentLoan.attachedToProperty');
                                        const isCurrentLoanAttached = Boolean(currentLoanAttached && currentProperty?.id && currentLoanAttached === currentProperty.id);
                                        
                                        const secondLoanAttached = form.watch('secondLoan.attachedToProperty');
                                        const isSecondLoanAttached = Boolean(secondLoanAttached && currentProperty?.id && secondLoanAttached === currentProperty.id);
                                        
                                        // Check third loan
                                        const thirdLoanAttached = form.watch('thirdLoan.attachedToProperty');
                                        const isThirdLoanAttached = Boolean(thirdLoanAttached && currentProperty?.id && thirdLoanAttached === currentProperty.id);
                                        
                                        // Count active loans
                                        let activeLoansCount = 0;
                                        if (isCurrentLoanAttached) activeLoansCount++;
                                        if (isSecondLoanAttached) activeLoansCount++;
                                        if (isThirdLoanAttached) activeLoansCount++;
                                        
                                        return activeLoansCount > 0 
                                          ? "w-24 text-white border-2" 
                                          : "w-24 hover:bg-red-500 hover:text-white";
                                      })()}
                                      data-testid={`button-second-home-grey-box-action-${propertyId}`}
                                      title="Loans"
                                    >
                                      {(() => {
                                        const properties = form.watch('property.properties') || [];
                                        const secondHomeIndex = properties.findIndex(p => p.use === 'second-home' && p.id === propertyId);
                                        const currentProperty = secondHomeIndex >= 0 ? properties[secondHomeIndex] : null;
                                        
                                        // Check which loans are attached to this property for counter
                                        const currentLoanAttached = form.watch('currentLoan.attachedToProperty');
                                        const isCurrentLoanAttached = Boolean(currentLoanAttached && currentProperty?.id && currentLoanAttached === currentProperty.id);
                                        
                                        const secondLoanAttached = form.watch('secondLoan.attachedToProperty');
                                        const isSecondLoanAttached = Boolean(secondLoanAttached && currentProperty?.id && secondLoanAttached === currentProperty.id);
                                        
                                        // Check third loan
                                        const thirdLoanAttached = form.watch('thirdLoan.attachedToProperty');
                                        const isThirdLoanAttached = Boolean(thirdLoanAttached && currentProperty?.id && thirdLoanAttached === currentProperty.id);
                                        
                                        // Count active loans
                                        let activeLoansCount = 0;
                                        if (isCurrentLoanAttached) activeLoansCount++;
                                        if (isSecondLoanAttached) activeLoansCount++;
                                        if (isThirdLoanAttached) activeLoansCount++;
                                        
                                        return (
                                          <span>
                                            <span className="mr-3 font-semibold">{activeLoansCount}</span>
                                            <span>{activeLoansCount === 1 ? 'Loan' : 'Loans'}</span>
                                          </span>
                                        );
                                      })()}
                                    </Button>
                                  </div>
                                </div>
                              </CardContent>
                            </Card>

                            {/* Property Address - Row 1: Street Address, Unit/Apt, City, State, ZIP Code, County, Property Type */}
                            <div className="grid grid-cols-1 md:grid-cols-12 gap-4">
                              <div className="space-y-2 md:col-span-3">
                                <Label htmlFor={`second-home-property-address-street-${propertyId}`}>Street Address *</Label>
                                <Input
                                  id={`second-home-property-address-street-${propertyId}`}

                                  {...(propertyIndex >= 0 ? form.register(`property.properties.${propertyIndex}.address.street` as any) : {})}
                                  data-testid={`input-second-home-property-street-${propertyId}`}
                                />
                              </div>
                              
                              <div className="space-y-2 md:col-span-1">
                                <Label htmlFor={`second-home-property-address-unit-${propertyId}`}>Unit/Apt</Label>
                                <Input
                                  id={`second-home-property-address-unit-${propertyId}`}
                                  {...(propertyIndex >= 0 ? form.register(`property.properties.${propertyIndex}.address.unit` as any) : {})}
                                  data-testid={`input-second-home-property-unit-${propertyId}`}
                                />
                              </div>
                              
                              <div className="space-y-2 md:col-span-2">
                                <Label htmlFor={`second-home-property-address-city-${propertyId}`}>City *</Label>
                                <Input
                                  id={`second-home-property-address-city-${propertyId}`}

                                  {...(propertyIndex >= 0 ? form.register(`property.properties.${propertyIndex}.address.city` as any) : {})}
                                  data-testid={`input-second-home-property-city-${propertyId}`}
                                />
                              </div>
                              
                              <div className="space-y-2 md:col-span-1">
                                <Label htmlFor={`second-home-property-address-state-${propertyId}`}>State *</Label>
                                <Select {...(propertyIndex >= 0 ? form.register(`property.properties.${propertyIndex}.address.state` as any) : {})} 
                                        value={form.watch(`property.properties.${propertyIndex}` as any)?.address?.state || ''} 
                                        onValueChange={(value) => form.setValue(`property.properties.${propertyIndex}.address.state` as any, value)}>
                                  <SelectTrigger data-testid={`select-second-home-property-state-${propertyId}`}>
                                    <SelectValue placeholder="Select" />
                                  </SelectTrigger>
                                  <SelectContent>
                                    {US_STATES.map((state) => (
                                      <SelectItem key={state.value} value={state.value}>
                                        {state.label}
                                      </SelectItem>
                                    ))}
                                  </SelectContent>
                                </Select>
                              </div>
                              
                              <div className="space-y-2 md:col-span-1">
                                <Label htmlFor={`second-home-property-address-zip-${propertyId}`}>ZIP Code *</Label>
                                <Input
                                  id={`second-home-property-address-zip-${propertyId}`}
                                  placeholder="94103"
                                  {...(propertyIndex >= 0 ? form.register(`property.properties.${propertyIndex}.address.zip` as any) : {})}
                                  data-testid={`input-second-home-property-zip-${propertyId}`}
                                />
                              </div>
                              
                              <div className="space-y-2 md:col-span-2">
                                <Label htmlFor={`second-home-property-address-county-${propertyId}`}>County</Label>
                                <Input
                                  id={`second-home-property-address-county-${propertyId}`}

                                  {...(propertyIndex >= 0 ? form.register(`property.properties.${propertyIndex}.address.county` as any) : {})}
                                  data-testid={`input-second-home-property-county-${propertyId}`}
                                />
                              </div>
                              
                              <div className="space-y-2 md:col-span-2">
                                <Label htmlFor={`second-home-property-type-${propertyId}`}>Property Type</Label>
                                <Select {...(propertyIndex >= 0 ? form.register(`property.properties.${propertyIndex}.propertyType` as any) : {})} 
                                        value={form.watch(`property.properties.${propertyIndex}` as any)?.propertyType || ''} 
                                        onValueChange={(value) => form.setValue(`property.properties.${propertyIndex}.propertyType` as any, value)}>
                                  <SelectTrigger data-testid={`select-second-home-property-type-${propertyId}`}>
                                    <SelectValue placeholder="Select" />
                                  </SelectTrigger>
                                  <SelectContent>
                                    <SelectItem value="single-family">Single Family</SelectItem>
                                    <SelectItem value="condo">Condo</SelectItem>
                                    <SelectItem value="townhouse">Townhouse</SelectItem>
                                    <SelectItem value="duplex">Duplex</SelectItem>
                                    <SelectItem value="multi-family">Multi-Family</SelectItem>
                                    <SelectItem value="mobile-home-sw">Mobile Home SW</SelectItem>
                                    <SelectItem value="mobile-home-dw">Mobile Home DW</SelectItem>
                                    <SelectItem value="other">Other</SelectItem>
                                  </SelectContent>
                                </Select>
                              </div>
                            </div>

                            {/* Property Details - Row 2: Purchase Price, Owned Since, Title Held By, Estimated Property Value */}
                            <div className="grid grid-cols-1 md:grid-cols-12 gap-4 mt-4">
                              <div className="space-y-2 md:col-span-2">
                                <div className="flex items-center gap-2">
                                  <Label htmlFor={`second-home-purchase-price-${propertyId}`}>Purchase Price</Label>
                                  <Button
                                    type="button"
                                    variant="ghost"
                                    size="sm"
                                    className="p-1 h-auto text-black hover:text-gray-600"
                                    title="Purchase Property Value"
                                    data-testid={`button-second-home-purchase-price-info-${propertyId}`}
                                  >
                                    <DollarSign className="h-4 w-4" />
                                  </Button>
                                </div>
                                <CurrencyInput
                                  form={form}
                                  name={(() => {
                                    const properties = form.watch('property.properties') || [];
                                    const secondHomeIndex = properties.findIndex(p => p.use === 'second-home' && p.id === propertyId);
                                    return `property.properties.${secondHomeIndex >= 0 ? secondHomeIndex : 0}.purchasePrice` as const;
                                  })()}
                                  id={`second-home-purchase-price-${propertyId}`}
                                  placeholder="$0.00"
                                  data-testid={`input-second-home-purchase-price-${propertyId}`}
                                />
                              </div>
                              
                              <div className="space-y-2 md:col-span-2">
                                <div className="min-h-5 flex items-center gap-2">
                                  <Label htmlFor={`second-home-owned-since-${propertyId}`}>Purchase Date</Label>
                                  <Tooltip>
                                    <TooltipTrigger asChild>
                                      <Button
                                        type="button"
                                        variant="ghost"
                                        size="sm"
                                        className="p-1 h-auto text-blue-600 hover:text-blue-800"
                                        onClick={() => {
                                          toast({
                                            title: "Purchase Information",
                                            description: "Please see purchase and record dates in title report located in vendor page.",
                                            duration: 5000,
                                          });
                                        }}
                                        data-testid={`button-second-home-purchased-info-${propertyId}`}
                                      >
                                        <Info className="h-4 w-4" />
                                      </Button>
                                    </TooltipTrigger>
                                    <TooltipContent side="top" sideOffset={15} className="text-sm">
                                      Purchase Information
                                    </TooltipContent>
                                  </Tooltip>
                                </div>
                                <Input
                                  id={`second-home-owned-since-${propertyId}`}
                                  value={(() => {
                                    const properties = form.watch('property.properties') || [];
                                    const secondHomeIndex = properties.findIndex(p => p.use === 'second-home' && p.id === propertyId);
                                    return form.watch(`property.properties.${secondHomeIndex >= 0 ? secondHomeIndex : 0}.purchaseDate`) || '';
                                  })()}
                                  onChange={(e) => {
                                    const value = e.target.value.replace(/\D/g, ''); // Remove non-digits
                                    let formatted = '';
                                    if (value.length > 0) {
                                      formatted = value.substring(0, 2);
                                      if (value.length > 2) {
                                        formatted += '/' + value.substring(2, 4);
                                        if (value.length > 4) {
                                          formatted += '/' + value.substring(4, 8);
                                        }
                                      }
                                    }
                                    const properties = form.watch('property.properties') || [];
                                    const secondHomeIndex = properties.findIndex(p => p.use === 'second-home' && p.id === propertyId);
                                    form.setValue(`property.properties.${secondHomeIndex >= 0 ? secondHomeIndex : 0}.purchaseDate`, formatted);
                                  }}
                                  placeholder="MM/DD/YYYY"
                                  maxLength={10}
                                  data-testid={`input-second-home-owned-since-${propertyId}`}
                                />
                              </div>
                              
                              <div className="space-y-2 md:col-span-2">
                                <div className="min-h-5 flex items-center gap-2">
                                  <Label htmlFor={`second-home-title-held-by-${propertyId}`}>Title Held By</Label>
                                  <Tooltip>
                                    <TooltipTrigger asChild>
                                      <Button
                                        type="button"
                                        variant="ghost"
                                        size="sm"
                                        className="p-1 h-auto text-blue-600 hover:text-blue-800"
                                        onClick={() => {
                                          toast({
                                            title: "Title Information",
                                            description: "Please see title report in vendor page.",
                                            duration: 5000,
                                          });
                                        }}
                                        data-testid={`button-second-home-title-held-info-${propertyId}`}
                                      >
                                        <Info className="h-4 w-4" />
                                      </Button>
                                    </TooltipTrigger>
                                    <TooltipContent side="top" sideOffset={15} className="text-sm">
                                      Title Information
                                    </TooltipContent>
                                  </Tooltip>
                                </div>
                                <Select>
                                  <SelectTrigger data-testid={`select-second-home-title-held-by-${propertyId}`}>
                                    <SelectValue placeholder="Select" />
                                  </SelectTrigger>
                                  <SelectContent>
                                    <SelectItem value="select">Select</SelectItem>
                                    <SelectItem value="borrower">Borrower</SelectItem>
                                    <SelectItem value="borrowers">Borrowers</SelectItem>
                                    <SelectItem value="co-borrower">Co-Borrower</SelectItem>
                                    <SelectItem value="other">Other</SelectItem>
                                  </SelectContent>
                                </Select>
                              </div>
                              
                              <div className="space-y-2 md:col-span-2">
                                <div className="flex items-center gap-2">
                                  <Label htmlFor={`second-home-estimated-value-${propertyId}`}>Est. Value</Label>
                                  <div className="flex items-center gap-1">
                                    {/* Zillow */}
                                    <div className="flex items-center gap-1">
                                      <Button
                                        type="button"
                                        variant="ghost"
                                        size="sm"
                                        className="p-1 h-auto text-blue-600 hover:text-blue-800 no-default-hover-elevate no-default-active-elevate"
                                        onClick={() => {
                                          const properties = form.watch('property.properties') || [];
                                          const secondHomeIndex = properties.findIndex(p => p.use === 'second-home' && p.id === propertyId);
                                          openValuationDialog('zillow', secondHomeIndex >= 0 ? secondHomeIndex : 0);
                                        }}
                                        onMouseEnter={(e) => {
                                          const properties = form.watch('property.properties') || [];
                                          const secondHomeIndex = properties.findIndex(p => p.use === 'second-home' && p.id === propertyId);
                                          handleValuationHover('zillow', secondHomeIndex >= 0 ? secondHomeIndex : 0, e);
                                        }}
                                        onMouseLeave={handleValuationHoverLeave}
                                        data-testid={`button-second-home-zillow-valuation-${propertyId}`}
                                        title="Enter Zillow valuation manually"
                                      >
                                        <SiZillow className="h-4 w-4" />
                                      </Button>
                                    </div>
                                    {/* Realtor */}
                                    <div className="flex items-center gap-1">
                                      <Button
                                        type="button"
                                        variant="ghost"
                                        size="sm"
                                        className="p-1 h-auto text-purple-600 hover:text-purple-800 no-default-hover-elevate no-default-active-elevate"
                                        onClick={() => {
                                          const properties = form.watch('property.properties') || [];
                                          const secondHomeIndex = properties.findIndex(p => p.use === 'second-home' && p.id === propertyId);
                                          openValuationDialog('realtor', secondHomeIndex >= 0 ? secondHomeIndex : 0);
                                        }}
                                        onMouseEnter={(e) => {
                                          const properties = form.watch('property.properties') || [];
                                          const secondHomeIndex = properties.findIndex(p => p.use === 'second-home' && p.id === propertyId);
                                          handleValuationHover('realtor', secondHomeIndex >= 0 ? secondHomeIndex : 0, e);
                                        }}
                                        onMouseLeave={handleValuationHoverLeave}
                                        data-testid={`button-second-home-realtor-valuation-${propertyId}`}
                                        title="Enter Realtor.com valuation manually"
                                      >
                                        <MdRealEstateAgent className="h-4 w-4" />
                                      </Button>
                                    </div>
                                    {/* Redfin */}
                                    <div className="flex items-center gap-1">
                                      <Button
                                        type="button"
                                        variant="ghost"
                                        size="sm"
                                        className="p-1 h-auto text-red-600 hover:text-red-800 no-default-hover-elevate no-default-active-elevate"
                                        onClick={() => {
                                          const properties = form.watch('property.properties') || [];
                                          const secondHomeIndex = properties.findIndex(p => p.use === 'second-home' && p.id === propertyId);
                                          openValuationDialog('redfin', secondHomeIndex >= 0 ? secondHomeIndex : 0);
                                        }}
                                        onMouseEnter={(e) => {
                                          const properties = form.watch('property.properties') || [];
                                          const secondHomeIndex = properties.findIndex(p => p.use === 'second-home' && p.id === propertyId);
                                          handleValuationHover('redfin', secondHomeIndex >= 0 ? secondHomeIndex : 0, e);
                                        }}
                                        onMouseLeave={handleValuationHoverLeave}
                                        data-testid={`button-second-home-redfin-valuation-${propertyId}`}
                                        title="Enter Redfin valuation manually"
                                      >
                                        <FaHome className="h-4 w-4" />
                                      </Button>
                                      <Button
                                        type="button"
                                        variant="ghost"
                                        size="sm"
                                        className="p-1 h-auto text-blue-600 hover:text-blue-800"
                                        onClick={() => {
                                          const properties = form.watch('property.properties') || [];
                                          const secondHomeIndex = properties.findIndex(p => p.use === 'second-home' && p.id === propertyId);
                                          openValuationSummary(secondHomeIndex >= 0 ? secondHomeIndex : 0);
                                        }}
                                        data-testid={`button-second-home-valuation-info-${propertyId}`}
                                        title="View all valuation estimates"
                                      >
                                        <Info className="h-3 w-3" />
                                      </Button>
                                    </div>
                                  </div>
                                </div>
                                <CurrencyInput
                                  form={form}
                                  name={(() => {
                                    const properties = form.watch('property.properties') || [];
                                    const secondHomeIndex = properties.findIndex(p => p.use === 'second-home' && p.id === propertyId);
                                    return `property.properties.${secondHomeIndex >= 0 ? secondHomeIndex : 0}.estimatedValue` as const;
                                  })()}
                                  id={`second-home-estimated-value-${propertyId}`}
                                  placeholder="$0.00"
                                  data-testid={`input-second-home-estimated-value-${propertyId}`}
                                />
                              </div>
                              
                              <div className="space-y-2 md:col-span-2">
                                <div className="flex items-center gap-2 min-h-8">
                                  <Label htmlFor={`second-home-appraised-value-${propertyId}`}>Appraised Value</Label>
                                  <Button
                                    type="button"
                                    variant="ghost"
                                    size="sm"
                                    className="p-1 h-auto"
                                    title="Appraised Property Value"
                                    data-testid={`button-second-home-appraised-value-info-${propertyId}`}
                                  >
                                    {(() => {
                                      const properties = form.watch('property.properties') || [];
                                      const secondHomeIndex = properties.findIndex(p => p.use === 'second-home' && p.id === propertyId);
                                      return <AppraisalIcon index={secondHomeIndex >= 0 ? secondHomeIndex : 0} control={form.control} />;
                                    })()}
                                  </Button>
                                </div>
                                <CurrencyInput
                                  form={form}
                                  name={(() => {
                                    const properties = form.watch('property.properties') || [];
                                    const secondHomeIndex = properties.findIndex(p => p.use === 'second-home' && p.id === propertyId);
                                    return `property.properties.${secondHomeIndex >= 0 ? secondHomeIndex : 0}.appraisedValue` as const;
                                  })()}
                                  id={`second-home-appraised-value-${propertyId}`}
                                  placeholder="$0.00"
                                  data-testid={`input-second-home-appraised-value-${propertyId}`}
                                  shadowColor={(() => {
                                    const properties = form.watch('property.properties') || [];
                                    const secondHomeIndex = properties.findIndex(p => p.use === 'second-home' && p.id === propertyId);
                                    const estimatedValue = form.watch(`property.properties.${secondHomeIndex >= 0 ? secondHomeIndex : 0}.estimatedValue` as const) || '';
                                    const appraisedValue = form.watch(`property.properties.${secondHomeIndex >= 0 ? secondHomeIndex : 0}.appraisedValue` as const) || '';
                                    return getValueComparisonColor(estimatedValue, appraisedValue).shadowColor;
                                  })()}
                                />
                              </div>
                              
                              <div className="space-y-2 md:col-span-2">
                                <div className="flex items-center gap-2 min-h-8">
                                  <div className="flex items-center gap-2">
                                    <Label htmlFor={`second-home-active-secured-loan-${propertyId}`}>Secured Loan</Label>
                                    {(() => {
                                      // Check ALL loans for attachment to this property
                                      const properties = form.watch('property.properties') || [];
                                      const secondHomeIndex = properties.findIndex(p => p.use === 'second-home' && p.id === propertyId);
                                      const currentProperty = secondHomeIndex >= 0 ? properties[secondHomeIndex] : null;
                                      
                                      // Check current loan
                                      const currentLoanAttached = form.watch('currentLoan.attachedToProperty');
                                      const isCurrentLoanAttached = Boolean(currentLoanAttached && currentProperty?.id && currentLoanAttached === currentProperty.id);
                                      
                                      // Check second loan
                                      const secondLoanAttached = form.watch('secondLoan.attachedToProperty');
                                      const isSecondLoanAttached = Boolean(secondLoanAttached && currentProperty?.id && secondLoanAttached === currentProperty.id);
                                      
                                      // Check third loan
                                      const thirdLoanAttached = form.watch('thirdLoan.attachedToProperty');
                                      const isThirdLoanAttached = Boolean(thirdLoanAttached && currentProperty?.id && thirdLoanAttached === currentProperty.id);
                                      
                                      // Check other additional loans (loan4, loan5, etc.)
                                      const additionalLoansData = additionalLoans || [];
                                      const isOtherAdditionalLoanAttached = additionalLoansData.slice(1).some(loan => {
                                        const attachedPropertyId = getDyn(`${loan.id}.attachedToProperty`);
                                        return Boolean(attachedPropertyId && currentProperty?.id && attachedPropertyId === currentProperty.id);
                                      });
                                      
                                      const hasAnyLoanAttached = isCurrentLoanAttached || isSecondLoanAttached || isThirdLoanAttached || isOtherAdditionalLoanAttached;
                                      
                                      return (
                                        <div className="flex items-center gap-1">
                                          <div 
                                            className={`w-4 h-4 rounded-full border-2 cursor-pointer flex items-center justify-center ${
                                              isCurrentLoanAttached
                                                ? 'bg-blue-500 border-blue-500 hover:bg-blue-600'
                                                : 'bg-gray-200 border-gray-300'
                                            }`}
                                            style={{
                                              backgroundColor: isCurrentLoanAttached ? '#3b82f6' : '#e5e7eb',
                                              borderColor: isCurrentLoanAttached ? '#3b82f6' : '#d1d5db'
                                            }}
                                            onClick={() => {
                                              if (isCurrentLoanAttached) {
                                                setIsCurrentLoanPreviewOpen(true);
                                              }
                                            }}
                                            title={isCurrentLoanAttached ? "View Current Loan Details" : ""}
                                            data-testid={`indicator-second-home-secured-loan-1-${propertyId}`}
                                          >
                                            {isCurrentLoanAttached && (
                                              <span className="text-xs font-semibold text-white">P</span>
                                            )}
                                          </div>
                                          <div 
                                            className={`w-4 h-4 rounded-full border-2 cursor-pointer flex items-center justify-center ${
                                              isSecondLoanAttached
                                                ? 'bg-purple-500 border-purple-500 hover:bg-purple-600'
                                                : 'bg-gray-200 border-gray-300'
                                            }`}
                                            style={{
                                              backgroundColor: isSecondLoanAttached ? '#8b5cf6' : '#e5e7eb',
                                              borderColor: isSecondLoanAttached ? '#8b5cf6' : '#d1d5db'
                                            }}
                                            onClick={() => {
                                              if (isSecondLoanAttached) {
                                                setIsCurrentSecondLoanPreviewOpen(true);
                                              }
                                            }}
                                            title={isSecondLoanAttached ? "View Current Loan 2 Details" : ""}
                                            data-testid={`indicator-second-home-secured-loan-2-${propertyId}`}
                                          >
                                            {isSecondLoanAttached && (
                                              <span className="text-xs font-semibold text-white">S</span>
                                            )}
                                          </div>
                                          <div 
                                            className={`w-4 h-4 rounded-full border-2 cursor-pointer flex items-center justify-center ${
                                              isThirdLoanAttached
                                                ? 'bg-orange-500 border-orange-500 hover:bg-orange-600'
                                                : 'bg-gray-200 border-gray-300'
                                            }`}
                                            style={{
                                              backgroundColor: isThirdLoanAttached ? '#f97316' : '#e5e7eb',
                                              borderColor: isThirdLoanAttached ? '#f97316' : '#d1d5db'
                                            }}
                                            onClick={() => {
                                              if (isThirdLoanAttached) {
                                                setIsCurrentThirdLoanPreviewOpen(true);
                                              }
                                            }}
                                            title={isThirdLoanAttached ? "View Current Third Loan Details" : ""}
                                            data-testid={`indicator-second-home-secured-loan-3-${propertyId}`}
                                          >
                                            {isThirdLoanAttached && (
                                              <span className="text-xs font-semibold text-white">T</span>
                                            )}
                                          </div>
                                        </div>
                                      );
                                    })()}
                                  </div>
                                </div>
                                {(() => {
                                  // Automatic loan detection logic for Second Home
                                  const properties = form.watch('property.properties') || [];
                                  const secondHomeIndex = properties.findIndex(p => p.use === 'second-home' && p.id === propertyId);
                                  const currentProperty = secondHomeIndex >= 0 ? properties[secondHomeIndex] : null;
                                  
                                  if (!currentProperty?.id) return (
                                    <div className="flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background cursor-default">
                                      <span className="text-muted-foreground">Attach</span>
                                    </div>
                                  );
                                  
                                  // Check all loans for attachment to this property
                                  const attachedLoans = [];
                                  
                                  // Check current loan
                                  const currentLoanAttached = form.watch('currentLoan.attachedToProperty');
                                  if (currentLoanAttached && currentLoanAttached === currentProperty.id) {
                                    attachedLoans.push('Current Primary Loan');
                                  }
                                  
                                  // Check second loan
                                  const secondLoanAttached = form.watch('secondLoan.attachedToProperty');
                                  if (secondLoanAttached && secondLoanAttached === currentProperty.id) {
                                    attachedLoans.push('Current Second Loan');
                                  }
                                  
                                  // Check third loan
                                  const thirdLoanAttached = form.watch('thirdLoan.attachedToProperty');
                                  if (thirdLoanAttached && thirdLoanAttached === currentProperty.id) {
                                    attachedLoans.push('Current Third Loan');
                                  }
                                  
                                  // Check other additional loans
                                  const additionalLoansData = additionalLoans || [];
                                  additionalLoansData.slice(1).forEach((loan, index) => {
                                    const attachedPropertyId = getDyn(`${loan.id}.attachedToProperty`);
                                    if (attachedPropertyId && attachedPropertyId === currentProperty.id) {
                                      attachedLoans.push(`Current Loan ${index + 4}`);
                                    }
                                  });
                                  
                                  // Determine display text
                                  let displayText = 'Attach';
                                  if (attachedLoans.length === 1) {
                                    displayText = attachedLoans[0];
                                  } else if (attachedLoans.length === 2) {
                                    displayText = '1st & 2nd Loan';
                                  } else if (attachedLoans.length === 3) {
                                    displayText = 'Three Loans';
                                  } else if (attachedLoans.length > 3) {
                                    displayText = `${attachedLoans.length} Loans`;
                                  }
                                  
                                  const hasLoansAttached = attachedLoans.length > 0;
                                  
                                  return (
                                    <Select>
                                      <SelectTrigger data-testid={`select-second-home-secured-loan-${propertyId}`}>
                                        <SelectValue placeholder={displayText} />
                                      </SelectTrigger>
                                      <SelectContent>
                                        <SelectItem value="paid-off">Paid Off</SelectItem>
                                      </SelectContent>
                                    </Select>
                                  );
                                })()}
                              </div>
                            </div>

                          </div>
                        </CardContent>
                      </CollapsibleContent>
                    </Collapsible>
                  </Card>
                );
              })}

              {/* Investment Property Cards */}
              {(investmentCards || []).length > 0 && (investmentCards || ['default']).map((cardId, index) => {
                // Get the actual property from the properties array
                const properties = form.watch('property.properties') || [];
                const property = properties.find(p => p.id === cardId);
                const propertyId = property?.id || cardId;
                const propertyIndex = properties.findIndex(p => p.id === cardId);
                const isOpen = propertyCardStates[propertyId] ?? true;
                
                return (
                  <Card key={cardId} className="border-l-4 border-l-purple-500 hover:border-purple-500 focus-within:border-purple-500 transition-colors duration-200">
                    <Collapsible 
                      open={isOpen} 
                      onOpenChange={(open) => setPropertyCardStates(prev => ({ ...prev, [propertyId]: open }))}
                    >
                      <CardHeader>
                        <div className="flex items-center justify-between">
                          <div className="flex items-center gap-8">
                            <CardTitle className="flex items-center gap-2">
                              Investment Property
                              {property?.isSubject && (
                                <span className="text-white px-2 py-1 rounded text-xs font-medium" style={{ backgroundColor: '#1a3373' }}>
                                  Subject Property
                                </span>
                              )}
                            </CardTitle>
                          </div>
                          <div className="flex items-center gap-2">
                            {/* Add Property Button */}
                            <Button
                              type="button"
                              variant="outline"
                              size="sm"
                              onClick={() => {
                                // Create entry in main form's property array first
                                addProperty('investment');
                                
                                // Get the ID of the newly created property
                                const currentProperties = form.watch('property.properties') || [];
                                const newProperty = currentProperties[currentProperties.length - 1];
                                const newPropertyId = newProperty?.id;
                                
                                if (newPropertyId) {
                                  setInvestmentCards(prev => [...(prev || ['default']), newPropertyId]);
                                  // Initialize data state for new card
                                  setInvestmentData(prev => ({ 
                                    ...prev, 
                                    [newPropertyId]: { isSubjectProperty: null } 
                                  }));
                                  
                                  // Auto-expand the new property card
                                  setPropertyCardStates(prev => ({ ...prev, [newPropertyId]: true }));
                                }
                              }}
                              className="hover:bg-blue-500 hover:text-white"
                              data-testid="button-add-investment-property"
                              title="Add New Investment Property"
                            >
                              <Plus className="h-4 w-4 mr-2" />
                              Add Property
                            </Button>
                            
                            {/* Delete Property Button */}
                            <Button
                              type="button"
                              variant="outline"
                              size="sm"
                              onClick={() => setDeleteInvestmentDialog({ isOpen: true, cardId: propertyId })}
                              className="hover:bg-red-500 hover:text-white"
                              data-testid="button-delete-investment-property"
                              title="Delete Investment Property"
                            >
                              <Minus className="h-4 w-4 mr-2" />
                              Remove
                            </Button>
                            
                            <CollapsibleTrigger asChild>
                              <Button 
                                variant="ghost" 
                                size="sm" 
                                className="hover:bg-orange-500 hover:text-white" 
                                data-testid={`button-toggle-investment-property-${propertyId}`}
                                title={isOpen ? 'Minimize' : 'Expand'}
                                key={`investment-property-toggle-${propertyId}-${isOpen}`}
                              >
                                {isOpen ? <Minus className="h-4 w-4" /> : <Plus className="h-4 w-4" />}
                              </Button>
                            </CollapsibleTrigger>
                          </div>
                        </div>
                      </CardHeader>
                      
                      <CollapsibleContent>
                        <CardContent>
                          <div className="space-y-6">
                            {/* Subject Property Question - Moved to top */}
                            <Card className={`bg-muted ${
                              showSubjectPropertyAnimation[propertyId] ? 'animate-roll-down-subject-property' : ''
                            }`}>
                              <CardContent className="pt-6">
                                <div className="flex justify-between items-center">
                                  <div className="space-y-3 flex-1">
                                    <Label className="text-base font-semibold">Is this the subject property that will secure the new loan?</Label>
                                    <div className="flex gap-4">
                                      <div className="flex items-center space-x-2">
                                        <input
                                          type="radio"
                                          id={`investment-property-subject-yes-${propertyId}`}
                                          name={`investment-property-subject-${propertyId}`}
                                          checked={investmentData[propertyId]?.isSubjectProperty === true}
                                          onChange={() => {
                                            setInvestmentData(prev => ({
                                              ...prev,
                                              [propertyId]: { 
                                                ...prev[propertyId],
                                                isSubjectProperty: true
                                              }
                                            }));
                                            // Trigger same green animation as Primary Residence
                                            setSubjectProperty(propertyId);
                                          }}
                                          data-testid={`radio-investment-property-subject-yes-${propertyId}`}
                                        />
                                        <Label htmlFor={`investment-property-subject-yes-${propertyId}`}>Yes</Label>
                                      </div>
                                      
                                      <div className="flex items-center space-x-2">
                                        <input
                                          type="radio"
                                          id={`investment-property-subject-no-${propertyId}`}
                                          name={`investment-property-subject-${propertyId}`}
                                          checked={investmentData[propertyId]?.isSubjectProperty === false}
                                          onChange={() => {
                                            setInvestmentData(prev => ({
                                              ...prev,
                                              [propertyId]: { 
                                                ...prev[propertyId],
                                                isSubjectProperty: false
                                              }
                                            }));
                                            // Update global form state to reverse green animation (same as Primary Residence)
                                            const properties = form.watch('property.properties') || [];
                                            const updatedProperties = properties.map(p => 
                                              p.id === propertyId ? { ...p, isSubject: false } : p
                                            );
                                            form.setValue('property.properties', updatedProperties);
                                          }}
                                          data-testid={`radio-investment-property-subject-no-${propertyId}`}
                                        />
                                        <Label htmlFor={`investment-property-subject-no-${propertyId}`}>No</Label>
                                      </div>
                                    </div>
                                  </div>
                                  
                                  {/* New button positioned more to the left */}
                                  <div className="flex items-center mr-8">
                                    <Button
                                      type="button"
                                      variant={(() => {
                                        const currentProperty = property;
                                        
                                        // Check which loans are attached to this property for counter
                                        const currentLoanAttached = form.watch('currentLoan.attachedToProperty');
                                        const isCurrentLoanAttached = Boolean(currentLoanAttached && currentProperty?.id && currentLoanAttached === currentProperty.id);
                                        
                                        const secondLoanAttached = form.watch('secondLoan.attachedToProperty');
                                        const isSecondLoanAttached = Boolean(secondLoanAttached && currentProperty?.id && secondLoanAttached === currentProperty.id);
                                        
                                        // Check third loan
                                        const thirdLoanAttached = form.watch('thirdLoan.attachedToProperty');
                                        const isThirdLoanAttached = Boolean(thirdLoanAttached && currentProperty?.id && thirdLoanAttached === currentProperty.id);
                                        
                                        // Count active loans
                                        let activeLoansCount = 0;
                                        if (isCurrentLoanAttached) activeLoansCount++;
                                        if (isSecondLoanAttached) activeLoansCount++;
                                        if (isThirdLoanAttached) activeLoansCount++;
                                        
                                        return activeLoansCount > 0 ? "default" : "outline";
                                      })()}
                                      size="sm"
                                      onClick={() => {
                                        // Add your button functionality here
                                        console.log('Investment Property Loans button clicked');
                                      }}
                                      style={(() => {
                                        const currentProperty = property;
                                        
                                        // Check which loans are attached to this property for counter
                                        const currentLoanAttached = form.watch('currentLoan.attachedToProperty');
                                        const isCurrentLoanAttached = Boolean(currentLoanAttached && currentProperty?.id && currentLoanAttached === currentProperty.id);
                                        
                                        const secondLoanAttached = form.watch('secondLoan.attachedToProperty');
                                        const isSecondLoanAttached = Boolean(secondLoanAttached && currentProperty?.id && secondLoanAttached === currentProperty.id);
                                        
                                        // Check third loan
                                        const thirdLoanAttached = form.watch('thirdLoan.attachedToProperty');
                                        const isThirdLoanAttached = Boolean(thirdLoanAttached && currentProperty?.id && thirdLoanAttached === currentProperty.id);
                                        
                                        // Count active loans
                                        let activeLoansCount = 0;
                                        if (isCurrentLoanAttached) activeLoansCount++;
                                        if (isSecondLoanAttached) activeLoansCount++;
                                        if (isThirdLoanAttached) activeLoansCount++;
                                        
                                        return activeLoansCount > 0 
                                          ? { backgroundColor: '#d1d5db', borderColor: '#d1d5db', color: '#374151' } 
                                          : {};
                                      })()}
                                      className={(() => {
                                        const currentProperty = property;
                                        
                                        // Check which loans are attached to this property for counter
                                        const currentLoanAttached = form.watch('currentLoan.attachedToProperty');
                                        const isCurrentLoanAttached = Boolean(currentLoanAttached && currentProperty?.id && currentLoanAttached === currentProperty.id);
                                        
                                        const secondLoanAttached = form.watch('secondLoan.attachedToProperty');
                                        const isSecondLoanAttached = Boolean(secondLoanAttached && currentProperty?.id && secondLoanAttached === currentProperty.id);
                                        
                                        // Check third loan
                                        const thirdLoanAttached = form.watch('thirdLoan.attachedToProperty');
                                        const isThirdLoanAttached = Boolean(thirdLoanAttached && currentProperty?.id && thirdLoanAttached === currentProperty.id);
                                        
                                        // Count active loans
                                        let activeLoansCount = 0;
                                        if (isCurrentLoanAttached) activeLoansCount++;
                                        if (isSecondLoanAttached) activeLoansCount++;
                                        if (isThirdLoanAttached) activeLoansCount++;
                                        
                                        return activeLoansCount > 0 
                                          ? "w-24 text-white border-2" 
                                          : "w-24 hover:bg-red-500 hover:text-white";
                                      })()}
                                      data-testid={`button-investment-grey-box-action-${propertyId}`}
                                      title="Loans"
                                    >
                                      {(() => {
                                        const properties = form.watch('property.properties') || [];
                                        const investmentIndex = properties.findIndex(p => p.use === 'investment' && p.id === propertyId);
                                        const currentProperty = investmentIndex >= 0 ? properties[investmentIndex] : null;
                                        
                                        // Check which loans are attached to this property for counter
                                        const currentLoanAttached = form.watch('currentLoan.attachedToProperty');
                                        const isCurrentLoanAttached = Boolean(currentLoanAttached && currentProperty?.id && currentLoanAttached === currentProperty.id);
                                        
                                        const secondLoanAttached = form.watch('secondLoan.attachedToProperty');
                                        const isSecondLoanAttached = Boolean(secondLoanAttached && currentProperty?.id && secondLoanAttached === currentProperty.id);
                                        
                                        // Check third loan
                                        const thirdLoanAttached = form.watch('thirdLoan.attachedToProperty');
                                        const isThirdLoanAttached = Boolean(thirdLoanAttached && currentProperty?.id && thirdLoanAttached === currentProperty.id);
                                        
                                        // Count active loans
                                        let activeLoansCount = 0;
                                        if (isCurrentLoanAttached) activeLoansCount++;
                                        if (isSecondLoanAttached) activeLoansCount++;
                                        if (isThirdLoanAttached) activeLoansCount++;
                                        
                                        return (
                                          <span>
                                            <span className="mr-3 font-semibold">{activeLoansCount}</span>
                                            <span>{activeLoansCount === 1 ? 'Loan' : 'Loans'}</span>
                                          </span>
                                        );
                                      })()}
                                    </Button>
                                  </div>
                                </div>
                              </CardContent>
                            </Card>

                            {/* Property Address - Row 1: Street Address, Unit/Apt, City, State, ZIP Code, County, Property Type */}
                            <div className="grid grid-cols-1 md:grid-cols-12 gap-4">
                              <div className="space-y-2 md:col-span-3">
                                <Label htmlFor={`investment-property-address-street-${propertyId}`}>Street Address *</Label>
                                <Input
                                  id={`investment-property-address-street-${propertyId}`}
                                  {...(propertyIndex >= 0 ? form.register(`property.properties.${propertyIndex}.address.street` as any) : {})}
                                  data-testid={`input-investment-property-street-${propertyId}`}
                                />
                              </div>
                              
                              <div className="space-y-2 md:col-span-1">
                                <Label htmlFor={`investment-property-address-unit-${propertyId}`}>Unit/Apt</Label>
                                <Input
                                  id={`investment-property-address-unit-${propertyId}`}
                                  {...(propertyIndex >= 0 ? form.register(`property.properties.${propertyIndex}.address.unit` as any) : {})}
                                  data-testid={`input-investment-property-unit-${propertyId}`}
                                />
                              </div>
                              
                              <div className="space-y-2 md:col-span-2">
                                <Label htmlFor={`investment-property-address-city-${propertyId}`}>City *</Label>
                                <Input
                                  id={`investment-property-address-city-${propertyId}`}
                                  {...(propertyIndex >= 0 ? form.register(`property.properties.${propertyIndex}.address.city` as any) : {})}
                                  data-testid={`input-investment-property-city-${propertyId}`}
                                />
                              </div>
                              
                              <div className="space-y-2 md:col-span-1">
                                <Label htmlFor={`investment-property-address-state-${propertyId}`}>State *</Label>
                                <Select {...(propertyIndex >= 0 ? form.register(`property.properties.${propertyIndex}.address.state` as any) : {})} 
                                        value={form.watch(`property.properties.${propertyIndex}` as any)?.address?.state || ''} 
                                        onValueChange={(value) => form.setValue(`property.properties.${propertyIndex}.address.state` as any, value)}>
                                  <SelectTrigger data-testid={`select-investment-property-state-${propertyId}`}>
                                    <SelectValue placeholder="Select" />
                                  </SelectTrigger>
                                  <SelectContent>
                                    {US_STATES.map((state) => (
                                      <SelectItem key={state.value} value={state.value}>
                                        {state.label}
                                      </SelectItem>
                                    ))}
                                  </SelectContent>
                                </Select>
                              </div>
                              
                              <div className="space-y-2 md:col-span-1">
                                <Label htmlFor={`investment-property-address-zip-${propertyId}`}>ZIP Code *</Label>
                                <Input
                                  id={`investment-property-address-zip-${propertyId}`}
                                  placeholder="94103"
                                  {...(propertyIndex >= 0 ? form.register(`property.properties.${propertyIndex}.address.zip` as any) : {})}
                                  data-testid={`input-investment-property-zip-${propertyId}`}
                                />
                              </div>
                              
                              <div className="space-y-2 md:col-span-2">
                                <Label htmlFor={`investment-property-address-county-${propertyId}`}>County</Label>
                                <Input
                                  id={`investment-property-address-county-${propertyId}`}
                                  {...(propertyIndex >= 0 ? form.register(`property.properties.${propertyIndex}.address.county` as any) : {})}
                                  data-testid={`input-investment-property-county-${propertyId}`}
                                />
                              </div>
                              
                              <div className="space-y-2 md:col-span-2">
                                <Label htmlFor={`investment-property-type-${propertyId}`}>Property Type</Label>
                                <Select {...(propertyIndex >= 0 ? form.register(`property.properties.${propertyIndex}.propertyType` as any) : {})} 
                                        value={form.watch(`property.properties.${propertyIndex}` as any)?.propertyType || ''} 
                                        onValueChange={(value) => form.setValue(`property.properties.${propertyIndex}.propertyType` as any, value)}>
                                  <SelectTrigger data-testid={`select-investment-property-type-${propertyId}`}>
                                    <SelectValue placeholder="Select" />
                                  </SelectTrigger>
                                  <SelectContent>
                                    <SelectItem value="single-family">Single Family</SelectItem>
                                    <SelectItem value="condo">Condo</SelectItem>
                                    <SelectItem value="townhouse">Townhouse</SelectItem>
                                    <SelectItem value="duplex">Duplex</SelectItem>
                                    <SelectItem value="multi-family">Multi-Family</SelectItem>
                                    <SelectItem value="mobile-home-sw">Mobile Home SW</SelectItem>
                                    <SelectItem value="mobile-home-dw">Mobile Home DW</SelectItem>
                                    <SelectItem value="other">Other</SelectItem>
                                  </SelectContent>
                                </Select>
                              </div>
                            </div>

                            {/* Property Details - Row 2: Purchase Price, Owned Since, Title Held By, Estimated Property Value */}
                            <div className="grid grid-cols-1 md:grid-cols-12 gap-4 mt-4">
                              <div className="space-y-2 md:col-span-2">
                                <div className="flex items-center gap-2">
                                  <Label htmlFor={`investment-property-purchase-price-${propertyId}`}>Purchase Price</Label>
                                  <Button
                                    type="button"
                                    variant="ghost"
                                    size="sm"
                                    className="p-1 h-auto text-black hover:text-gray-600"
                                    title="Purchase Property Value"
                                    data-testid={`button-investment-property-purchase-price-info-${propertyId}`}
                                  >
                                    <DollarSign className="h-4 w-4" />
                                  </Button>
                                </div>
                                <CurrencyInput
                                  form={form}
                                  name={(() => {
                                    const properties = form.watch('property.properties') || [];
                                    const investmentIndex = properties.findIndex(p => p.use === 'investment' && p.id === propertyId);
                                    return `property.properties.${investmentIndex >= 0 ? investmentIndex : 0}.purchasePrice` as const;
                                  })()}
                                  id={`investment-property-purchase-price-${propertyId}`}
                                  placeholder="$0.00"
                                  data-testid={`input-investment-property-purchase-price-${propertyId}`}
                                />
                              </div>
                              
                              <div className="space-y-2 md:col-span-2">
                                <div className="min-h-5 flex items-center gap-2">
                                  <Label htmlFor={`investment-property-owned-since-${propertyId}`}>Purchase Date</Label>
                                  <Tooltip>
                                    <TooltipTrigger asChild>
                                      <Button
                                        type="button"
                                        variant="ghost"
                                        size="sm"
                                        className="p-1 h-auto text-blue-600 hover:text-blue-800"
                                        onClick={() => {
                                          toast({
                                            title: "Purchase Information",
                                            description: "Please see purchase and record dates in title report located in vendor page.",
                                            duration: 5000,
                                          });
                                        }}
                                        data-testid={`button-investment-property-purchased-info-${propertyId}`}
                                      >
                                        <Info className="h-4 w-4" />
                                      </Button>
                                    </TooltipTrigger>
                                    <TooltipContent side="top" sideOffset={15} className="text-sm">
                                      Purchase Information
                                    </TooltipContent>
                                  </Tooltip>
                                </div>
                                <Input
                                  id={`investment-property-owned-since-${propertyId}`}
                                  value={(() => {
                                    const properties = form.watch('property.properties') || [];
                                    const investmentIndex = properties.findIndex(p => p.use === 'investment' && p.id === propertyId);
                                    return form.watch(`property.properties.${investmentIndex >= 0 ? investmentIndex : 0}.purchaseDate`) || '';
                                  })()}
                                  onChange={(e) => {
                                    const value = e.target.value.replace(/\D/g, ''); // Remove non-digits
                                    let formatted = '';
                                    if (value.length > 0) {
                                      formatted = value.substring(0, 2);
                                      if (value.length > 2) {
                                        formatted += '/' + value.substring(2, 4);
                                        if (value.length > 4) {
                                          formatted += '/' + value.substring(4, 8);
                                        }
                                      }
                                    }
                                    const properties = form.watch('property.properties') || [];
                                    const investmentIndex = properties.findIndex(p => p.use === 'investment' && p.id === propertyId);
                                    form.setValue(`property.properties.${investmentIndex >= 0 ? investmentIndex : 0}.purchaseDate`, formatted);
                                  }}
                                  placeholder="MM/DD/YYYY"
                                  maxLength={10}
                                  data-testid={`input-investment-property-owned-since-${propertyId}`}
                                />
                              </div>
                              
                              <div className="space-y-2 md:col-span-2">
                                <div className="min-h-5 flex items-center gap-2">
                                  <Label htmlFor={`investment-property-title-held-by-${propertyId}`}>Title Held By</Label>
                                  <Tooltip>
                                    <TooltipTrigger asChild>
                                      <Button
                                        type="button"
                                        variant="ghost"
                                        size="sm"
                                        className="p-1 h-auto text-blue-600 hover:text-blue-800"
                                        onClick={() => {
                                          toast({
                                            title: "Title Information",
                                            description: "Please see title report in vendor page.",
                                            duration: 5000,
                                          });
                                        }}
                                        data-testid={`button-investment-property-title-held-info-${propertyId}`}
                                      >
                                        <Info className="h-4 w-4" />
                                      </Button>
                                    </TooltipTrigger>
                                    <TooltipContent side="top" sideOffset={15} className="text-sm">
                                      Title Information
                                    </TooltipContent>
                                  </Tooltip>
                                </div>
                                <Select>
                                  <SelectTrigger data-testid={`select-investment-property-title-held-by-${propertyId}`}>
                                    <SelectValue placeholder="Select" />
                                  </SelectTrigger>
                                  <SelectContent>
                                    <SelectItem value="select">Select</SelectItem>
                                    <SelectItem value="borrower">Borrower</SelectItem>
                                    <SelectItem value="borrowers">Borrowers</SelectItem>
                                    <SelectItem value="co-borrower">Co-Borrower</SelectItem>
                                    <SelectItem value="other">Other</SelectItem>
                                  </SelectContent>
                                </Select>
                              </div>
                              
                              <div className="space-y-2 md:col-span-2">
                                <div className="flex items-center gap-2">
                                  <Label htmlFor={`investment-property-estimated-value-${propertyId}`}>Est. Value</Label>
                                  <div className="flex items-center gap-1">
                                    {/* Zillow */}
                                    <div className="flex items-center gap-1">
                                      <Button
                                        type="button"
                                        variant="ghost"
                                        size="sm"
                                        className="p-1 h-auto text-blue-600 hover:text-blue-800 no-default-hover-elevate no-default-active-elevate"
                                        onClick={() => {
                                          const properties = form.watch('property.properties') || [];
                                          const investmentIndex = properties.findIndex(p => p.use === 'investment' && p.id === propertyId);
                                          openValuationDialog('zillow', investmentIndex >= 0 ? investmentIndex : 0);
                                        }}
                                        onMouseEnter={(e) => {
                                          const properties = form.watch('property.properties') || [];
                                          const investmentIndex = properties.findIndex(p => p.use === 'investment' && p.id === propertyId);
                                          handleValuationHover('zillow', investmentIndex >= 0 ? investmentIndex : 0, e);
                                        }}
                                        onMouseLeave={handleValuationHoverLeave}
                                        data-testid={`button-investment-property-zillow-valuation-${propertyId}`}
                                        title="Enter Zillow valuation manually"
                                      >
                                        <SiZillow className="h-4 w-4" />
                                      </Button>
                                    </div>
                                    {/* Realtor */}
                                    <div className="flex items-center gap-1">
                                      <Button
                                        type="button"
                                        variant="ghost"
                                        size="sm"
                                        className="p-1 h-auto text-purple-600 hover:text-purple-800 no-default-hover-elevate no-default-active-elevate"
                                        onClick={() => {
                                          const properties = form.watch('property.properties') || [];
                                          const investmentIndex = properties.findIndex(p => p.use === 'investment' && p.id === propertyId);
                                          openValuationDialog('realtor', investmentIndex >= 0 ? investmentIndex : 0);
                                        }}
                                        onMouseEnter={(e) => {
                                          const properties = form.watch('property.properties') || [];
                                          const investmentIndex = properties.findIndex(p => p.use === 'investment' && p.id === propertyId);
                                          handleValuationHover('realtor', investmentIndex >= 0 ? investmentIndex : 0, e);
                                        }}
                                        onMouseLeave={handleValuationHoverLeave}
                                        data-testid={`button-investment-property-realtor-valuation-${propertyId}`}
                                        title="Enter Realtor.com valuation manually"
                                      >
                                        <MdRealEstateAgent className="h-4 w-4" />
                                      </Button>
                                    </div>
                                    {/* Redfin */}
                                    <div className="flex items-center gap-1">
                                      <Button
                                        type="button"
                                        variant="ghost"
                                        size="sm"
                                        className="p-1 h-auto text-red-600 hover:text-red-800 no-default-hover-elevate no-default-active-elevate"
                                        onClick={() => {
                                          const properties = form.watch('property.properties') || [];
                                          const investmentIndex = properties.findIndex(p => p.use === 'investment' && p.id === propertyId);
                                          openValuationDialog('redfin', investmentIndex >= 0 ? investmentIndex : 0);
                                        }}
                                        onMouseEnter={(e) => {
                                          const properties = form.watch('property.properties') || [];
                                          const investmentIndex = properties.findIndex(p => p.use === 'investment' && p.id === propertyId);
                                          handleValuationHover('redfin', investmentIndex >= 0 ? investmentIndex : 0, e);
                                        }}
                                        onMouseLeave={handleValuationHoverLeave}
                                        data-testid={`button-investment-property-redfin-valuation-${propertyId}`}
                                        title="Enter Redfin valuation manually"
                                      >
                                        <FaHome className="h-4 w-4" />
                                      </Button>
                                      <Button
                                        type="button"
                                        variant="ghost"
                                        size="sm"
                                        className="p-1 h-auto text-blue-600 hover:text-blue-800"
                                        onClick={() => {
                                          const properties = form.watch('property.properties') || [];
                                          const investmentIndex = properties.findIndex(p => p.use === 'investment' && p.id === propertyId);
                                          openValuationSummary(investmentIndex >= 0 ? investmentIndex : 0);
                                        }}
                                        data-testid={`button-investment-property-valuation-info-${propertyId}`}
                                        title="View all valuation estimates"
                                      >
                                        <Info className="h-3 w-3" />
                                      </Button>
                                    </div>
                                  </div>
                                </div>
                                <CurrencyInput
                                  form={form}
                                  name={(() => {
                                    const properties = form.watch('property.properties') || [];
                                    const investmentIndex = properties.findIndex(p => p.use === 'investment' && p.id === propertyId);
                                    return `property.properties.${investmentIndex >= 0 ? investmentIndex : 0}.estimatedValue` as const;
                                  })()}
                                  id={`investment-property-estimated-value-${propertyId}`}
                                  placeholder="$0.00"
                                  data-testid={`input-investment-property-estimated-value-${propertyId}`}
                                />
                              </div>
                              
                              <div className="space-y-2 md:col-span-2">
                                <div className="flex items-center gap-2 min-h-8">
                                  <Label htmlFor={`investment-property-appraised-value-${propertyId}`}>Appraised Value</Label>
                                  <Button
                                    type="button"
                                    variant="ghost"
                                    size="sm"
                                    className="p-1 h-auto"
                                    title="Appraised Property Value"
                                    data-testid={`button-investment-property-appraised-value-info-${propertyId}`}
                                  >
                                    {(() => {
                                      const properties = form.watch('property.properties') || [];
                                      const investmentIndex = properties.findIndex(p => p.use === 'investment' && p.id === propertyId);
                                      return <AppraisalIcon index={investmentIndex >= 0 ? investmentIndex : 0} control={form.control} />;
                                    })()}
                                  </Button>
                                </div>
                                <CurrencyInput
                                  form={form}
                                  name={(() => {
                                    const properties = form.watch('property.properties') || [];
                                    const investmentIndex = properties.findIndex(p => p.use === 'investment' && p.id === propertyId);
                                    return `property.properties.${investmentIndex >= 0 ? investmentIndex : 0}.appraisedValue` as const;
                                  })()}
                                  id={`investment-property-appraised-value-${propertyId}`}
                                  placeholder="$0.00"
                                  data-testid={`input-investment-property-appraised-value-${propertyId}`}
                                  shadowColor={(() => {
                                    const properties = form.watch('property.properties') || [];
                                    const investmentIndex = properties.findIndex(p => p.use === 'investment' && p.id === propertyId);
                                    const estimatedValue = form.watch(`property.properties.${investmentIndex >= 0 ? investmentIndex : 0}.estimatedValue` as const) || '';
                                    const appraisedValue = form.watch(`property.properties.${investmentIndex >= 0 ? investmentIndex : 0}.appraisedValue` as const) || '';
                                    return getValueComparisonColor(estimatedValue, appraisedValue).shadowColor;
                                  })()}
                                />
                              </div>
                              
                              <div className="space-y-2 md:col-span-2">
                                <div className="flex items-center gap-2 min-h-8">
                                  <div className="flex items-center gap-2">
                                    <Label htmlFor={`investment-property-active-secured-loan-${propertyId}`}>Secured Loan</Label>
                                    {(() => {
                                      // Check ALL loans for attachment to this property
                                      const properties = form.watch('property.properties') || [];
                                      const investmentIndex = properties.findIndex(p => p.use === 'investment' && p.id === propertyId);
                                      const currentProperty = investmentIndex >= 0 ? properties[investmentIndex] : null;
                                      
                                      // Check current loan
                                      const currentLoanAttached = form.watch('currentLoan.attachedToProperty');
                                      const isCurrentLoanAttached = Boolean(currentLoanAttached && currentProperty?.id && currentLoanAttached === currentProperty.id);
                                      
                                      // Check second loan
                                      const secondLoanAttached = form.watch('secondLoan.attachedToProperty');
                                      const isSecondLoanAttached = Boolean(secondLoanAttached && currentProperty?.id && secondLoanAttached === currentProperty.id);
                                      
                                      // Check third loan
                                      const thirdLoanAttached = form.watch('thirdLoan.attachedToProperty');
                                      const isThirdLoanAttached = Boolean(thirdLoanAttached && currentProperty?.id && thirdLoanAttached === currentProperty.id);
                                      
                                      // Check other additional loans (loan4, loan5, etc.)
                                      const additionalLoansData = additionalLoans || [];
                                      const isOtherAdditionalLoanAttached = additionalLoansData.slice(1).some(loan => {
                                        const attachedPropertyId = getDyn(`${loan.id}.attachedToProperty`);
                                        return Boolean(attachedPropertyId && currentProperty?.id && attachedPropertyId === currentProperty.id);
                                      });
                                      
                                      const hasAnyLoanAttached = isCurrentLoanAttached || isSecondLoanAttached || isThirdLoanAttached || isOtherAdditionalLoanAttached;
                                      
                                      return (
                                        <div className="flex items-center gap-1">
                                          <div 
                                            className={`w-4 h-4 rounded-full border-2 cursor-pointer flex items-center justify-center ${
                                              isCurrentLoanAttached
                                                ? 'bg-blue-500 border-blue-500 hover:bg-blue-600'
                                                : 'bg-gray-200 border-gray-300'
                                            }`}
                                            style={{
                                              backgroundColor: isCurrentLoanAttached ? '#3b82f6' : '#e5e7eb',
                                              borderColor: isCurrentLoanAttached ? '#3b82f6' : '#d1d5db'
                                            }}
                                            onClick={() => {
                                              if (isCurrentLoanAttached) {
                                                setIsCurrentLoanPreviewOpen(true);
                                              }
                                            }}
                                            title={isCurrentLoanAttached ? "View Current Loan Details" : ""}
                                            data-testid={`indicator-investment-property-secured-loan-1-${propertyId}`}
                                          >
                                            {isCurrentLoanAttached && (
                                              <span className="text-xs font-semibold text-white">P</span>
                                            )}
                                          </div>
                                          <div 
                                            className={`w-4 h-4 rounded-full border-2 cursor-pointer flex items-center justify-center ${
                                              isSecondLoanAttached
                                                ? 'bg-purple-500 border-purple-500 hover:bg-purple-600'
                                                : 'bg-gray-200 border-gray-300'
                                            }`}
                                            style={{
                                              backgroundColor: isSecondLoanAttached ? '#8b5cf6' : '#e5e7eb',
                                              borderColor: isSecondLoanAttached ? '#8b5cf6' : '#d1d5db'
                                            }}
                                            onClick={() => {
                                              if (isSecondLoanAttached) {
                                                setIsCurrentSecondLoanPreviewOpen(true);
                                              }
                                            }}
                                            title={isSecondLoanAttached ? "View Current Loan 2 Details" : ""}
                                            data-testid={`indicator-investment-property-secured-loan-2-${propertyId}`}
                                          >
                                            {isSecondLoanAttached && (
                                              <span className="text-xs font-semibold text-white">S</span>
                                            )}
                                          </div>
                                          <div 
                                            className={`w-4 h-4 rounded-full border-2 cursor-pointer flex items-center justify-center ${
                                              isThirdLoanAttached
                                                ? 'bg-orange-500 border-orange-500 hover:bg-orange-600'
                                                : 'bg-gray-200 border-gray-300'
                                            }`}
                                            style={{
                                              backgroundColor: isThirdLoanAttached ? '#f97316' : '#e5e7eb',
                                              borderColor: isThirdLoanAttached ? '#f97316' : '#d1d5db'
                                            }}
                                            onClick={() => {
                                              if (isThirdLoanAttached) {
                                                setIsCurrentThirdLoanPreviewOpen(true);
                                              }
                                            }}
                                            title={isThirdLoanAttached ? "View Current Third Loan Details" : ""}
                                            data-testid={`indicator-investment-property-secured-loan-3-${propertyId}`}
                                          >
                                            {isThirdLoanAttached && (
                                              <span className="text-xs font-semibold text-white">T</span>
                                            )}
                                          </div>
                                        </div>
                                      );
                                    })()}
                                  </div>
                                </div>
                                {(() => {
                                  // Automatic loan detection logic for Investment Property
                                  const properties = form.watch('property.properties') || [];
                                  const investmentIndex = properties.findIndex(p => p.use === 'investment' && p.id === propertyId);
                                  const currentProperty = investmentIndex >= 0 ? properties[investmentIndex] : null;
                                  
                                  if (!currentProperty?.id) return (
                                    <div className="flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background cursor-default">
                                      <span className="text-muted-foreground">Attach</span>
                                    </div>
                                  );
                                  
                                  // Check all loans for attachment to this property
                                  const attachedLoans = [];
                                  
                                  // Check current loan
                                  const currentLoanAttached = form.watch('currentLoan.attachedToProperty');
                                  if (currentLoanAttached && currentLoanAttached === currentProperty.id) {
                                    attachedLoans.push('Current Primary Loan');
                                  }
                                  
                                  // Check second loan
                                  const secondLoanAttached = form.watch('secondLoan.attachedToProperty');
                                  if (secondLoanAttached && secondLoanAttached === currentProperty.id) {
                                    attachedLoans.push('Current Second Loan');
                                  }
                                  
                                  // Check third loan
                                  const thirdLoanAttached = form.watch('thirdLoan.attachedToProperty');
                                  if (thirdLoanAttached && thirdLoanAttached === currentProperty.id) {
                                    attachedLoans.push('Current Third Loan');
                                  }
                                  
                                  // Check other additional loans
                                  const additionalLoansData = additionalLoans || [];
                                  additionalLoansData.slice(1).forEach((loan, index) => {
                                    const attachedPropertyId = getDyn(`${loan.id}.attachedToProperty`);
                                    if (attachedPropertyId && attachedPropertyId === currentProperty.id) {
                                      attachedLoans.push(`Current Loan ${index + 4}`);
                                    }
                                  });
                                  
                                  // Determine display text
                                  let displayText = 'Attach';
                                  if (attachedLoans.length === 1) {
                                    displayText = attachedLoans[0];
                                  } else if (attachedLoans.length === 2) {
                                    displayText = '1st & 2nd Loan';
                                  } else if (attachedLoans.length === 3) {
                                    displayText = 'Three Loans';
                                  } else if (attachedLoans.length > 3) {
                                    displayText = `${attachedLoans.length} Loans`;
                                  }
                                  
                                  const hasLoansAttached = attachedLoans.length > 0;
                                  
                                  return (
                                    <Select>
                                      <SelectTrigger data-testid={`select-investment-property-secured-loan-${propertyId}`}>
                                        <SelectValue placeholder={displayText} />
                                      </SelectTrigger>
                                      <SelectContent>
                                        <SelectItem value="paid-off">Paid Off</SelectItem>
                                      </SelectContent>
                                    </Select>
                                  );
                                })()}
                              </div>
                            </div>

                          </div>
                        </CardContent>
                      </CollapsibleContent>
                    </Collapsible>
                  </Card>
                );
              })}

              {/* Dynamic Property Cards - Remaining Types (excluding Home Purchase which is now handled above) */}
              {sortPropertiesByHierarchy(form.watch('property.properties') || [])
                .filter(property => property.use !== 'primary' && property.use !== 'second-home' && property.use !== 'investment' && property.use !== 'home-purchase') // Exclude all handled property types
                .map((property, index) => {
                const propertyId = property.id || `property-${index}`;
                const isOpen = propertyCardStates[propertyId] ?? true;
                
                // Find the actual index in the full properties array using stable ID
                const fullProperties = form.watch('property.properties') || [];
                const actualPropertyIndex = fullProperties.findIndex(p => p.id === property.id);
                
                // Guard: Skip rendering if we can't find the property in the form state
                if (actualPropertyIndex < 0) {
                  console.warn(`Property ${propertyId} not found in form state, skipping render`);
                  return null;
                }
                
                const getPropertyTitle = () => {
                  const typeLabels = {
                    'home-purchase': 'Home Purchase',
                    'primary': 'Primary Residence',
                    'second-home': 'Second Home',
                    'investment': 'Investment Property'
                  };
                  const baseTitle = typeLabels[property.use as keyof typeof typeLabels] || 'Property';
                  const sameTypeCount = (form.watch('property.properties') || [])
                    .filter(p => p.use === property.use)
                    .findIndex(p => p.id === property.id) + 1;
                  return (property.use === 'primary' || property.use === 'home-purchase' || property.use === 'second-home' || property.use === 'investment') ? baseTitle : `${baseTitle} ${sameTypeCount}`;
                };

                return (
                  <Card key={propertyId} className={`border-l-4 transition-colors duration-200 ${
                    property.use === 'home-purchase' ? 'border-l-cyan-500 hover:border-cyan-500 focus-within:border-cyan-500' :
                    property.use === 'primary' ? 'border-l-green-500 hover:border-green-500 focus-within:border-green-500' : 
                    property.use === 'second-home' ? 'border-l-blue-500 hover:border-blue-500 focus-within:border-blue-500' : 
                    property.use === 'investment' ? 'border-l-purple-500 hover:border-purple-500 focus-within:border-purple-500' : ''
                  }`}>
                    <Collapsible 
                      open={isOpen} 
                      onOpenChange={(open) => setPropertyCardStates(prev => ({ ...prev, [propertyId]: open }))}
                    >
                      <CardHeader>
                        <div className="flex items-center justify-between">
                          <div className="flex items-center gap-8">
                            <CardTitle className="flex items-center gap-2">
                              {getPropertyTitle()}
                              {property.isSubject && (
                                <span className="text-white px-2 py-1 rounded text-xs font-medium" style={{ backgroundColor: '#1a3373' }}>
                                  Subject Property
                                </span>
                              )}
                            </CardTitle>
                          </div>
                          <div className="flex items-center gap-2">
                            {/* Add/Remove buttons for multi-property types */}
                            {(property.use === 'second-home' || property.use === 'investment') && (
                              <div className="flex gap-1">
                                <Button
                                  type="button"
                                  variant="outline"
                                  size="sm"
                                  onClick={() => setAddPropertyDialog({ isOpen: true, propertyType: property.use as 'second-home' | 'investment' })}
                                  data-testid={`button-add-${property.use}`}
                                  title="add"
                                >
                                  <Plus className="h-3 w-3" />
                                </Button>
                                <Button
                                  type="button"
                                  variant="outline"
                                  size="sm"
                                  onClick={() => removeProperty(propertyId)}
                                  data-testid={`button-remove-${property.use}-${propertyId}`}
                                  title="Delete"
                                >
                                  <Minus className="h-3 w-3" />
                                </Button>
                              </div>
                            )}
                            {/* Home Purchase Remove button - Primary Residence style */}
                            {property.use === 'home-purchase' && (
                              <Button
                                type="button"
                                variant="outline"
                                size="sm"
                                onClick={() => setDeleteHomePurchaseDialog({ isOpen: true, cardId: propertyId })}
                                className="hover:bg-red-500 hover:text-white"
                                data-testid="button-delete-home-purchase-property"
                                title="Delete Home Purchase"
                              >
                                <Minus className="h-4 w-4 mr-2" />
                                Remove
                              </Button>
                            )}
                            <CollapsibleTrigger asChild>
                              <Button 
                                variant="ghost" 
                                size="sm" 
                                className="hover:bg-orange-500 hover:text-white" 
                                data-testid={`button-toggle-property-${propertyId}`}
                                title={isOpen ? 'Minimize' : 'Expand'}
                                key={`property-toggle-${propertyId}-${isOpen}`}
                              >
                                {isOpen ? <Minus className="h-4 w-4" /> : <Plus className="h-4 w-4" />}
                              </Button>
                            </CollapsibleTrigger>
                          </div>
                        </div>
                      </CardHeader>
                      
                      <CollapsibleContent>
                        <CardContent>
                          <div className="space-y-6">
                            {/* Subject Property Question - Moved to top */}
                            <Card className={`bg-muted ${
                              showSubjectPropertyAnimation[propertyId] ? 'animate-roll-down-subject-property' : ''
                            }`}>
                              <CardContent className="pt-6">
                                <div className="flex justify-between items-center">
                                  <div className="space-y-3 flex-1">
                                    <Label className="text-base font-semibold">Is this the subject property that will secure the new loan?</Label>
                                    <div className="flex gap-4">
                                      <div className="flex items-center space-x-2">
                                        <input
                                          type="radio"
                                          id={`subject-yes-${propertyId}`}
                                          name={`subject-${propertyId}`}
                                          checked={property.isSubject === true}
                                          onChange={() => setSubjectProperty(propertyId)}
                                          data-testid={`radio-subject-yes-${propertyId}`}
                                        />
                                        <Label htmlFor={`subject-yes-${propertyId}`}>Yes</Label>
                                      </div>
                                      
                                      <div className="flex items-center space-x-2">
                                        <input
                                          type="radio"
                                          id={`subject-no-${propertyId}`}
                                          name={`subject-${propertyId}`}
                                          checked={property.isSubject === false}
                                          onChange={() => {
                                            const properties = form.watch('property.properties') || [];
                                            const updatedProperties = properties.map(p => 
                                              p.id === propertyId ? { ...p, isSubject: false } : p
                                            );
                                            form.setValue('property.properties', updatedProperties);
                                          }}
                                          data-testid={`radio-subject-no-${propertyId}`}
                                        />
                                        <Label htmlFor={`subject-no-${propertyId}`}>No</Label>
                                      </div>
                                    </div>
                                  </div>
                                  
                                  {/* New button positioned more to the left */}
                                  <div className="flex items-center mr-8">
                                    <Button
                                      type="button"
                                      variant={(() => {
                                        const currentProperty = property;
                                        
                                        // Check which loans are attached to this property for counter
                                        const currentLoanAttached = form.watch('currentLoan.attachedToProperty');
                                        const isCurrentLoanAttached = Boolean(currentLoanAttached && currentProperty?.id && currentLoanAttached === currentProperty.id);
                                        
                                        const secondLoanAttached = form.watch('secondLoan.attachedToProperty');
                                        const isSecondLoanAttached = Boolean(secondLoanAttached && currentProperty?.id && secondLoanAttached === currentProperty.id);
                                        
                                        // Check third loan
                                        const thirdLoanAttached = form.watch('thirdLoan.attachedToProperty');
                                        const isThirdLoanAttached = Boolean(thirdLoanAttached && currentProperty?.id && thirdLoanAttached === currentProperty.id);
                                        
                                        // Count active loans
                                        let activeLoansCount = 0;
                                        if (isCurrentLoanAttached) activeLoansCount++;
                                        if (isSecondLoanAttached) activeLoansCount++;
                                        if (isThirdLoanAttached) activeLoansCount++;
                                        
                                        return activeLoansCount > 0 ? "default" : "outline";
                                      })()}
                                      size="sm"
                                      onClick={() => {
                                        // Add your button functionality here
                                        console.log('Home Purchase Loans button clicked');
                                      }}
                                      style={(() => {
                                        const currentProperty = property;
                                        
                                        // Check which loans are attached to this property for counter
                                        const currentLoanAttached = form.watch('currentLoan.attachedToProperty');
                                        const isCurrentLoanAttached = Boolean(currentLoanAttached && currentProperty?.id && currentLoanAttached === currentProperty.id);
                                        
                                        const secondLoanAttached = form.watch('secondLoan.attachedToProperty');
                                        const isSecondLoanAttached = Boolean(secondLoanAttached && currentProperty?.id && secondLoanAttached === currentProperty.id);
                                        
                                        // Check third loan
                                        const thirdLoanAttached = form.watch('thirdLoan.attachedToProperty');
                                        const isThirdLoanAttached = Boolean(thirdLoanAttached && currentProperty?.id && thirdLoanAttached === currentProperty.id);
                                        
                                        // Count active loans
                                        let activeLoansCount = 0;
                                        if (isCurrentLoanAttached) activeLoansCount++;
                                        if (isSecondLoanAttached) activeLoansCount++;
                                        if (isThirdLoanAttached) activeLoansCount++;
                                        
                                        return activeLoansCount > 0 
                                          ? { backgroundColor: '#d1d5db', borderColor: '#d1d5db', color: '#374151' } 
                                          : {};
                                      })()}
                                      className={(() => {
                                        const currentProperty = property;
                                        
                                        // Check which loans are attached to this property for counter
                                        const currentLoanAttached = form.watch('currentLoan.attachedToProperty');
                                        const isCurrentLoanAttached = Boolean(currentLoanAttached && currentProperty?.id && currentLoanAttached === currentProperty.id);
                                        
                                        const secondLoanAttached = form.watch('secondLoan.attachedToProperty');
                                        const isSecondLoanAttached = Boolean(secondLoanAttached && currentProperty?.id && secondLoanAttached === currentProperty.id);
                                        
                                        // Check third loan
                                        const thirdLoanAttached = form.watch('thirdLoan.attachedToProperty');
                                        const isThirdLoanAttached = Boolean(thirdLoanAttached && currentProperty?.id && thirdLoanAttached === currentProperty.id);
                                        
                                        // Count active loans
                                        let activeLoansCount = 0;
                                        if (isCurrentLoanAttached) activeLoansCount++;
                                        if (isSecondLoanAttached) activeLoansCount++;
                                        if (isThirdLoanAttached) activeLoansCount++;
                                        
                                        return activeLoansCount > 0 
                                          ? "w-24 text-white border-2" 
                                          : "w-24 hover:bg-red-500 hover:text-white";
                                      })()}
                                      data-testid={`button-home-purchase-grey-box-action-${propertyId}`}
                                      title="Loans"
                                    >
                                      {(() => {
                                        const currentProperty = property;
                                        
                                        // Check which loans are attached to this property for counter
                                        const currentLoanAttached = form.watch('currentLoan.attachedToProperty');
                                        const isCurrentLoanAttached = Boolean(currentLoanAttached && currentProperty?.id && currentLoanAttached === currentProperty.id);
                                        
                                        const secondLoanAttached = form.watch('secondLoan.attachedToProperty');
                                        const isSecondLoanAttached = Boolean(secondLoanAttached && currentProperty?.id && secondLoanAttached === currentProperty.id);
                                        
                                        // Check third loan
                                        const thirdLoanAttached = form.watch('thirdLoan.attachedToProperty');
                                        const isThirdLoanAttached = Boolean(thirdLoanAttached && currentProperty?.id && thirdLoanAttached === currentProperty.id);
                                        
                                        // Count active loans
                                        let activeLoansCount = 0;
                                        if (isCurrentLoanAttached) activeLoansCount++;
                                        if (isSecondLoanAttached) activeLoansCount++;
                                        if (isThirdLoanAttached) activeLoansCount++;
                                        
                                        return (
                                          <span>
                                            <span className="mr-3 font-semibold">{activeLoansCount}</span>
                                            <span>{activeLoansCount === 1 ? 'Loan' : 'Loans'}</span>
                                          </span>
                                        );
                                      })()}
                                    </Button>
                                  </div>
                                </div>
                              </CardContent>
                            </Card>

                            {/* Property Address - Row 1: Street Address, Unit/Apt, City, State, ZIP Code, County, Property Type */}
                            <div className="grid grid-cols-1 md:grid-cols-12 gap-4">
                              <div className="space-y-2 md:col-span-3">
                                <Label htmlFor={`property-address-street-${propertyId}`}>Street Address *</Label>
                                <Input
                                  id={`property-address-street-${propertyId}`}
                                  {...form.register(`property.properties.${actualPropertyIndex}.address.street` as const)}
                                  data-testid={`input-property-street-${propertyId}`}
                                  onBlur={() => {
                                    // Trigger auto-fetch after a delay to allow other fields to be filled
                                    setTimeout(() => handleAddressChange(actualPropertyIndex), 1000);
                                  }}
                                />
                              </div>
                              
                              <div className="space-y-2 md:col-span-1">
                                <Label htmlFor={`property-address-unit-${propertyId}`}>Unit/Apt</Label>
                                <Input
                                  id={`property-address-unit-${propertyId}`}
                                  {...form.register(`property.properties.${actualPropertyIndex}.address.unit` as const)}
                                  data-testid={`input-property-unit-${propertyId}`}
                                />
                              </div>
                              
                              <div className="space-y-2 md:col-span-2">
                                <Label htmlFor={`property-address-city-${propertyId}`}>City *</Label>
                                <Input
                                  id={`property-address-city-${propertyId}`}
                                  {...form.register(`property.properties.${actualPropertyIndex}.address.city` as const)}
                                  data-testid={`input-property-city-${propertyId}`}
                                  onBlur={() => {
                                    // Trigger auto-fetch after a delay
                                    setTimeout(() => handleAddressChange(actualPropertyIndex), 1000);
                                  }}
                                />
                              </div>
                              
                              <div className="space-y-2 md:col-span-1">
                                <Label htmlFor={`property-address-state-${propertyId}`}>State *</Label>
                                <Select
                                  value={form.watch(`property.properties.${actualPropertyIndex}.address.state` as const) || ''}
                                  onValueChange={(value) => form.setValue(`property.properties.${actualPropertyIndex}.address.state` as const, value)}
                                >
                                  <SelectTrigger data-testid={`select-property-state-${propertyId}`}>
                                    <SelectValue placeholder="Select" />
                                  </SelectTrigger>
                                  <SelectContent>
                                    {US_STATES.map((state) => (
                                      <SelectItem key={state.value} value={state.value}>
                                        {state.value}
                                      </SelectItem>
                                    ))}
                                  </SelectContent>
                                </Select>
                              </div>
                              
                              <div className="space-y-2 md:col-span-1">
                                <Label htmlFor={`property-address-zip-${propertyId}`}>ZIP Code *</Label>
                                <Input
                                  id={`property-address-zip-${propertyId}`}
                                  {...form.register(`property.properties.${actualPropertyIndex}.address.zip` as const)}
                                  data-testid={`input-property-zip-${propertyId}`}
                                />
                              </div>
                              
                              <div className="space-y-2 md:col-span-2">
                                <Label htmlFor={`property-address-county-${propertyId}`}>County</Label>
                                <Input
                                  id={`property-address-county-${propertyId}`}
                                  {...form.register(`property.properties.${actualPropertyIndex}.address.county` as const)}
                                  data-testid={`input-property-county-${propertyId}`}
                                />
                              </div>
                              
                              <div className="space-y-2 md:col-span-2">
                                <Label htmlFor={`property-type-${propertyId}`}>Property Type</Label>
                                <Select
                                  value={form.watch(`property.properties.${index}.propertyType` as const) || ''}
                                  onValueChange={(value) => form.setValue(`property.properties.${index}.propertyType` as const, value)}
                                >
                                  <SelectTrigger data-testid={`select-property-type-${propertyId}`}>
                                    <SelectValue placeholder="Select" />
                                  </SelectTrigger>
                                  <SelectContent>
                                    <SelectItem value="single-family">Single Family</SelectItem>
                                    <SelectItem value="condo">Condo</SelectItem>
                                    <SelectItem value="townhouse">Townhouse</SelectItem>
                                    <SelectItem value="duplex">Duplex</SelectItem>
                                    <SelectItem value="multi-family">Multi-Family</SelectItem>
                                    <SelectItem value="mobile-home-sw">Mobile Home SW</SelectItem>
                                    <SelectItem value="mobile-home-dw">Mobile Home DW</SelectItem>
                                    <SelectItem value="other">Other</SelectItem>
                                  </SelectContent>
                                </Select>
                              </div>
                            </div>

                            {/* Property Details - Row 2: Purchase Price, Owned Since, Title Held By, Estimated Property Value, Appraised Value, Secured First Loan, Secured Second Loan */}
                            <div className="grid grid-cols-1 md:grid-cols-12 gap-4 mt-4">
                              <div className="space-y-2 md:col-span-2">
                                <div className="flex items-center gap-2">
                                  <Label htmlFor={`property-purchase-price-${propertyId}`}>Purchase Price</Label>
                                  <Button
                                    type="button"
                                    variant="ghost"
                                    size="sm"
                                    className="p-1 h-auto text-black hover:text-gray-600"
                                    title="Purchase Property Value"
                                    data-testid={`button-purchase-price-info-${propertyId}`}
                                  >
                                    <DollarSign className="h-4 w-4" />
                                  </Button>
                                </div>
                                <Input
                                  id={`property-purchase-price-${propertyId}`}
                                  value={form.watch(`property.properties.${index}.purchasePrice` as const) || ''}
                                  onChange={(e) => {
                                    let value = e.target.value.replace(/[^\d.]/g, '');
                                    if (value) {
                                      const numValue = parseFloat(value);
                                      if (!isNaN(numValue)) {
                                        value = `$${numValue.toLocaleString('en-US', {minimumFractionDigits: 2, maximumFractionDigits: 2})}`;
                                      }
                                    }
                                    form.setValue(`property.properties.${index}.purchasePrice` as const, value);
                                  }}
                                  placeholder="$0.00"
                                  data-testid={`input-property-purchase-price-${propertyId}`}
                                />
                              </div>
                              
                              <div className="space-y-2 md:col-span-2">
                                <div className="min-h-5 flex items-center gap-2">
                                  <Label htmlFor={`property-purpose-${propertyId}`}>Property Purpose</Label>
                                  <Tooltip>
                                    <TooltipTrigger asChild>
                                      <Button
                                        type="button"
                                        variant="ghost"
                                        size="sm"
                                        className="p-1 h-auto text-blue-600 hover:text-blue-800"
                                        onClick={() => {
                                          toast({
                                            title: "Purchase Information",
                                            description: "Please see purchase and record dates in title report located in vendor page.",
                                            duration: 5000,
                                          });
                                        }}
                                        data-testid={`button-property-purpose-info-${propertyId}`}
                                      >
                                        <Info className="h-4 w-4" />
                                      </Button>
                                    </TooltipTrigger>
                                    <TooltipContent side="top" sideOffset={15} className="text-sm">
                                      Purchase Information
                                    </TooltipContent>
                                  </Tooltip>
                                </div>
                                <Select>
                                  <SelectTrigger data-testid={`select-property-purpose-${propertyId}`}>
                                    <SelectValue placeholder="Select" />
                                  </SelectTrigger>
                                  <SelectContent>
                                    <SelectItem value="select">Select</SelectItem>
                                    <SelectItem value="primary">Primary</SelectItem>
                                    <SelectItem value="second">Second</SelectItem>
                                    <SelectItem value="investment">Investment</SelectItem>
                                  </SelectContent>
                                </Select>
                              </div>
                              
                              <div className="space-y-2 md:col-span-2">
                                <div className="min-h-5 flex items-center gap-2">
                                  <Label htmlFor={`property-title-held-by-${propertyId}`}>Title to be Held By</Label>
                                  <Tooltip>
                                    <TooltipTrigger asChild>
                                      <Button
                                        type="button"
                                        variant="ghost"
                                        size="sm"
                                        className="p-1 h-auto text-blue-600 hover:text-blue-800"
                                        onClick={() => {
                                          toast({
                                            title: "Title Information",
                                            description: "Please see title report in vendor page.",
                                            duration: 5000,
                                          });
                                        }}
                                        data-testid={`button-title-held-info-${propertyId}`}
                                      >
                                        <Info className="h-4 w-4" />
                                      </Button>
                                    </TooltipTrigger>
                                    <TooltipContent side="top" sideOffset={15} className="text-sm">
                                      Title Information
                                    </TooltipContent>
                                  </Tooltip>
                                </div>
                                <Select
                                  value={form.watch(`property.properties.${index}.ownedHeldBy` as const) || ''}
                                  onValueChange={(value: string) => {
                                    form.setValue(`property.properties.${index}.ownedHeldBy` as const, value as any);
                                  }}
                                >
                                  <SelectTrigger data-testid={`select-property-title-held-by-${propertyId}`}>
                                    <SelectValue placeholder="Select" />
                                  </SelectTrigger>
                                  <SelectContent>
                                    <SelectItem value="select">Select</SelectItem>
                                    <SelectItem value="borrower">Borrower</SelectItem>
                                    <SelectItem value="borrowers">Borrowers</SelectItem>
                                    <SelectItem value="co-borrower">Co-Borrower</SelectItem>
                                    <SelectItem value="other">Other</SelectItem>
                                  </SelectContent>
                                </Select>
                              </div>
                              
                              <div className="space-y-2 md:col-span-2">
                                <div className="flex items-center gap-2">
                                  <Label htmlFor={`property-estimated-value-${propertyId}`}>Est. Value</Label>
                                  <div className="flex items-center gap-1">
                                    {/* Zillow */}
                                    <div className="flex items-center gap-1">
                                      <Button
                                        type="button"
                                        variant="ghost"
                                        size="sm"
                                        className="p-1 h-auto text-blue-600 hover:text-blue-800 no-default-hover-elevate no-default-active-elevate"
                                        onClick={() => openValuationDialog('zillow', index)}
                                        onMouseEnter={(e) => handleValuationHover('zillow', index, e)}
                                        onMouseLeave={handleValuationHoverLeave}
                                        data-testid={`button-zillow-valuation-${propertyId}`}
                                        title="Enter Zillow valuation manually"
                                      >
                                        <SiZillow className="h-4 w-4" />
                                      </Button>
                                    </div>
                                    {/* Realtor */}
                                    <div className="flex items-center gap-1">
                                      <Button
                                        type="button"
                                        variant="ghost"
                                        size="sm"
                                        className="p-1 h-auto text-purple-600 hover:text-purple-800 no-default-hover-elevate no-default-active-elevate"
                                        onClick={() => openValuationDialog('realtor', index)}
                                        onMouseEnter={(e) => handleValuationHover('realtor', index, e)}
                                        onMouseLeave={handleValuationHoverLeave}
                                        data-testid={`button-realtor-valuation-${propertyId}`}
                                        title="Enter Realtor.com valuation manually"
                                      >
                                        <MdRealEstateAgent className="h-4 w-4" />
                                      </Button>
                                    </div>
                                    {/* Redfin */}
                                    <div className="flex items-center gap-1">
                                      <Button
                                        type="button"
                                        variant="ghost"
                                        size="sm"
                                        className="p-1 h-auto text-red-600 hover:text-red-800 no-default-hover-elevate no-default-active-elevate"
                                        onClick={() => openValuationDialog('redfin', index)}
                                        onMouseEnter={(e) => handleValuationHover('redfin', index, e)}
                                        onMouseLeave={handleValuationHoverLeave}
                                        data-testid={`button-redfin-valuation-${propertyId}`}
                                        title="Enter Redfin valuation manually"
                                      >
                                        <FaHome className="h-4 w-4" />
                                      </Button>
                                      <Button
                                        type="button"
                                        variant="ghost"
                                        size="sm"
                                        className="p-1 h-auto text-blue-600 hover:text-blue-800"
                                        onClick={() => openValuationSummary(index)}
                                        data-testid={`button-valuation-info-${propertyId}`}
                                        title="View all valuation estimates"
                                      >
                                        <Info className="h-3 w-3" />
                                      </Button>
                                    </div>
                                  </div>
                                </div>
                                <CurrencyInput
                                  form={form}
                                  name={`property.properties.${index}.estimatedValue` as const}
                                  id={`property-estimated-value-${propertyId}`}
                                  placeholder="$0.00"
                                  data-testid={`input-property-estimated-value-${propertyId}`}
                                />
                              </div>
                              
                              <div className="space-y-2 md:col-span-2">
                                <div className="flex items-center gap-2 min-h-8">
                                  <Label htmlFor={`property-appraised-value-${propertyId}`}>Appraised Value</Label>
                                  <Button
                                    type="button"
                                    variant="ghost"
                                    size="sm"
                                    className="p-1 h-auto"
                                    title="Appraised Property Value"
                                    data-testid={`button-appraised-value-info-${propertyId}`}
                                  >
                                    <AppraisalIcon index={index} control={form.control} />
                                  </Button>
                                </div>
                                <CurrencyInput
                                  form={form}
                                  name={`property.properties.${index}.appraisedValue` as const}
                                  id={`property-appraised-value-${propertyId}`}
                                  placeholder="$0.00"
                                  data-testid={`input-property-appraised-value-${propertyId}`}
                                  shadowColor={(() => {
                                    const estimatedValue = form.watch(`property.properties.${index}.estimatedValue` as const) || '';
                                    const appraisedValue = form.watch(`property.properties.${index}.appraisedValue` as const) || '';
                                    return getValueComparisonColor(estimatedValue, appraisedValue).shadowColor;
                                  })()}
                                />
                              </div>
                              
                              <div className="space-y-2 md:col-span-2">
                                <div className="flex items-center gap-2 min-h-8">
                                  <div className="flex items-center gap-2">
                                    <Label htmlFor={`property-active-secured-loan-${propertyId}`}>Secured Loan</Label>
                                    {(() => {
                                      // Check ALL loans for attachment to this property
                                      const currentProperty = property;
                                      
                                      // Check all Existing Primary Loan cards
                                      const isCurrentLoanAttached = (currentPrimaryLoanCards || []).some(cardId => {
                                        const attachedPropertyId = form.watch(`${cardId}.attachedToProperty`);
                                        return Boolean(attachedPropertyId && currentProperty?.id && attachedPropertyId === currentProperty.id);
                                      });
                                      
                                      // Check all Existing Second Loan cards
                                      const isSecondLoanAttached = (currentSecondLoanCards || []).some(cardId => {
                                        const attachedPropertyId = form.watch(`${cardId}.attachedToProperty`);
                                        return Boolean(attachedPropertyId && currentProperty?.id && attachedPropertyId === currentProperty.id);
                                      });
                                      
                                      // Check all Existing Third Loan cards
                                      const isThirdLoanAttached = (currentThirdLoanCards || []).some(cardId => {
                                        const attachedPropertyId = form.watch(`${cardId}.attachedToProperty`);
                                        return Boolean(attachedPropertyId && currentProperty?.id && attachedPropertyId === currentProperty.id);
                                      });
                                      
                                      // Check other additional loans (loan4, loan5, etc.)
                                      const additionalLoansData = additionalLoans || [];
                                      const isOtherAdditionalLoanAttached = additionalLoansData.slice(1).some(loan => {
                                        const attachedPropertyId = getDyn(`${loan.id}.attachedToProperty`);
                                        return Boolean(attachedPropertyId && currentProperty?.id && attachedPropertyId === currentProperty.id);
                                      });
                                      
                                      const hasAnyLoanAttached = isCurrentLoanAttached || isSecondLoanAttached || isThirdLoanAttached || isOtherAdditionalLoanAttached;
                                      
                                      return (
                                        <div className="flex items-center gap-1">
                                          <div 
                                            className={`w-4 h-4 rounded-full border-2 cursor-pointer flex items-center justify-center ${
                                              isCurrentLoanAttached
                                                ? 'bg-blue-500 border-blue-500 hover:bg-blue-600'
                                                : 'bg-gray-200 border-gray-300'
                                            }`}
                                            style={{
                                              backgroundColor: isCurrentLoanAttached ? '#3b82f6' : '#e5e7eb',
                                              borderColor: isCurrentLoanAttached ? '#3b82f6' : '#d1d5db'
                                            }}
                                            onClick={() => {
                                              if (isCurrentLoanAttached) {
                                                setIsCurrentLoanPreviewOpen(true);
                                              }
                                            }}
                                            title={isCurrentLoanAttached ? "View Current Loan Details" : ""}
                                            data-testid={`indicator-secured-loan-1-${property.id}`}
                                          >
                                            {isCurrentLoanAttached && (
                                              <span className="text-xs font-semibold text-white">P</span>
                                            )}
                                          </div>
                                          <div 
                                            className={`w-4 h-4 rounded-full border-2 cursor-pointer flex items-center justify-center ${
                                              isSecondLoanAttached
                                                ? 'bg-purple-500 border-purple-500 hover:bg-purple-600'
                                                : 'bg-gray-200 border-gray-300'
                                            }`}
                                            style={{
                                              backgroundColor: isSecondLoanAttached ? '#8b5cf6' : '#e5e7eb',
                                              borderColor: isSecondLoanAttached ? '#8b5cf6' : '#d1d5db'
                                            }}
                                            onClick={() => {
                                              if (isSecondLoanAttached) {
                                                setIsCurrentSecondLoanPreviewOpen(true);
                                              }
                                            }}
                                            title={isSecondLoanAttached ? "View Current Loan 2 Details" : ""}
                                            data-testid={`indicator-secured-loan-2-${property.id}`}
                                          >
                                            {isSecondLoanAttached && (
                                              <span className="text-xs font-semibold text-white">S</span>
                                            )}
                                          </div>
                                          <div 
                                            className={`w-4 h-4 rounded-full border-2 cursor-pointer flex items-center justify-center ${
                                              isThirdLoanAttached
                                                ? 'bg-orange-500 border-orange-500 hover:bg-orange-600'
                                                : 'bg-gray-200 border-gray-300'
                                            }`}
                                            style={{
                                              backgroundColor: isThirdLoanAttached ? '#f97316' : '#e5e7eb',
                                              borderColor: isThirdLoanAttached ? '#f97316' : '#d1d5db'
                                            }}
                                            onClick={() => {
                                              if (isThirdLoanAttached) {
                                                setIsCurrentThirdLoanPreviewOpen(true);
                                              }
                                            }}
                                            title={isThirdLoanAttached ? "View Current Third Loan Details" : ""}
                                            data-testid={`indicator-secured-loan-3-${property.id}`}
                                          >
                                            {isThirdLoanAttached && (
                                              <span className="text-xs font-semibold text-white">T</span>
                                            )}
                                          </div>
                                        </div>
                                      );
                                    })()}
                                  </div>
                                  <Button
                                    type="button"
                                    variant="ghost"
                                    size="sm"
                                    className="p-1 h-auto text-blue-600 hover:text-blue-800"
                                    onClick={() => {
                                      toast({
                                        title: "Loan Information",
                                        description: "Please complete loans associated with this property using the loan menu option",
                                        duration: 5000,
                                      });
                                    }}
                                    title="Loan completion instructions"
                                    data-testid={`button-secured-loan-info-${propertyId}`}
                                  >
                                    <Info className="h-4 w-4" />
                                  </Button>
                                </div>
{(() => {
                                  // Dynamic connection display field - checks ALL loans
                                  const currentProperty = property;
                                  
                                  // Check all Existing Primary Loan cards
                                  const isCurrentLoanAttached = (currentPrimaryLoanCards || []).some(cardId => {
                                    const attachedPropertyId = form.watch(`${cardId}.attachedToProperty`);
                                    return Boolean(attachedPropertyId && currentProperty?.id && attachedPropertyId === currentProperty.id);
                                  });
                                  
                                  // Check all Existing Second Loan cards
                                  const isSecondLoanAttached = (currentSecondLoanCards || []).some(cardId => {
                                    const attachedPropertyId = form.watch(`${cardId}.attachedToProperty`);
                                    return Boolean(attachedPropertyId && currentProperty?.id && attachedPropertyId === currentProperty.id);
                                  });
                                  
                                  // Check all Existing Third Loan cards
                                  const isThirdLoanAttached = (currentThirdLoanCards || []).some(cardId => {
                                    const attachedPropertyId = form.watch(`${cardId}.attachedToProperty`);
                                    return Boolean(attachedPropertyId && currentProperty?.id && attachedPropertyId === currentProperty.id);
                                  });
                                  
                                  // Check other additional loans (loan4, loan5, etc.)
                                  const additionalLoansData = additionalLoans || [];
                                  const isOtherAdditionalLoanAttached = additionalLoansData.slice(1).some(loan => {
                                    const attachedPropertyId = getDyn(`${loan.id}.attachedToProperty`);
                                    return Boolean(attachedPropertyId && currentProperty?.id && attachedPropertyId === currentProperty.id);
                                  });
                                  
                                  const hasAnyLoanAttached = isCurrentLoanAttached || isSecondLoanAttached || isThirdLoanAttached || isOtherAdditionalLoanAttached;
                                  const displayValue = hasAnyLoanAttached ? 'Yes' : 'connect';
                                  
                                  return (
                                    <div 
                                      className="flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background cursor-default"
                                      data-testid={`display-property-active-secured-loan-${propertyId}`}
                                    >
                                      <span className={hasAnyLoanAttached ? 'text-foreground' : 'text-muted-foreground'}>
                                        {displayValue}
                                      </span>
                                    </div>
                                  );
                                })()}
                              </div>
                            </div>






                            {/* Third Loan Details Box - Only show when activeThirdLoan is 'yes' and property is primary/second-home */}
                            {(property.use === 'home-purchase' || property.use === 'primary' || property.use === 'second-home') && form.watch(`property.properties.${index}.activeThirdLoan` as const) === 'yes' && (
                            <Card className="border-2 border-dashed border-gray-500">
                              <CardHeader className="flex flex-row items-center justify-between">
                                <CardTitle className="text-lg">Third Loan Details</CardTitle>
                                <Button
                                  type="button"
                                  variant="outline"
                                  size="sm"
                                  onClick={() => removeThirdLoan(index)}
                                  className="hover:bg-orange-500 hover:text-white"
                                  data-testid={`button-remove-third-loan-${propertyId}`}
                                >
                                  <Minus className="h-4 w-4 mr-2" />
                                  Remove
                                </Button>
                              </CardHeader>
                              <CardContent>
                                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                                  <div className="space-y-2">
                                    <Label htmlFor={`property-third-lender-name-${propertyId}`}>Lender Name</Label>
                                    <Input
                                      id={`property-third-lender-name-${propertyId}`}
                                      {...form.register(`property.properties.${index}.thirdLoan.lenderName` as const)}
                                      data-testid={`input-property-third-lender-name-${propertyId}`}
                                    />
                                  </div>
                                  
                                  <div className="space-y-2">
                                    <Label htmlFor={`property-third-loan-number-${propertyId}`}>Loan Number</Label>
                                    <Input
                                      id={`property-third-loan-number-${propertyId}`}
                                      {...form.register(`property.properties.${index}.thirdLoan.loanNumber` as const)}
                                      data-testid={`input-property-third-loan-number-${propertyId}`}
                                    />
                                  </div>
                                  
                                  <div className="space-y-2">
                                    <Label htmlFor={`property-third-mortgage-balance-${propertyId}`}>Mortgage Balance</Label>
                                    <Input
                                      id={`property-third-mortgage-balance-${propertyId}`}
                                      {...form.register(`property.properties.${index}.thirdLoan.mortgageBalance` as const)}
                                      placeholder="$0.00"
                                      data-testid={`input-property-third-mortgage-balance-${propertyId}`}
                                    />
                                  </div>
                                  
                                  <div className="space-y-2">
                                    <Label htmlFor={`property-third-pi-payment-${propertyId}`}>Principal & Interest Payment</Label>
                                    <Input
                                      id={`property-third-pi-payment-${propertyId}`}
                                      {...form.register(`property.properties.${index}.thirdLoan.piPayment` as const)}
                                      placeholder="$0.00"
                                      data-testid={`input-property-third-pi-payment-${propertyId}`}
                                    />
                                  </div>
                                  
                                  <div className="space-y-2">
                                    <Label htmlFor={`property-third-escrow-payment-${propertyId}`}>Other</Label>
                                    <Input
                                      id={`property-third-escrow-payment-${propertyId}`}
                                      {...form.register(`property.properties.${index}.thirdLoan.escrowPayment` as const)}
                                      placeholder="$0.00"
                                      data-testid={`input-property-third-escrow-payment-${propertyId}`}
                                    />
                                  </div>
                                  
                                  <div className="space-y-2">
                                    <Label htmlFor={`property-third-total-monthly-payment-${propertyId}`}>Total Monthly Payment</Label>
                                    <Input
                                      id={`property-third-total-monthly-payment-${propertyId}`}
                                      {...form.register(`property.properties.${index}.thirdLoan.totalMonthlyPayment` as const)}
                                      placeholder="$0.00"
                                      readOnly
                                      className="bg-muted"
                                      data-testid={`input-property-third-total-monthly-payment-${propertyId}`}
                                    />
                                  </div>
                                </div>
                              </CardContent>
                            </Card>
                            )}

                            {/* Add Second Home Button - Only show for second-home properties */}
                            {property.use === 'second-home' && (
                              <div className="flex justify-end mt-6">
                                <Button
                                  type="button"
                                  variant="outline"
                                  size="sm"
                                  onClick={() => addProperty('second-home')}
                                  className="hover:bg-blue-500 hover:text-white"
                                  data-testid={`button-add-second-home-${propertyId}`}
                                >
                                  <Plus className="h-4 w-4 mr-2" />
                                  Add Second Home
                                </Button>
                              </div>
                            )}

                            {/* Add Investment Property Button - Only show for investment properties */}
                            {property.use === 'investment' && (
                              <div className="flex justify-end mt-6">
                                <Button
                                  type="button"
                                  variant="outline"
                                  size="sm"
                                  onClick={() => addProperty('investment')}
                                  className="hover:bg-orange-500 hover:text-white"
                                  data-testid={`button-add-investment-property-${propertyId}`}
                                >
                                  <Plus className="h-4 w-4 mr-2" />
                                  Add Investment Property
                                </Button>
                              </div>
                            )}

                          </div>
                        </CardContent>
                      </CollapsibleContent>
                    </Collapsible>
                  </Card>
                );
              })}

            </TabsContent>


            {/* New Loan Tab */}
            <TabsContent value="loan" className="space-y-6">
              
              {/* Transaction Card - Matching Income Tab Structure */}
              <Card className="transition-all duration-700">
                <CardContent className="grid grid-cols-1 md:grid-cols-4 gap-4 pt-6">
                  <div className="space-y-2">
                    <Label className="text-lg font-semibold">Loan Purpose</Label>
                    <div className="mt-24">
                      <span className="text-muted-foreground" style={{ fontSize: '28px', color: '#1a3373', fontWeight: 'bold' }}>
                        {(() => {
                          // Check if New Refinance Loan card is open
                          const hasRefinanceCards = (newRefinanceLoanCards || []).length > 0;
                          // Check if New Purchase Loan card is open
                          const hasPurchaseCards = (newPurchaseLoanCards || []).length > 0;
                          
                          if (hasRefinanceCards) {
                            const loanPurpose = form.watch('abc.loanPurpose');
                            if (loanPurpose === 'select' || !loanPurpose) return 'Select';
                            if (loanPurpose === 'cash-out') return 'Cash Out';
                            if (loanPurpose === 'rate-reduction') return 'Rate Reduction';
                            if (loanPurpose === 'term-reduction') return 'Term Reduction';
                            if (loanPurpose === 'other') return 'Other';
                            return '';
                          } else if (hasPurchaseCards) {
                            const loanPurpose = form.watch('bbb.loanPurpose');
                            if (loanPurpose === 'select' || !loanPurpose) return 'Select';
                            if (loanPurpose === 'existing-build') return 'Existing Build';
                            if (loanPurpose === 'new-build') return 'New Build';
                            return '';
                          }
                          return '';
                        })()}
                      </span>
                    </div>
                  </div>
                  
                  <div className="space-y-2">
                    <Label className="text-lg font-semibold">New Loans</Label>
                    <div className="min-h-[40px] flex items-center">
                      <div
                        className={`bg-navy-900 hover:bg-navy-800 text-white rounded-full w-20 h-20 flex items-center justify-center transition-colors duration-200 ${
                          showLoanCircleAnimation ? 'animate-roll-up-circle-1' : ''
                        }`}
                        style={{
                          fontFamily: 'ui-sans-serif, system-ui, sans-serif',
                          fontSize: '36px',
                          fontWeight: 600,
                          backgroundColor: '#1a3373',
                          boxShadow: '0 4px 8px rgba(0, 0, 0, 0.15)'
                        }}
                        data-testid="circle-1"
                      >
                        {(() => {
                          // Check if New Refinance Loan card is open
                          const hasRefinanceCards = (newRefinanceLoanCards || []).length > 0;
                          // Check if New Purchase Loan card is open
                          const hasPurchaseCards = (newPurchaseLoanCards || []).length > 0;
                          
                          // If either card is open, display "1"
                          if (hasRefinanceCards || hasPurchaseCards) {
                            return '1';
                          }
                          return '';
                        })()}
                      </div>
                    </div>
                  </div>
                  
                  <div className="space-y-2">
                    <Label className="text-lg font-semibold">Loan Category</Label>
                    <div className="min-h-[40px] flex items-center">
                      <div
                        className={`bg-navy-900 hover:bg-navy-800 text-white rounded-full w-20 h-20 flex items-center justify-center transition-colors duration-200 ${
                          showLoanCircleAnimation ? 'animate-roll-up-circle-2' : ''
                        }`}
                        style={{
                          fontFamily: 'ui-sans-serif, system-ui, sans-serif',
                          fontSize: (() => {
                            // Check if New Refinance Loan card is open
                            const hasRefinanceCards = (newRefinanceLoanCards || []).length > 0;
                            // Check if New Purchase Loan card is open
                            const hasPurchaseCards = (newPurchaseLoanCards || []).length > 0;
                            
                            let loanCategory = '';
                            if (hasRefinanceCards) {
                              loanCategory = form.watch('abc.loanCategory');
                            } else if (hasPurchaseCards) {
                              loanCategory = form.watch('bbb.loanCategory');
                            }
                            
                            if (loanCategory === 'va' || loanCategory === 'va-jumbo') return '32px'; // VA: keep current size
                            if (loanCategory === 'fha') return '28px'; // FHA: one size smaller
                            if (loanCategory === 'conventional' || loanCategory === 'conventional-jumbo') return '24px'; // FNM: two sizes smaller
                            return '32px';
                          })(),
                          fontWeight: 600,
                          backgroundColor: '#1a3373',
                          boxShadow: '0 4px 8px rgba(0, 0, 0, 0.15)'
                        }}
                        data-testid="circle-2"
                      >
                        {(() => {
                          // Check if New Refinance Loan card is open
                          const hasRefinanceCards = (newRefinanceLoanCards || []).length > 0;
                          // Check if New Purchase Loan card is open
                          const hasPurchaseCards = (newPurchaseLoanCards || []).length > 0;
                          
                          let loanCategory = '';
                          if (hasRefinanceCards) {
                            loanCategory = form.watch('abc.loanCategory');
                          } else if (hasPurchaseCards) {
                            loanCategory = form.watch('bbb.loanCategory');
                          }
                          
                          if (loanCategory === 'select' || loanCategory === 'other' || !loanCategory) return 'NA';
                          if (loanCategory === 'va' || loanCategory === 'va-jumbo') return 'VA';
                          if (loanCategory === 'fha') return 'FHA';
                          if (loanCategory === 'conventional' || loanCategory === 'conventional-jumbo') return 'FNM';
                          return '';
                        })()}
                      </div>
                    </div>
                  </div>
                  
                  <div className="space-y-2">
                    <Label className="text-lg font-semibold">Existing Loans</Label>
                    <div className="min-h-[40px] flex items-center">
                      <div
                        className={`bg-navy-900 hover:bg-navy-800 text-white rounded-full w-20 h-20 flex items-center justify-center transition-colors duration-200 ${
                          showLoanCircleAnimation ? 'animate-roll-up-circle-3' : ''
                        }`}
                        style={{
                          fontFamily: 'ui-sans-serif, system-ui, sans-serif',
                          fontSize: '36px',
                          fontWeight: 600,
                          backgroundColor: '#1a3373',
                          boxShadow: '0 4px 8px rgba(0, 0, 0, 0.15)'
                        }}
                        data-testid="circle-3"
                      >
                        {(showCurrentLoan ? 1 : 0) + (showSecondLoan ? 1 : 0) + (showThirdLoan ? 1 : 0)}
                      </div>
                    </div>
                  </div>
                </CardContent>
              </Card>

              {/* Loan List Card - Visual Copy (No Functionality) */}
              <Card className="transition-all duration-700">
                <CardHeader>
                  <div className="flex items-center justify-between">
                    <CardTitle>Loan List</CardTitle>
                    <div className="flex items-center gap-2">
                      {/* Expand All Button */}
                      <Button
                        type="button"
                        variant="ghost"
                        size="icon"
                        onClick={() => {
                          // Expand all loan cards
                          
                          // Expand all Current Primary Loan cards
                          const primaryUpdates: Record<string, boolean> = {};
                          (currentPrimaryLoanCards || []).forEach(cardId => {
                            primaryUpdates[cardId] = true;
                          });
                          setCurrentLoanCardStates(prev => ({ ...prev, ...primaryUpdates }));
                          
                          // Expand all Current Second Loan cards
                          const secondUpdates: Record<string, boolean> = {};
                          (currentSecondLoanCards || []).forEach(cardId => {
                            secondUpdates[cardId] = true;
                          });
                          setSecondLoanCardStates(prev => ({ ...prev, ...secondUpdates }));
                          
                          // Expand all Current Third Loan cards
                          const thirdUpdates: Record<string, boolean> = {};
                          (currentThirdLoanCards || []).forEach(cardId => {
                            thirdUpdates[cardId] = true;
                          });
                          setThirdLoanCardStates(prev => ({ ...prev, ...thirdUpdates }));
                        }}
                        className="hover:bg-blue-500 hover:text-white"
                        title="Expand All Loan Tiles"
                        data-testid="button-expand-all-loans"
                      >
                        <Plus className="h-4 w-4" />
                      </Button>
                      
                      {/* Minimize All Button */}
                      <Button
                        type="button"
                        variant="ghost"
                        size="icon"
                        onClick={() => {
                          // Minimize all loan cards
                          
                          // Minimize all Current Primary Loan cards
                          const primaryUpdates: Record<string, boolean> = {};
                          (currentPrimaryLoanCards || []).forEach(cardId => {
                            primaryUpdates[cardId] = false;
                          });
                          setCurrentLoanCardStates(prev => ({ ...prev, ...primaryUpdates }));
                          
                          // Minimize all Current Second Loan cards
                          const secondUpdates: Record<string, boolean> = {};
                          (currentSecondLoanCards || []).forEach(cardId => {
                            secondUpdates[cardId] = false;
                          });
                          setSecondLoanCardStates(prev => ({ ...prev, ...secondUpdates }));
                          
                          // Minimize all Current Third Loan cards
                          const thirdUpdates: Record<string, boolean> = {};
                          (currentThirdLoanCards || []).forEach(cardId => {
                            thirdUpdates[cardId] = false;
                          });
                          setThirdLoanCardStates(prev => ({ ...prev, ...thirdUpdates }));
                        }}
                        className="hover:bg-orange-500 hover:text-white"
                        title="Minimize All Loan Tiles"
                        data-testid="button-minimize-all-loans"
                      >
                        <Minus className="h-4 w-4" />
                      </Button>
                    </div>
                  </div>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
                      <div className="flex items-center space-x-2">
                        <Checkbox
                          id="property-type-abc-loan-tab"
                          checked={(newRefinanceLoanCards || []).length > 0}
                          onCheckedChange={(checked) => {
                            if (typeof checked === 'boolean') {
                              handleNewRefinanceLoanTypeChange(checked);
                            }
                          }}
                          className={`transition-transform duration-500 hover:scale-105 data-[state=checked]:rotate-[360deg] border-black ${
                            (newRefinanceLoanCards || []).length > 0 ? 'pointer-events-none opacity-75' : ''
                          }`}
                          data-testid="checkbox-property-abc-loan-tab"
                        />
                        <Label 
                          htmlFor="property-type-abc-loan-tab" 
                          className={`font-medium text-black ${
                            (newRefinanceLoanCards || []).length > 0 ? 'pointer-events-none opacity-75' : 'cursor-pointer'
                          }`}
                        >
                          New Refinance Loan
                        </Label>
                      </div>

                      <div className="flex items-center space-x-2">
                        <Checkbox
                          id="property-type-bbb-loan-tab"
                          checked={(newPurchaseLoanCards || []).length > 0}
                          onCheckedChange={(checked) => {
                            if (typeof checked === 'boolean') {
                              handleNewPurchaseLoanTypeChange(checked);
                            }
                          }}
                          className={`transition-transform duration-500 hover:scale-105 data-[state=checked]:rotate-[360deg] border-black ${
                            (newPurchaseLoanCards || []).length > 0 ? 'pointer-events-none opacity-75' : ''
                          }`}
                          data-testid="checkbox-property-bbb-loan-tab"
                        />
                        <Label 
                          htmlFor="property-type-bbb-loan-tab" 
                          className={`font-medium text-black ${
                            (newPurchaseLoanCards || []).length > 0 ? 'pointer-events-none opacity-75' : 'cursor-pointer'
                          }`}
                        >
                          New Purchase Loan
                        </Label>
                      </div>

                      <div className="flex items-center space-x-2">
                        <Checkbox
                          id="property-type-second-home-loan-tab"
                          disabled
                          className="transition-transform duration-500 hover:scale-105 data-[state=checked]:rotate-[360deg] border-black"
                          data-testid="checkbox-property-second-home-loan-tab"
                        />
                        <Label htmlFor="property-type-second-home-loan-tab" className="font-medium text-black">
                          New Second Loan
                        </Label>
                      </div>

                      <div className="flex items-center space-x-2">
                        <Checkbox
                          id="property-type-investment-loan-tab"
                          disabled
                          className="transition-transform duration-500 hover:scale-105 data-[state=checked]:rotate-[360deg] border-black"
                          data-testid="checkbox-property-investment-loan-tab"
                        />
                        <Label htmlFor="property-type-investment-loan-tab" className="font-medium text-black">
                          New Second + Purchase Loan
                        </Label>
                      </div>
                    </div>

                    {/* Second Row */}
                    <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
                      <div className="flex items-center space-x-2">
                        <Checkbox
                          id="current-primary-loan-tab"
                          checked={(currentPrimaryLoanCards || []).length > 0}
                          onCheckedChange={(checked) => {
                            if (typeof checked === 'boolean') {
                              handleCurrentPrimaryLoanTypeChange(checked);
                            }
                          }}
                          className={`transition-transform duration-500 hover:scale-105 data-[state=checked]:rotate-[360deg] border-black ${
                            (currentPrimaryLoanCards || []).length > 0 ? 'pointer-events-none opacity-75' : ''
                          }`}
                          data-testid="checkbox-current-primary-loan-tab"
                        />
                        <Label 
                          htmlFor="current-primary-loan-tab" 
                          className={`font-medium text-black ${
                            (currentPrimaryLoanCards || []).length > 0 ? 'pointer-events-none opacity-75' : 'cursor-pointer'
                          }`}
                        >
                          Existing Primary Loan
                        </Label>
                      </div>

                      <div className="flex items-center space-x-2">
                        <Checkbox
                          id="current-second-loan-tab"
                          checked={(currentSecondLoanCards || []).length > 0}
                          onCheckedChange={(checked) => {
                            if (typeof checked === 'boolean') {
                              handleCurrentSecondLoanTypeChange(checked);
                            }
                          }}
                          className={`transition-transform duration-500 hover:scale-105 data-[state=checked]:rotate-[360deg] border-black ${
                            (currentSecondLoanCards || []).length > 0 ? 'pointer-events-none opacity-75' : ''
                          }`}
                          data-testid="checkbox-current-second-loan-tab"
                        />
                        <Label 
                          htmlFor="current-second-loan-tab" 
                          className={`font-medium text-black ${
                            (currentSecondLoanCards || []).length > 0 ? 'pointer-events-none opacity-75' : 'cursor-pointer'
                          }`}
                        >
                          Existing Second Loan
                        </Label>
                      </div>

                      <div className="flex items-center space-x-2">
                        <Checkbox
                          id="current-third-loan-tab"
                          checked={(currentThirdLoanCards || []).length > 0}
                          onCheckedChange={(checked) => {
                            if (typeof checked === 'boolean') {
                              handleCurrentThirdLoanTypeChange(checked);
                            }
                          }}
                          className={`transition-transform duration-500 hover:scale-105 data-[state=checked]:rotate-[360deg] border-black ${
                            (currentThirdLoanCards || []).length > 0 ? 'pointer-events-none opacity-75' : ''
                          }`}
                          data-testid="checkbox-current-third-loan-tab"
                        />
                        <Label 
                          htmlFor="current-third-loan-tab" 
                          className={`font-medium text-black ${
                            (currentThirdLoanCards || []).length > 0 ? 'pointer-events-none opacity-75' : 'cursor-pointer'
                          }`}
                        >
                          Existing Third Loan
                        </Label>
                      </div>

                      <div className="flex items-center space-x-2">
                        <Checkbox
                          id="brand-new-loan-tab"
                          disabled
                          className="transition-transform duration-500 hover:scale-105 data-[state=checked]:rotate-[360deg] border-black"
                          data-testid="checkbox-brand-new-loan-tab"
                        />
                        <Label 
                          htmlFor="brand-new-loan-tab" 
                          className="font-medium text-black"
                        >
                          Other
                        </Label>
                      </div>
                    </div>
                    
                  </div>
                </CardContent>
              </Card>

              {/* New Refinance Loan Card */}
              {newRefinanceLoanCards.length > 0 && newRefinanceLoanCards.map((cardId, index) => {
                const isOpen = newRefinanceLoanCardStates[cardId] ?? true;
                const setIsOpen = (open: boolean) => {
                  setNewRefinanceLoanCardStates(prev => ({ ...prev, [cardId]: open }));
                  // Trigger grey box animation when card is opened
                  if (open) {
                    const animationKey = `refinance-card-${index}-`;
                    setShowNewRefinanceLoanCardAnimation(prev => ({ ...prev, [animationKey]: true }));
                    setTimeout(() => {
                      setShowNewRefinanceLoanCardAnimation(prev => ({ ...prev, [animationKey]: false }));
                    }, 800);
                  }
                };
                
                return (
              <Collapsible key={cardId} open={isOpen} onOpenChange={setIsOpen}>
              <Card className="transition-all duration-700 border-l-4 border-l-green-500 hover:border-green-500 focus-within:border-green-500 transition-colors duration-200">
                <CardHeader>
                  <div className="flex items-center justify-between">
                    <CardTitle>New Refinance Loan</CardTitle>
                    <div className="flex items-center gap-2">
                      {/* Remove Button */}
                      <Button
                        type="button"
                        variant="outline"
                        size="sm"
                        onClick={() => {
                          // Open confirmation dialog
                          setDeleteAbcDialog({ isOpen: true });
                        }}
                        className="hover:bg-red-500 hover:text-white"
                        data-testid="button-remove-abc"
                        title="Remove New Refinance Loan Card"
                      >
                        <Minus className="h-4 w-4 mr-2" />
                        Remove
                      </Button>
                      
                      {/* Minimize Button */}
                      <CollapsibleTrigger asChild>
                        <Button 
                          type="button"
                          variant="ghost" 
                          size="sm" 
                          className="hover:bg-orange-500 hover:text-white" 
                          data-testid="button-toggle-abc"
                          title={isOpen ? "Minimize" : "Expand"}
                        >
                          {isOpen ? <Minus className="h-4 w-4" /> : <Plus className="h-4 w-4" />}
                        </Button>
                      </CollapsibleTrigger>
                    </div>
                  </div>
                </CardHeader>
                <CollapsibleContent>
                <CardContent>
                  <div className="grid grid-cols-1 md:grid-cols-5 gap-4 mb-4">
                    <div className="space-y-2">
                      <Label htmlFor="abc-lenderName">Lender Name</Label>
                      <Input
                        id="abc-lenderName"
                        type="text"
                        placeholder=""
                        {...form.register("abc.lenderName")}
                        data-testid="input-abc-lenderName"
                      />
                    </div>
                    
                    <div className="space-y-2">
                      <Label htmlFor="abc-loanNumber">Loan Number</Label>
                      <Input
                        id="abc-loanNumber"
                        type="text"
                        placeholder=""
                        {...form.register("abc.loanNumber")}
                        data-testid="input-abc-loanNumber"
                      />
                    </div>
                    
                    <div className="space-y-2">
                      <Label htmlFor="abc-loanCategory">Loan Category</Label>
                      <Controller
                        control={form.control}
                        name="abc.loanCategory"
                        defaultValue=""
                        render={({ field }) => (
                          <Select value={field.value} onValueChange={field.onChange}>
                            <SelectTrigger data-testid="select-abc-loanCategory">
                              <SelectValue placeholder="Select" />
                            </SelectTrigger>
                            <SelectContent>
                              <SelectItem value="select">Select</SelectItem>
                              <SelectItem value="conventional">Conventional</SelectItem>
                              <SelectItem value="conventional-jumbo">Conventional Jumbo</SelectItem>
                              <SelectItem value="fha">FHA</SelectItem>
                              <SelectItem value="va">VA</SelectItem>
                              <SelectItem value="va-jumbo">VA Jumbo</SelectItem>
                              <SelectItem value="other">Other</SelectItem>
                            </SelectContent>
                          </Select>
                        )}
                      />
                    </div>
                    
                    <div className="space-y-2">
                      <Label htmlFor="abc-loanPurpose">Loan Purpose</Label>
                      <Controller
                        control={form.control}
                        name="abc.loanPurpose"
                        defaultValue=""
                        render={({ field }) => (
                          <Select value={field.value} onValueChange={field.onChange}>
                            <SelectTrigger data-testid="select-abc-loanPurpose">
                              <SelectValue placeholder="Select" />
                            </SelectTrigger>
                            <SelectContent>
                              <SelectItem value="select">Select</SelectItem>
                              <SelectItem value="cash-out">Cash Out</SelectItem>
                              <SelectItem value="rate-reduction">Rate Reduction</SelectItem>
                              <SelectItem value="term-reduction">Term Reduction</SelectItem>
                              <SelectItem value="other">Other</SelectItem>
                            </SelectContent>
                          </Select>
                        )}
                      />
                    </div>
                    
                    <div className="space-y-2">
                      <Label htmlFor="abc-docType">Doc Type</Label>
                      <Controller
                        control={form.control}
                        name="abc.docType"
                        defaultValue=""
                        render={({ field }) => (
                          <Select value={field.value} onValueChange={field.onChange}>
                            <SelectTrigger data-testid="select-abc-docType">
                              <SelectValue placeholder="Select" />
                            </SelectTrigger>
                            <SelectContent>
                              <SelectItem value="select">Select</SelectItem>
                              <SelectItem value="full-doc">Full Doc</SelectItem>
                              <SelectItem value="streamline">Streamline</SelectItem>
                              <SelectItem value="irrrl">IRRRL</SelectItem>
                            </SelectContent>
                          </Select>
                        )}
                      />
                    </div>
                  </div>
                  
                  <div className="grid grid-cols-1 md:grid-cols-5 gap-4">
                    <div className="space-y-2">
                      <Label htmlFor="abc-loanBalance">New Loan Amount</Label>
                      <Controller
                        control={form.control}
                        name="abc.loanBalance"
                        defaultValue=""
                        render={({ field }) => {
                          const numVal = field.value ? field.value.replace(/[^\d]/g, '') : '';
                          const displayValue = numVal ? numVal.replace(/\B(?=(\d{3})+(?!\d))/g, ',') : '';
                          
                          return (
                            <div className="flex items-center border border-input bg-background px-3 rounded-md">
                              <span className="text-muted-foreground text-sm">$</span>
                              <Input
                                id="abc-loanBalance"
                                type="text"
                                placeholder="0"
                                value={displayValue}
                                onChange={(e) => {
                                  const value = e.target.value.replace(/[^\d]/g, '');
                                  field.onChange(value);
                                }}
                                className="border-0 bg-transparent px-2 focus-visible:ring-0"
                                data-testid="input-abc-loanBalance"
                              />
                            </div>
                          );
                        }}
                      />
                    </div>
                    
                    <div className="space-y-2">
                      <Label htmlFor="abc-loanTerm">Loan Term</Label>
                      <Controller
                        control={form.control}
                        name="abc.loanTerm"
                        defaultValue=""
                        render={({ field }) => (
                          <Select value={field.value} onValueChange={field.onChange}>
                            <SelectTrigger data-testid="select-abc-loanTerm">
                              <SelectValue placeholder="Select" />
                            </SelectTrigger>
                            <SelectContent>
                              <SelectItem value="select">Select</SelectItem>
                              <SelectItem value="30-year-fixed">30 Year Fixed</SelectItem>
                              <SelectItem value="25-year-fixed">25 Year Fixed</SelectItem>
                              <SelectItem value="20-year-fixed">20 Year Fixed</SelectItem>
                              <SelectItem value="15-year-fixed">15 Year Fixed</SelectItem>
                              <SelectItem value="10-year-fixed">10 Year Fixed</SelectItem>
                            </SelectContent>
                          </Select>
                        )}
                      />
                    </div>
                    
                    <div className="space-y-2">
                      <div className="flex items-center justify-between mb-2">
                        <Label htmlFor="abc-cashOutAmount" className="text-sm">
                          {form.watch("abc.cashOutAmountToggle") ? "Benefits Summary" : "Cash Out Amount"}
                        </Label>
                        <Controller
                          control={form.control}
                          name="abc.cashOutAmountToggle"
                          defaultValue={false}
                          render={({ field }) => (
                            <Switch
                              checked={!!field.value}
                              onCheckedChange={field.onChange}
                              data-testid="toggle-abc-cashOutAmount"
                              className="scale-[0.8]"
                            />
                          )}
                        />
                      </div>
                      <Controller
                        control={form.control}
                        name="abc.cashOutAmount"
                        defaultValue=""
                        render={({ field }) => {
                          const isToggled = form.watch("abc.cashOutAmountToggle");
                          
                          if (isToggled) {
                            // Benefits Summary mode - regular text input
                            return (
                              <Input
                                id="abc-cashOutAmount"
                                type="text"
                                placeholder=""
                                value={field.value || ''}
                                onChange={(e) => {
                                  field.onChange(e.target.value);
                                }}
                                data-testid="input-abc-cashOutAmount"
                              />
                            );
                          }
                          
                          // Cash Out Amount mode - dollar value input
                          const numVal = field.value ? field.value.replace(/[^\d]/g, '') : '';
                          const displayValue = numVal ? numVal.replace(/\B(?=(\d{3})+(?!\d))/g, ',') : '';
                          
                          return (
                            <div className="flex items-center border border-input bg-background px-3 rounded-md">
                              <span className="text-muted-foreground text-sm">$</span>
                              <Input
                                id="abc-cashOutAmount"
                                type="text"
                                placeholder="0"
                                value={displayValue}
                                onChange={(e) => {
                                  const value = e.target.value.replace(/[^\d]/g, '');
                                  field.onChange(value);
                                }}
                                className="border-0 bg-transparent px-2 focus-visible:ring-0"
                                data-testid="input-abc-cashOutAmount"
                              />
                            </div>
                          );
                        }}
                      />
                    </div>
                    
                    <div className="space-y-2">
                      <div className="flex items-center justify-between mb-2">
                        <Label htmlFor="abc-totalDebtPayOff" className="text-sm">
                          {form.watch("abc.totalDebtPayOffToggle") ? "Total Debt Pay Off Payments" : "Total Debt Pay Off"}
                        </Label>
                        <Controller
                          control={form.control}
                          name="abc.totalDebtPayOffToggle"
                          defaultValue={false}
                          render={({ field }) => (
                            <Switch
                              checked={!!field.value}
                              onCheckedChange={field.onChange}
                              data-testid="toggle-abc-totalDebtPayOff"
                              className="scale-[0.8]"
                            />
                          )}
                        />
                      </div>
                      <Controller
                        control={form.control}
                        name="abc.totalDebtPayOff"
                        defaultValue=""
                        render={({ field }) => {
                          const numVal = field.value ? field.value.replace(/[^\d]/g, '') : '';
                          const displayValue = numVal ? numVal.replace(/\B(?=(\d{3})+(?!\d))/g, ',') : '';
                          
                          return (
                            <div className="flex items-center border border-input bg-background px-3 rounded-md">
                              <span className="text-muted-foreground text-sm">$</span>
                              <Input
                                id="abc-totalDebtPayOff"
                                type="text"
                                placeholder="0"
                                value={displayValue}
                                onChange={(e) => {
                                  const value = e.target.value.replace(/[^\d]/g, '');
                                  field.onChange(value);
                                }}
                                className="border-0 bg-transparent px-2 focus-visible:ring-0"
                                data-testid="input-abc-totalDebtPayOff"
                              />
                            </div>
                          );
                        }}
                      />
                    </div>
                    
                    <div className="space-y-2">
                      <Label htmlFor="abc-prepaymentPenalty">Pre-Payment Penalty</Label>
                      <Controller
                        control={form.control}
                        name="abc.prepaymentPenalty"
                        defaultValue=""
                        render={({ field }) => (
                          <Select value={field.value} onValueChange={field.onChange}>
                            <SelectTrigger data-testid="select-abc-prepaymentPenalty">
                              <SelectValue placeholder="Select" />
                            </SelectTrigger>
                            <SelectContent>
                              <SelectItem value="select">Select</SelectItem>
                              <SelectItem value="No">No</SelectItem>
                              <SelectItem value="Yes - 6 Months">Yes - 6 Months</SelectItem>
                              <SelectItem value="Yes - 1 Year">Yes - 1 Year</SelectItem>
                              <SelectItem value="Yes - 2 Years">Yes - 2 Years</SelectItem>
                              <SelectItem value="Yes - 3 Years">Yes - 3 Years</SelectItem>
                              <SelectItem value="Yes - 4 Years">Yes - 4 Years</SelectItem>
                              <SelectItem value="Yes - 5 Years">Yes - 5 Years</SelectItem>
                            </SelectContent>
                          </Select>
                        )}
                      />
                    </div>
                  </div>
                  
                  {/* Row 3: Mid FICO, Rate Lock Status, Rate Lock Date, Rate Lock Expiration, Lender Credit/Broker Credit */}
                  <Card className={`bg-muted mt-4 ${
                    showNewRefinanceLoanCardAnimation[`refinance-card-${index}-`] ? 'animate-roll-up-grey-box' : ''
                  }`}>
                    <CardContent className="pt-6">
                      <div className="grid grid-cols-1 md:grid-cols-5 gap-4">
                        <div className="space-y-2">
                          <div className="flex items-center justify-between mb-2">
                            <Label htmlFor="abc-midFico" className="text-sm">
                              {getAbcFicoLabel()}
                            </Label>
                            <Controller
                              control={form.control}
                              name="abc.midFico"
                              render={({ field }) => (
                                <Switch
                                  checked={borrowerCreditScoresDialog.midFico || coBorrowerCreditScoresDialog.midFico || !!field.value}
                                  onCheckedChange={cycleAbcFicoType}
                                  data-testid="toggle-abc-fico-type"
                                  className="scale-[0.8]"
                                />
                              )}
                            />
                          </div>
                          <Input
                            id="abc-midFico"
                            {...(abcFicoType === 'mid-fico' ? {} : form.register('abc.midFico'))}
                            value={abcFicoType === 'mid-fico' ? getAbcCalculatedMidFico() : undefined}
                            placeholder="Enter"
                            className="border border-input bg-background px-3 rounded-md"
                            data-testid="input-abc-midFico"
                            readOnly={abcFicoType === 'mid-fico'}
                            onClick={() => {
                              // Open credit scores dialog when in borrower-scores mode
                              if (abcFicoType === 'borrower-scores') {
                                setBorrowerCreditScoresDialog(prev => ({
                                  ...prev,
                                  isOpen: true
                                }));
                              }
                              // Open co-borrower credit scores dialog when in co-borrower-scores mode
                              else if (abcFicoType === 'co-borrower-scores') {
                                // Check if co-borrower exists before opening dialog
                                if (hasCoBorrower) {
                                  setCoBorrowerCreditScoresDialog(prev => ({
                                    ...prev,
                                    isOpen: true
                                  }));
                                } else {
                                  // Show warning dialog if no co-borrower
                                  setCoBorrowerWarningDialog(true);
                                }
                              }
                            }}
                            style={{
                              cursor: (abcFicoType === 'borrower-scores' || abcFicoType === 'co-borrower-scores') ? 'pointer' : 'text'
                            }}
                          />
                        </div>
                        
                        <div className="space-y-2">
                          <Controller
                            control={form.control}
                            name="abc.rateLockStatus"
                            render={({ field }) => (
                              <Label 
                                htmlFor="abc-rateLockStatus"
                                className={(field.value === 'not-locked' || field.value === 'expired' || !field.value) ? 'text-red-500' : ''}
                              >
                                Rate Lock Status
                              </Label>
                            )}
                          />
                          <Controller
                            name="abc.rateLockStatus"
                            control={form.control}
                            defaultValue="not-locked"
                            render={({ field }) => (
                              <Select 
                                value={field.value || "not-locked"}
                                onValueChange={field.onChange}
                              >
                                <SelectTrigger data-testid="select-abc-rateLockStatus">
                                  <SelectValue placeholder="Not Locked" />
                                </SelectTrigger>
                                <SelectContent>
                                  <SelectItem value="locked">Locked</SelectItem>
                                  <SelectItem value="not-locked">Not Locked</SelectItem>
                                  <SelectItem value="expired">Expired</SelectItem>
                                </SelectContent>
                              </Select>
                            )}
                          />
                        </div>
                        
                        <div className="space-y-2">
                          <div className="flex items-center justify-between mb-2">
                            <Label htmlFor="abc-rateLockDate" className="text-sm">
                              {form.watch("abc.rateLockDateToggle") ? "Lock Date - 10 Year Bond" : "Rate Lock Date"}
                            </Label>
                            <Controller
                              control={form.control}
                              name="abc.rateLockDateToggle"
                              defaultValue={false}
                              render={({ field }) => (
                                <Switch
                                  checked={!!field.value}
                                  onCheckedChange={field.onChange}
                                  data-testid="toggle-abc-rateLockDate"
                                  className="scale-[0.8]"
                                />
                              )}
                            />
                          </div>
                          {form.watch("abc.rateLockDateToggle") ? (
                            <Input
                              id="abc-rateLockDate"
                              {...form.register('abc.rateLockDate')}
                              data-testid="input-abc-rateLockDate"
                            />
                          ) : (
                            <Input
                              id="abc-rateLockDate"
                              value={form.watch('abc.rateLockDate') || ''}
                              onChange={(e) => {
                                const value = e.target.value.replace(/\D/g, '');
                                let formatted = '';
                                if (value.length > 0) {
                                  formatted = value.substring(0, 2);
                                  if (value.length > 2) {
                                    formatted += '/' + value.substring(2, 4);
                                    if (value.length > 4) {
                                      formatted += '/' + value.substring(4, 8);
                                    }
                                  }
                                }
                                form.setValue('abc.rateLockDate', formatted);
                              }}
                              placeholder="MM/DD/YYYY"
                              maxLength={10}
                              data-testid="input-abc-rateLockDate"
                            />
                          )}
                        </div>
                        
                        <div className="space-y-2">
                          <div className="flex items-center justify-between mb-2">
                            <Label htmlFor="abc-rateLockExpiration" className="text-sm">
                              {form.watch("abc.rateLockExpirationToggle") ? "Rate Lock Duration" : "Rate Lock Expiration"}
                            </Label>
                            <Controller
                              control={form.control}
                              name="abc.rateLockExpirationToggle"
                              defaultValue={false}
                              render={({ field }) => (
                                <Switch
                                  checked={!!field.value}
                                  onCheckedChange={field.onChange}
                                  data-testid="toggle-abc-rateLockExpiration"
                                  className="scale-[0.8]"
                                />
                              )}
                            />
                          </div>
                          {form.watch("abc.rateLockExpirationToggle") ? (
                            <Input
                              id="abc-rateLockExpiration"
                              value={form.watch('abc.rateLockExpiration') || ''}
                              onChange={(e) => {
                                form.setValue('abc.rateLockExpiration', e.target.value);
                              }}
                              placeholder="Enter duration"
                              data-testid="input-abc-rateLockExpiration"
                            />
                          ) : (
                            <Input
                              id="abc-rateLockExpiration"
                              value={form.watch('abc.rateLockExpiration') || ''}
                              onChange={(e) => {
                                const value = e.target.value.replace(/\D/g, '');
                                let formatted = '';
                                if (value.length > 0) {
                                  formatted = value.substring(0, 2);
                                  if (value.length > 2) {
                                    formatted += '/' + value.substring(2, 4);
                                    if (value.length > 4) {
                                      formatted += '/' + value.substring(4, 8);
                                    }
                                  }
                                }
                                form.setValue('abc.rateLockExpiration', formatted);
                              }}
                              placeholder="MM/DD/YYYY"
                              maxLength={10}
                              data-testid="input-abc-rateLockExpiration"
                            />
                          )}
                        </div>
                        
                        <div className="space-y-2">
                          <div className="flex items-center justify-between mb-2">
                            <Label htmlFor="abc-lenderCredit" className="text-sm">
                              {form.watch("abc.brokerCreditToggle") ? "Broker Credit" : "Lender Credit"}
                            </Label>
                            <Controller
                              control={form.control}
                              name="abc.brokerCreditToggle"
                              defaultValue={false}
                              render={({ field }) => (
                                <Switch
                                  checked={!!field.value}
                                  onCheckedChange={field.onChange}
                                  data-testid="toggle-abc-brokerCredit"
                                  className="scale-[0.8]"
                                />
                              )}
                            />
                          </div>
                          <Controller
                            control={form.control}
                            name="abc.lenderCredit"
                            defaultValue=""
                            render={({ field }) => {
                              const numVal = field.value ? field.value.replace(/[^\d]/g, '') : '';
                              const displayValue = numVal ? numVal.replace(/\B(?=(\d{3})+(?!\d))/g, ',') : '';
                              
                              return (
                                <div className="flex items-center border border-input bg-background px-3 rounded-md">
                                  <span className="text-muted-foreground text-sm">$</span>
                                  <Input
                                    id="abc-lenderCredit"
                                    type="text"
                                    placeholder="0"
                                    value={displayValue}
                                    onChange={(e) => {
                                      const value = e.target.value.replace(/[^\d]/g, '');
                                      field.onChange(value);
                                    }}
                                    className="border-0 bg-transparent px-2 focus-visible:ring-0"
                                    data-testid="input-abc-lenderCredit"
                                  />
                                </div>
                              );
                            }}
                          />
                        </div>
                      </div>
                  
                  {/* Row 4: Interest Rate, Principal & Interest Payment, Tax & Insurance Payment, Total Monthly Payment, HOA, Attached to Property */}
                  <div className="grid grid-cols-1 md:grid-cols-10 gap-4 mt-6">
                    <div className="space-y-2 md:col-span-1">
                      <Label htmlFor="abc-interestRate">Interest Rate</Label>
                      <Controller
                        control={form.control}
                        name="abc.interestRate"
                        defaultValue=""
                        render={({ field }) => {
                          const numVal = field.value ? field.value.replace(/[^\d.]/g, '') : '';
                          const parts = numVal.split('.');
                          let displayValue = parts[0];
                          if (parts.length > 1) {
                            displayValue += '.' + parts[1].substring(0, 3);
                          }
                          
                          return (
                            <div className="flex items-center border border-input bg-background px-3 rounded-md">
                              <Input
                                id="abc-interestRate"
                                type="text"
                                placeholder="0.000"
                                value={displayValue}
                                onChange={(e) => {
                                  const value = e.target.value.replace(/[^\d.]/g, '');
                                  const parts = value.split('.');
                                  if (parts.length > 2) return;
                                  if (parts.length === 2 && parts[1].length > 3) return;
                                  field.onChange(value);
                                }}
                                className="border-0 bg-transparent px-2 focus-visible:ring-0"
                                data-testid="input-abc-interestRate"
                              />
                              <span className="text-muted-foreground text-sm">%</span>
                            </div>
                          );
                        }}
                      />
                    </div>
                    
                    <div className="space-y-2 md:col-span-2">
                      <div className="flex items-center justify-between mb-2">
                        <Label htmlFor="abc-principalInterestPayment" className="text-sm">
                          {form.watch("abc.principalInterestPaymentToggle") ? "Interest Only Payment" : "Principal & Interest Payment"}
                        </Label>
                        <Controller
                          control={form.control}
                          name="abc.principalInterestPaymentToggle"
                          defaultValue={false}
                          render={({ field }) => (
                            <Switch
                              checked={!!field.value}
                              onCheckedChange={field.onChange}
                              data-testid="toggle-abc-principalInterestPayment"
                              className="scale-[0.8]"
                            />
                          )}
                        />
                      </div>
                      <Controller
                        control={form.control}
                        name="abc.principalAndInterestPayment"
                        defaultValue=""
                        render={({ field }) => (
                          <div className="flex items-center border border-input bg-background px-3 rounded-md">
                            <span className="text-muted-foreground text-sm">$</span>
                            <Input
                              id="abc-principalInterestPayment"
                              type="text"
                              placeholder="0"
                              value={field.value}
                              onChange={(e) => {
                                const value = e.target.value.replace(/[^\d]/g, '');
                                field.onChange(value);
                              }}
                              onBlur={(e) => {
                                const value = e.target.value.replace(/[^\d]/g, '');
                                const formatted = value ? Number(value).toLocaleString() : '';
                                form.setValue("abc.principalAndInterestPayment", formatted);
                              }}
                              className="border-0 bg-transparent px-2 focus-visible:ring-0"
                              data-testid="input-abc-principalInterestPayment"
                            />
                          </div>
                        )}
                      />
                    </div>
                    
                    <div className="space-y-2 md:col-span-2">
                      <div className="flex items-center justify-between mb-2">
                        <Label htmlFor="abc-taxInsurancePayment" className="text-sm">
                          {form.watch("abc.taxInsurancePaymentToggle") === "tax-only" 
                            ? "Tax Payment Only" 
                            : form.watch("abc.taxInsurancePaymentToggle") === "insurance-only"
                            ? "Insurance Payment Only"
                            : "Tax & Insurance Payment"}
                        </Label>
                        <Controller
                          control={form.control}
                          name="abc.taxInsurancePaymentToggle"
                          defaultValue=""
                          render={({ field }) => (
                            <Switch
                              checked={!!field.value}
                              onCheckedChange={() => {
                                const currentValue = field.value;
                                if (!currentValue || currentValue === "") {
                                  field.onChange("tax-only");
                                } else if (currentValue === "tax-only") {
                                  field.onChange("insurance-only");
                                } else {
                                  field.onChange("");
                                }
                              }}
                              data-testid="toggle-abc-taxInsurancePayment"
                              className="scale-[0.8]"
                            />
                          )}
                        />
                      </div>
                      <Controller
                        control={form.control}
                        name="abc.taxInsurancePayment"
                        defaultValue=""
                        render={({ field }) => (
                          <div className="flex items-center border border-input bg-background px-3 rounded-md">
                            <span className="text-muted-foreground text-sm">$</span>
                            <Input
                              id="abc-taxInsurancePayment"
                              type="text"
                              placeholder="0"
                              value={field.value}
                              onChange={(e) => {
                                const value = e.target.value.replace(/[^\d]/g, '');
                                field.onChange(value);
                              }}
                              onBlur={(e) => {
                                const value = e.target.value.replace(/[^\d]/g, '');
                                const formatted = value ? Number(value).toLocaleString() : '';
                                form.setValue("abc.taxInsurancePayment", formatted);
                              }}
                              className="border-0 bg-transparent px-2 focus-visible:ring-0"
                              data-testid="input-abc-taxInsurancePayment"
                            />
                          </div>
                        )}
                      />
                    </div>
                    
                    <div className="space-y-2 md:col-span-2">
                      <Label htmlFor="abc-totalMonthlyPayment">Total Monthly Payment</Label>
                      <Controller
                        control={form.control}
                        name="abc.totalMonthlyPayment"
                        defaultValue=""
                        render={({ field }) => {
                          const principalAndInterest = form.watch("abc.principalAndInterestPayment") || '';
                          const taxInsurance = form.watch("abc.taxInsurancePayment") || '';
                          
                          const pi = principalAndInterest ? parseInt(principalAndInterest.replace(/,/g, '')) : 0;
                          const ti = taxInsurance ? parseInt(taxInsurance.replace(/,/g, '')) : 0;
                          const total = pi + ti;
                          const displayValue = total > 0 ? total.toLocaleString() : '';
                          
                          return (
                            <div className="flex items-center border border-input bg-muted px-3 rounded-md">
                              <span className="text-muted-foreground text-sm">$</span>
                              <Input
                                id="abc-totalMonthlyPayment"
                                type="text"
                                placeholder="0"
                                value={displayValue}
                                readOnly
                                className="border-0 bg-transparent px-2 focus-visible:ring-0 cursor-not-allowed"
                                data-testid="input-abc-totalMonthlyPayment"
                              />
                            </div>
                          );
                        }}
                      />
                    </div>
                    
                    <div className="space-y-2 md:col-span-1">
                      <Label htmlFor="abc-hoa">HOA</Label>
                      <Controller
                        control={form.control}
                        name="abc.hoa"
                        defaultValue=""
                        render={({ field }) => {
                          const numVal = field.value ? field.value.replace(/[^\d]/g, '') : '';
                          const displayValue = numVal ? numVal.replace(/\B(?=(\d{3})+(?!\d))/g, ',') : '';
                          
                          return (
                            <div className="flex items-center border border-input bg-background px-3 rounded-md">
                              <span className="text-muted-foreground text-sm">$</span>
                              <Input
                                id="abc-hoa"
                                type="text"
                                placeholder="0"
                                value={displayValue}
                                onChange={(e) => {
                                  const value = e.target.value.replace(/[^\d]/g, '');
                                  field.onChange(value);
                                }}
                                className="border-0 bg-transparent px-2 focus-visible:ring-0"
                                data-testid="input-abc-hoa"
                              />
                            </div>
                          );
                        }}
                      />
                    </div>
                    
                    <div className="space-y-2 md:col-span-2">
                      <Label htmlFor="abc-attachedToProperty">Attached to Property</Label>
                      <Controller
                        control={form.control}
                        name="abc.attachedToProperty"
                        render={({ field }) => (
                          <Select 
                            value={field.value}
                            onValueChange={(value) => {
                              field.onChange(value);
                            }}
                          >
                            <SelectTrigger data-testid="select-abc-attachedToProperty">
                              <SelectValue placeholder="Select" />
                            </SelectTrigger>
                            <SelectContent>
                              <SelectItem value="select">Select</SelectItem>
                              {(() => {
                                const properties = form.watch('property.properties') || [];
                                return properties
                                  .filter((property: any) => property.isSubject === true)
                                  .map((property: any, index: number) => {
                                    const address = property.address;
                                    const streetAddress = address?.street;
                                    
                                    let displayText;
                                    
                                    if (!streetAddress) {
                                      displayText = 'Subject Property';
                                    } else {
                                      displayText = streetAddress;
                                    }
                                    
                                    return (
                                      <SelectItem key={`property-${property.id}`} value={property.id}>
                                        {displayText}
                                      </SelectItem>
                                    );
                                  });
                              })()}
                            </SelectContent>
                          </Select>
                        )}
                      />
                    </div>
                  </div>
                    </CardContent>
                  </Card>
                </CardContent>
                </CollapsibleContent>
              </Card>
              </Collapsible>
                );
              })}

              {/* New Purchase Loan Card */}
              {newPurchaseLoanCards.length > 0 && newPurchaseLoanCards.map((cardId, index) => {
                const isOpen = newPurchaseLoanCardStates[cardId] ?? true;
                const setIsOpen = (open: boolean) => {
                  setNewPurchaseLoanCardStates(prev => ({ ...prev, [cardId]: open }));
                  // Trigger grey box animation when card is opened
                  if (open) {
                    const animationKey = `purchase-card-${index}-`;
                    setShowNewPurchaseLoanCardAnimation(prev => ({ ...prev, [animationKey]: true }));
                    setTimeout(() => {
                      setShowNewPurchaseLoanCardAnimation(prev => ({ ...prev, [animationKey]: false }));
                    }, 800);
                  }
                };
                
                return (
              <Collapsible key={cardId} open={isOpen} onOpenChange={setIsOpen}>
              <Card className="transition-all duration-700 border-l-4 border-l-cyan-500 hover:border-cyan-500 focus-within:border-cyan-500 transition-colors duration-200">
                <CardHeader>
                  <div className="flex items-center justify-between">
                    <CardTitle>New Purchase Loan</CardTitle>
                    <div className="flex items-center gap-2">
                      {/* Remove Button */}
                      <Button
                        type="button"
                        variant="outline"
                        size="sm"
                        onClick={() => {
                          // Open confirmation dialog
                          setDeleteBbbDialog({ isOpen: true });
                        }}
                        className="hover:bg-red-500 hover:text-white"
                        data-testid="button-remove-bbb"
                        title="Remove New Purchase Loan Card"
                      >
                        <Minus className="h-4 w-4 mr-2" />
                        Remove
                      </Button>
                      
                      {/* Minimize Button */}
                      <CollapsibleTrigger asChild>
                        <Button 
                          type="button"
                          variant="ghost" 
                          size="sm" 
                          className="hover:bg-orange-500 hover:text-white" 
                          data-testid="button-toggle-bbb"
                          title={isOpen ? "Minimize" : "Expand"}
                        >
                          {isOpen ? <Minus className="h-4 w-4" /> : <Plus className="h-4 w-4" />}
                        </Button>
                      </CollapsibleTrigger>
                    </div>
                  </div>
                </CardHeader>
                <CollapsibleContent>
                <CardContent>
                  <div className="grid grid-cols-1 md:grid-cols-5 gap-4 mb-4">
                    <div className="space-y-2">
                      <Label htmlFor="bbb-lenderName">Lender Name</Label>
                      <Input
                        id="bbb-lenderName"
                        type="text"
                        placeholder=""
                        {...form.register("bbb.lenderName")}
                        data-testid="input-bbb-lenderName"
                      />
                    </div>
                    
                    <div className="space-y-2">
                      <Label htmlFor="bbb-loanNumber">Loan Number</Label>
                      <Input
                        id="bbb-loanNumber"
                        type="text"
                        placeholder=""
                        {...form.register("bbb.loanNumber")}
                        data-testid="input-bbb-loanNumber"
                      />
                    </div>
                    
                    <div className="space-y-2">
                      <Label htmlFor="bbb-loanCategory">Loan Category</Label>
                      <Controller
                        control={form.control}
                        name="bbb.loanCategory"
                        defaultValue=""
                        render={({ field }) => (
                          <Select value={field.value} onValueChange={field.onChange}>
                            <SelectTrigger data-testid="select-bbb-loanCategory">
                              <SelectValue placeholder="Select" />
                            </SelectTrigger>
                            <SelectContent>
                              <SelectItem value="select">Select</SelectItem>
                              <SelectItem value="conventional">Conventional</SelectItem>
                              <SelectItem value="conventional-jumbo">Conventional Jumbo</SelectItem>
                              <SelectItem value="fha">FHA</SelectItem>
                              <SelectItem value="va">VA</SelectItem>
                              <SelectItem value="va-jumbo">VA Jumbo</SelectItem>
                              <SelectItem value="other">Other</SelectItem>
                            </SelectContent>
                          </Select>
                        )}
                      />
                    </div>
                    
                    <div className="space-y-2">
                      <Label htmlFor="bbb-loanPurpose">Loan Purpose</Label>
                      <Controller
                        control={form.control}
                        name="bbb.loanPurpose"
                        defaultValue=""
                        render={({ field }) => (
                          <Select value={field.value} onValueChange={field.onChange}>
                            <SelectTrigger data-testid="select-bbb-loanPurpose">
                              <SelectValue placeholder="Select" />
                            </SelectTrigger>
                            <SelectContent>
                              <SelectItem value="select">Select</SelectItem>
                              <SelectItem value="existing-build">Existing Build</SelectItem>
                              <SelectItem value="new-build">New Build</SelectItem>
                            </SelectContent>
                          </Select>
                        )}
                      />
                    </div>
                    
                    <div className="space-y-2">
                      <Label htmlFor="bbb-docType">Doc Type</Label>
                      <Controller
                        control={form.control}
                        name="bbb.docType"
                        defaultValue=""
                        render={({ field }) => (
                          <Select value={field.value} onValueChange={field.onChange}>
                            <SelectTrigger data-testid="select-bbb-docType">
                              <SelectValue placeholder="Select" />
                            </SelectTrigger>
                            <SelectContent>
                              <SelectItem value="select">Select</SelectItem>
                              <SelectItem value="full-doc">Full Doc</SelectItem>
                              <SelectItem value="streamline">Streamline</SelectItem>
                              <SelectItem value="irrrl">IRRRL</SelectItem>
                            </SelectContent>
                          </Select>
                        )}
                      />
                    </div>
                  </div>
                  
                  <div className="grid grid-cols-1 md:grid-cols-5 gap-4">
                    <div className="space-y-2">
                      <Label htmlFor="bbb-loanBalance">New Loan Amount</Label>
                      <Controller
                        control={form.control}
                        name="bbb.loanBalance"
                        defaultValue=""
                        render={({ field }) => {
                          const numVal = field.value ? field.value.replace(/[^\d]/g, '') : '';
                          const displayValue = numVal ? numVal.replace(/\B(?=(\d{3})+(?!\d))/g, ',') : '';
                          
                          return (
                            <div className="flex items-center border border-input bg-background px-3 rounded-md">
                              <span className="text-muted-foreground text-sm">$</span>
                              <Input
                                id="bbb-loanBalance"
                                type="text"
                                placeholder="0"
                                value={displayValue}
                                onChange={(e) => {
                                  const value = e.target.value.replace(/[^\d]/g, '');
                                  field.onChange(value);
                                }}
                                className="border-0 bg-transparent px-2 focus-visible:ring-0"
                                data-testid="input-bbb-loanBalance"
                              />
                            </div>
                          );
                        }}
                      />
                    </div>
                    
                    <div className="space-y-2">
                      <Label htmlFor="bbb-loanTerm">Loan Term</Label>
                      <Controller
                        control={form.control}
                        name="bbb.loanTerm"
                        defaultValue=""
                        render={({ field }) => (
                          <Select value={field.value} onValueChange={field.onChange}>
                            <SelectTrigger data-testid="select-bbb-loanTerm">
                              <SelectValue placeholder="Select" />
                            </SelectTrigger>
                            <SelectContent>
                              <SelectItem value="select">Select</SelectItem>
                              <SelectItem value="30-year-fixed">30 Year Fixed</SelectItem>
                              <SelectItem value="25-year-fixed">25 Year Fixed</SelectItem>
                              <SelectItem value="20-year-fixed">20 Year Fixed</SelectItem>
                              <SelectItem value="15-year-fixed">15 Year Fixed</SelectItem>
                              <SelectItem value="10-year-fixed">10 Year Fixed</SelectItem>
                            </SelectContent>
                          </Select>
                        )}
                      />
                    </div>
                    
                    <div className="space-y-2">
                      <Label htmlFor="bbb-prepaymentPenalty">Pre-Payment Penalty</Label>
                      <Controller
                        control={form.control}
                        name="bbb.prepaymentPenalty"
                        defaultValue=""
                        render={({ field }) => (
                          <Select value={field.value} onValueChange={field.onChange}>
                            <SelectTrigger data-testid="select-bbb-prepaymentPenalty">
                              <SelectValue placeholder="Select" />
                            </SelectTrigger>
                            <SelectContent>
                              <SelectItem value="select">Select</SelectItem>
                              <SelectItem value="No">No</SelectItem>
                              <SelectItem value="Yes - 6 Months">Yes - 6 Months</SelectItem>
                              <SelectItem value="Yes - 1 Year">Yes - 1 Year</SelectItem>
                              <SelectItem value="Yes - 2 Years">Yes - 2 Years</SelectItem>
                              <SelectItem value="Yes - 3 Years">Yes - 3 Years</SelectItem>
                              <SelectItem value="Yes - 4 Years">Yes - 4 Years</SelectItem>
                              <SelectItem value="Yes - 5 Years">Yes - 5 Years</SelectItem>
                            </SelectContent>
                          </Select>
                        )}
                      />
                    </div>
                    
                    <div className="space-y-2">
                      <div className="flex items-center justify-between mb-2">
                        <Label htmlFor="bbb-lenderCredit" className="text-sm">
                          {form.watch("bbb.brokerCreditToggle") ? "Broker Credit" : "Lender Credit"}
                        </Label>
                        <Controller
                          control={form.control}
                          name="bbb.brokerCreditToggle"
                          defaultValue={false}
                          render={({ field }) => (
                            <Switch
                              checked={!!field.value}
                              onCheckedChange={field.onChange}
                              data-testid="toggle-bbb-brokerCredit"
                              className="scale-[0.8]"
                            />
                          )}
                        />
                      </div>
                      <Controller
                        control={form.control}
                        name="bbb.lenderCredit"
                        defaultValue=""
                        render={({ field }) => {
                          const numVal = field.value ? field.value.replace(/[^\d]/g, '') : '';
                          const displayValue = numVal ? numVal.replace(/\B(?=(\d{3})+(?!\d))/g, ',') : '';
                          
                          return (
                            <div className="flex items-center border border-input bg-background px-3 rounded-md">
                              <span className="text-muted-foreground text-sm">$</span>
                              <Input
                                id="bbb-lenderCredit"
                                type="text"
                                placeholder="0"
                                value={displayValue}
                                onChange={(e) => {
                                  const value = e.target.value.replace(/[^\d]/g, '');
                                  field.onChange(value);
                                }}
                                className="border-0 bg-transparent px-2 focus-visible:ring-0"
                                data-testid="input-bbb-lenderCredit"
                              />
                            </div>
                          );
                        }}
                      />
                    </div>
                    
                    <div className="space-y-2">
                      <div className="flex items-center justify-between mb-2">
                        <Label htmlFor="bbb-cashOutAmount" className="text-sm">
                          {form.watch("bbb.cashOutAmountToggle") ? "Other Credit" : "Seller Credit"}
                        </Label>
                        <Controller
                          control={form.control}
                          name="bbb.cashOutAmountToggle"
                          defaultValue={false}
                          render={({ field }) => (
                            <Switch
                              checked={!!field.value}
                              onCheckedChange={field.onChange}
                              data-testid="toggle-bbb-cashOutAmount"
                              className="scale-[0.8]"
                            />
                          )}
                        />
                      </div>
                      {form.watch("bbb.cashOutAmountToggle") ? (
                        <Input
                          id="bbb-cashOutAmount"
                          type="text"
                          placeholder="Enter benefits summary"
                          {...form.register("bbb.cashOutAmount")}
                          data-testid="input-bbb-cashOutAmount"
                        />
                      ) : (
                        <Controller
                          control={form.control}
                          name="bbb.cashOutAmount"
                          defaultValue=""
                          render={({ field }) => {
                            const numVal = field.value ? field.value.replace(/[^\d]/g, '') : '';
                            const displayValue = numVal ? numVal.replace(/\B(?=(\d{3})+(?!\d))/g, ',') : '';
                            
                            return (
                              <div className="flex items-center border border-input bg-background px-3 rounded-md">
                                <span className="text-muted-foreground text-sm">$</span>
                                <Input
                                  id="bbb-cashOutAmount"
                                  type="text"
                                  placeholder="0"
                                  value={displayValue}
                                  onChange={(e) => {
                                    const value = e.target.value.replace(/[^\d]/g, '');
                                    field.onChange(value);
                                  }}
                                  className="border-0 bg-transparent px-2 focus-visible:ring-0"
                                  data-testid="input-bbb-cashOutAmount"
                                />
                              </div>
                            );
                          }}
                        />
                      )}
                    </div>
                  </div>
                  
                  {/* Row 3: Mid FICO, Rate Lock Status, Rate Lock Date, Rate Lock Expiration, Rate Lock Duration */}
                  <Card className={`bg-muted mt-4 ${
                    showNewPurchaseLoanCardAnimation[`purchase-card-${index}-`] ? 'animate-roll-up-grey-box' : ''
                  }`}>
                    <CardContent className="pt-6">
                      <div className="grid grid-cols-1 md:grid-cols-5 gap-4">
                        <div className="space-y-2">
                          <div className="flex items-center justify-between mb-2">
                            <Label htmlFor="bbb-midFico" className="text-sm">
                              {getBbbFicoLabel()}
                            </Label>
                            <Controller
                              control={form.control}
                              name="bbb.midFico"
                              render={({ field }) => (
                                <Switch
                                  checked={borrowerCreditScoresDialog.midFico || coBorrowerCreditScoresDialog.midFico || !!field.value}
                                  onCheckedChange={cycleBbbFicoType}
                                  data-testid="toggle-bbb-fico-type"
                                  className="scale-[0.8]"
                                />
                              )}
                            />
                          </div>
                          <Input
                            id="bbb-midFico"
                            {...(bbbFicoType === 'mid-fico' ? {} : form.register('bbb.midFico'))}
                            value={bbbFicoType === 'mid-fico' ? getBbbCalculatedMidFico() : undefined}
                            placeholder="Enter"
                            className="border border-input bg-background px-3 rounded-md"
                            data-testid="input-bbb-midFico"
                            readOnly={bbbFicoType === 'mid-fico'}
                            onClick={() => {
                              if (bbbFicoType === 'borrower-scores') {
                                setBorrowerCreditScoresDialog(prev => ({
                                  ...prev,
                                  isOpen: true
                                }));
                              }
                              else if (bbbFicoType === 'co-borrower-scores') {
                                if (hasCoBorrower) {
                                  setCoBorrowerCreditScoresDialog(prev => ({
                                    ...prev,
                                    isOpen: true
                                  }));
                                } else {
                                  setCoBorrowerWarningDialog(true);
                                }
                              }
                            }}
                            style={{
                              cursor: (bbbFicoType === 'borrower-scores' || bbbFicoType === 'co-borrower-scores') ? 'pointer' : 'text'
                            }}
                          />
                        </div>
                        
                        <div className="space-y-2">
                          <Controller
                            control={form.control}
                            name="bbb.rateLockStatus"
                            render={({ field }) => (
                              <Label 
                                htmlFor="bbb-rateLockStatus"
                                className={(field.value === 'not-locked' || field.value === 'expired' || !field.value) ? 'text-red-500' : ''}
                              >
                                Rate Lock Status
                              </Label>
                            )}
                          />
                          <Controller
                            name="bbb.rateLockStatus"
                            control={form.control}
                            defaultValue="not-locked"
                            render={({ field }) => (
                              <Select 
                                value={field.value || "not-locked"}
                                onValueChange={field.onChange}
                              >
                                <SelectTrigger data-testid="select-bbb-rateLockStatus">
                                  <SelectValue placeholder="Not Locked" />
                                </SelectTrigger>
                                <SelectContent>
                                  <SelectItem value="locked">Locked</SelectItem>
                                  <SelectItem value="not-locked">Not Locked</SelectItem>
                                  <SelectItem value="expired">Expired</SelectItem>
                                </SelectContent>
                              </Select>
                            )}
                          />
                        </div>
                        
                        <div className="space-y-2">
                          <div className="flex items-center justify-between mb-2">
                            <Label htmlFor="bbb-rateLockDate" className="text-sm">
                              {form.watch("bbb.rateLockDateToggle") ? "Lock Date - 10 Year Bond" : "Rate Lock Date"}
                            </Label>
                            <Controller
                              control={form.control}
                              name="bbb.rateLockDateToggle"
                              defaultValue={false}
                              render={({ field }) => (
                                <Switch
                                  checked={!!field.value}
                                  onCheckedChange={field.onChange}
                                  data-testid="toggle-bbb-rateLockDate"
                                  className="scale-[0.8]"
                                />
                              )}
                            />
                          </div>
                          {form.watch("bbb.rateLockDateToggle") ? (
                            <Input
                              id="bbb-rateLockDate"
                              {...form.register('bbb.rateLockDate')}
                              data-testid="input-bbb-rateLockDate"
                            />
                          ) : (
                            <Input
                              id="bbb-rateLockDate"
                              value={form.watch('bbb.rateLockDate') || ''}
                              onChange={(e) => {
                                const value = e.target.value.replace(/\D/g, '');
                                let formatted = '';
                                if (value.length > 0) {
                                  formatted = value.substring(0, 2);
                                  if (value.length > 2) {
                                    formatted += '/' + value.substring(2, 4);
                                    if (value.length > 4) {
                                      formatted += '/' + value.substring(4, 8);
                                    }
                                  }
                                }
                                form.setValue('bbb.rateLockDate', formatted);
                              }}
                              placeholder="MM/DD/YYYY"
                              maxLength={10}
                              data-testid="input-bbb-rateLockDate"
                            />
                          )}
                        </div>
                        
                        <div className="space-y-2">
                          <div className="flex items-center justify-between mb-2">
                            <Label htmlFor="bbb-rateLockExpiration" className="text-sm">
                              {form.watch("bbb.rateLockExpirationToggle") ? "Rate Lock Duration" : "Rate Lock Expiration"}
                            </Label>
                            <Controller
                              control={form.control}
                              name="bbb.rateLockExpirationToggle"
                              defaultValue={false}
                              render={({ field }) => (
                                <Switch
                                  checked={!!field.value}
                                  onCheckedChange={field.onChange}
                                  data-testid="toggle-bbb-rateLockExpiration"
                                  className="scale-[0.8]"
                                />
                              )}
                            />
                          </div>
                          {form.watch("bbb.rateLockExpirationToggle") ? (
                            <Input
                              id="bbb-rateLockExpiration"
                              {...form.register('bbb.rateLockExpiration')}
                              data-testid="input-bbb-rateLockExpiration"
                            />
                          ) : (
                            <Input
                              id="bbb-rateLockExpiration"
                              value={form.watch('bbb.rateLockExpiration') || ''}
                              onChange={(e) => {
                                const value = e.target.value.replace(/\D/g, '');
                                let formatted = '';
                                if (value.length > 0) {
                                  formatted = value.substring(0, 2);
                                  if (value.length > 2) {
                                    formatted += '/' + value.substring(2, 4);
                                    if (value.length > 4) {
                                      formatted += '/' + value.substring(4, 8);
                                    }
                                  }
                                }
                                form.setValue('bbb.rateLockExpiration', formatted);
                              }}
                              placeholder="MM/DD/YYYY"
                              maxLength={10}
                              data-testid="input-bbb-rateLockExpiration"
                            />
                          )}
                        </div>
                        
                        <div className="space-y-2">
                          <Label htmlFor="bbb-rateLockDuration">Rate Lock Duration</Label>
                          <Input
                            id="bbb-rateLockDuration"
                            type="text"
                            placeholder=""
                            {...form.register("bbb.rateLockDuration")}
                            data-testid="input-bbb-rateLockDuration"
                          />
                        </div>
                      </div>
                  
                  {/* Row 4: Interest Rate, Principal & Interest Payment, Tax & Insurance Payment, Total Monthly Payment, HOA, Attached to Property */}
                  <div className="grid grid-cols-1 md:grid-cols-10 gap-4 mt-6">
                    <div className="space-y-2 md:col-span-1">
                      <Label htmlFor="bbb-interestRate">Interest Rate</Label>
                      <Controller
                        control={form.control}
                        name="bbb.interestRate"
                        defaultValue=""
                        render={({ field }) => {
                          const numVal = field.value ? field.value.replace(/[^\d.]/g, '') : '';
                          const parts = numVal.split('.');
                          let displayValue = parts[0];
                          if (parts.length > 1) {
                            displayValue += '.' + parts[1].substring(0, 3);
                          }
                          
                          return (
                            <div className="flex items-center border border-input bg-background px-3 rounded-md">
                              <Input
                                id="bbb-interestRate"
                                type="text"
                                placeholder="0.000"
                                value={displayValue}
                                onChange={(e) => {
                                  const value = e.target.value.replace(/[^\d.]/g, '');
                                  const parts = value.split('.');
                                  if (parts.length > 2) return;
                                  if (parts.length === 2 && parts[1].length > 3) return;
                                  field.onChange(value);
                                }}
                                className="border-0 bg-transparent px-2 focus-visible:ring-0"
                                data-testid="input-bbb-interestRate"
                              />
                              <span className="text-muted-foreground text-sm">%</span>
                            </div>
                          );
                        }}
                      />
                    </div>
                    
                    <div className="space-y-2 md:col-span-2">
                      <div className="flex items-center justify-between mb-2">
                        <Label htmlFor="bbb-principalInterestPayment" className="text-sm">
                          {form.watch("bbb.principalInterestPaymentToggle") ? "Interest Only Payment" : "Principal & Interest Payment"}
                        </Label>
                        <Controller
                          control={form.control}
                          name="bbb.principalInterestPaymentToggle"
                          defaultValue={false}
                          render={({ field }) => (
                            <Switch
                              checked={!!field.value}
                              onCheckedChange={field.onChange}
                              data-testid="toggle-bbb-principalInterestPayment"
                              className="scale-[0.8]"
                            />
                          )}
                        />
                      </div>
                      <Controller
                        control={form.control}
                        name="bbb.principalAndInterestPayment"
                        defaultValue=""
                        render={({ field }) => (
                          <div className="flex items-center border border-input bg-background px-3 rounded-md">
                            <span className="text-muted-foreground text-sm">$</span>
                            <Input
                              id="bbb-principalInterestPayment"
                              type="text"
                              placeholder="0"
                              value={field.value}
                              onChange={(e) => {
                                const value = e.target.value.replace(/[^\d]/g, '');
                                field.onChange(value);
                              }}
                              onBlur={(e) => {
                                const value = e.target.value.replace(/[^\d]/g, '');
                                const formatted = value ? Number(value).toLocaleString() : '';
                                form.setValue("bbb.principalAndInterestPayment", formatted);
                              }}
                              className="border-0 bg-transparent px-2 focus-visible:ring-0"
                              data-testid="input-bbb-principalInterestPayment"
                            />
                          </div>
                        )}
                      />
                    </div>
                    
                    <div className="space-y-2 md:col-span-2">
                      <div className="flex items-center justify-between mb-2">
                        <Label htmlFor="bbb-taxInsurancePayment" className="text-sm">
                          {form.watch("bbb.taxInsurancePaymentToggle") === "tax-only" 
                            ? "Tax Payment Only" 
                            : form.watch("bbb.taxInsurancePaymentToggle") === "insurance-only"
                            ? "Insurance Payment Only"
                            : "Tax & Insurance Payment"}
                        </Label>
                        <Controller
                          control={form.control}
                          name="bbb.taxInsurancePaymentToggle"
                          defaultValue=""
                          render={({ field }) => (
                            <Switch
                              checked={!!field.value}
                              onCheckedChange={() => {
                                const currentValue = field.value;
                                if (!currentValue || currentValue === "") {
                                  field.onChange("tax-only");
                                } else if (currentValue === "tax-only") {
                                  field.onChange("insurance-only");
                                } else {
                                  field.onChange("");
                                }
                              }}
                              data-testid="toggle-bbb-taxInsurancePayment"
                              className="scale-[0.8]"
                            />
                          )}
                        />
                      </div>
                      <Controller
                        control={form.control}
                        name="bbb.taxInsurancePayment"
                        defaultValue=""
                        render={({ field }) => (
                          <div className="flex items-center border border-input bg-background px-3 rounded-md">
                            <span className="text-muted-foreground text-sm">$</span>
                            <Input
                              id="bbb-taxInsurancePayment"
                              type="text"
                              placeholder="0"
                              value={field.value}
                              onChange={(e) => {
                                const value = e.target.value.replace(/[^\d]/g, '');
                                field.onChange(value);
                              }}
                              onBlur={(e) => {
                                const value = e.target.value.replace(/[^\d]/g, '');
                                const formatted = value ? Number(value).toLocaleString() : '';
                                form.setValue("bbb.taxInsurancePayment", formatted);
                              }}
                              className="border-0 bg-transparent px-2 focus-visible:ring-0"
                              data-testid="input-bbb-taxInsurancePayment"
                            />
                          </div>
                        )}
                      />
                    </div>
                    
                    <div className="space-y-2 md:col-span-2">
                      <Label htmlFor="bbb-totalMonthlyPayment">Total Monthly Payment</Label>
                      <Controller
                        control={form.control}
                        name="bbb.totalMonthlyPayment"
                        defaultValue=""
                        render={({ field }) => {
                          const principalAndInterest = form.watch("bbb.principalAndInterestPayment") || '';
                          const taxInsurance = form.watch("bbb.taxInsurancePayment") || '';
                          
                          const pi = principalAndInterest ? parseInt(principalAndInterest.replace(/,/g, '')) : 0;
                          const ti = taxInsurance ? parseInt(taxInsurance.replace(/,/g, '')) : 0;
                          const total = pi + ti;
                          const displayValue = total > 0 ? total.toLocaleString() : '';
                          
                          return (
                            <div className="flex items-center border border-input bg-muted px-3 rounded-md">
                              <span className="text-muted-foreground text-sm">$</span>
                              <Input
                                id="bbb-totalMonthlyPayment"
                                type="text"
                                placeholder="0"
                                value={displayValue}
                                readOnly
                                className="border-0 bg-transparent px-2 focus-visible:ring-0 cursor-not-allowed"
                                data-testid="input-bbb-totalMonthlyPayment"
                              />
                            </div>
                          );
                        }}
                      />
                    </div>
                    
                    <div className="space-y-2 md:col-span-1">
                      <Label htmlFor="bbb-hoa">HOA</Label>
                      <Controller
                        control={form.control}
                        name="bbb.hoa"
                        defaultValue=""
                        render={({ field }) => {
                          const numVal = field.value ? field.value.replace(/[^\d]/g, '') : '';
                          const displayValue = numVal ? numVal.replace(/\B(?=(\d{3})+(?!\d))/g, ',') : '';
                          
                          return (
                            <div className="flex items-center border border-input bg-background px-3 rounded-md">
                              <span className="text-muted-foreground text-sm">$</span>
                              <Input
                                id="bbb-hoa"
                                type="text"
                                placeholder="0"
                                value={displayValue}
                                onChange={(e) => {
                                  const value = e.target.value.replace(/[^\d]/g, '');
                                  field.onChange(value);
                                }}
                                className="border-0 bg-transparent px-2 focus-visible:ring-0"
                                data-testid="input-bbb-hoa"
                              />
                            </div>
                          );
                        }}
                      />
                    </div>
                    
                    <div className="space-y-2 md:col-span-2">
                      <Label htmlFor="bbb-attachedToProperty">Attached to Property</Label>
                      <Controller
                        control={form.control}
                        name="bbb.attachedToProperty"
                        render={({ field }) => (
                          <Select 
                            value={field.value}
                            onValueChange={(value) => {
                              field.onChange(value);
                            }}
                          >
                            <SelectTrigger data-testid="select-bbb-attachedToProperty">
                              <SelectValue placeholder="Select" />
                            </SelectTrigger>
                            <SelectContent>
                              <SelectItem value="select">Select</SelectItem>
                              {(() => {
                                const properties = form.watch('property.properties') || [];
                                return properties
                                  .filter((property: any) => property.use === 'home-purchase' && property.address?.street)
                                  .map((property: any, index: number) => {
                                    const streetAddress = property.address?.street;
                                    
                                    return (
                                      <SelectItem key={`property-${property.id}`} value={property.id}>
                                        {streetAddress}
                                      </SelectItem>
                                    );
                                  });
                              })()}
                            </SelectContent>
                          </Select>
                        )}
                      />
                    </div>
                  </div>
                    </CardContent>
                  </Card>
                </CardContent>
                </CollapsibleContent>
              </Card>
              </Collapsible>
                );
              })}

              {/* Current Primary Loan Cards - Render multiple cards like Property cards */}
              {(currentPrimaryLoanCards || []).map((cardId, index) => {
                const isOpen = currentLoanCardStates[cardId] ?? true; // Per-card state like Property cards
                
                return (
                  <CurrentLoanCard
                    key={cardId}
                    idPrefix={`card-${index}-`}
                    borderVariant="blue"
                    isOpen={isOpen}
                    setIsOpen={(open) => {
                      setCurrentLoanCardStates(prev => ({ ...prev, [cardId]: open }));
                      // Trigger grey box animation when card is opened
                      if (open) {
                        const animationKey = `card-${index}-`;
                        setShowCurrentLoanCardAnimation(prev => ({ ...prev, [animationKey]: true }));
                        setTimeout(() => {
                          setShowCurrentLoanCardAnimation(prev => ({ ...prev, [animationKey]: false }));
                        }, 800);
                      }
                    }}
                    onRemove={() => {
                      setDeleteCurrentPrimaryLoanDialog({
                        isOpen: true,
                        cardId: cardId
                      });
                    }}
                    onAutoCopyAddress={autoCopyPropertyAddressToCurrentLoan}
                    formInstance={form}
                  />
                );
              })}

              {/* Current Second Loan Cards - Render multiple cards like Property cards and Primary Loan cards */}
              {(currentSecondLoanCards || []).map((cardId, index) => {
                const isOpen = secondLoanCardStates[cardId] ?? true; // Per-card state like Property cards
                
                return (
                  <CurrentSecondLoanCard
                    key={cardId}
                    cardId={cardId}
                    idPrefix={`second-card-${index}-`}
                    borderVariant="blue"
                    isOpen={isOpen}
                    setIsOpen={(open) => {
                      setSecondLoanCardStates(prev => ({ ...prev, [cardId]: open }));
                      // Trigger grey box animation when card is opened (copied from Primary Loan)
                      if (open) {
                        const animationKey = `second-card-${index}-`;
                        setShowSecondLoanCardAnimation(prev => ({ ...prev, [animationKey]: true }));
                        setTimeout(() => {
                          setShowSecondLoanCardAnimation(prev => ({ ...prev, [animationKey]: false }));
                        }, 800);
                      }
                    }}
                    onRemove={() => {
                      setDeleteCurrentSecondLoanDialog({
                        isOpen: true,
                        cardId: cardId
                      });
                    }}
                    onAutoCopyAddress={autoCopyPropertyAddressToLoanTabSecondLoan}
                    onAddAdditionalLoan={handleAddAdditionalLoan}
                    formInstance={form}
                  />
                );
              })}

              {/* Additional Loan Cards - Render all additional loans with sequential numbering: 3, 4, 5, etc. */}
              {additionalLoans.map((loan, index) => (
                <AdditionalLoanCard
                  key={loan.id}
                  loanId={loan.id}
                  loanNumber={3 + index}
                  isOpen={loan.isOpen}
                  setIsOpen={(open) => toggleAdditionalLoanOpen(loan.id)}
                  onRemove={() => removeAdditionalLoan(loan.id)}
                  onAddAdditionalLoan={handleAddAdditionalLoan}
                  onAutoCopyAddress={createAutoCopyAddressFunction(loan.id)}
                  formInstance={form}
                />
              ))}

              {/* Current Third Loan Cards - Dynamic multiple card system like Primary and Second Loan */}
              {(currentThirdLoanCards || []).map((cardId, index) => {
                const isOpen = thirdLoanCardStates[cardId] ?? true; // Per-card state like Property cards
                
                return (
                  <CurrentThirdLoanCard
                    key={cardId}
                    cardId={cardId}
                    idPrefix={`third-card-${index}-`}
                    borderVariant="blue"
                    isOpen={isOpen}
                    setIsOpen={(open) => {
                      setThirdLoanCardStates(prev => ({ ...prev, [cardId]: open }));
                      // Trigger grey box animation when card is opened (copied from Primary Loan)
                      if (open) {
                        const animationKey = `third-card-${index}-`;
                        setShowThirdLoanCardAnimation(prev => ({ ...prev, [animationKey]: true }));
                        setTimeout(() => {
                          setShowThirdLoanCardAnimation(prev => ({ ...prev, [animationKey]: false }));
                        }, 800);
                      }
                    }}
                    onRemove={() => {
                      setDeleteCurrentThirdLoanDialog({
                        isOpen: true,
                        cardId: cardId
                      });
                    }}
                    onAutoCopyAddress={autoCopyPropertyAddressToGlobalThirdLoan}
                    onAddAdditionalLoan={handleAddAdditionalLoan}
                    formInstance={form}
                  />
                );
              })}
            </TabsContent>

            {/* Credit Tab */}
            <TabsContent value="credit" className="space-y-6">
              <Card>
                <CardHeader>
                  <CardTitle>Credit Information</CardTitle>
                </CardHeader>
                <CardContent>
                  <p className="text-muted-foreground">Credit functionality will be implemented later.</p>
                </CardContent>
              </Card>
            </TabsContent>

            {/* Vendors Tab */}
            <TabsContent value="vendors" className="space-y-6">
              <Card>
                <CardHeader>
                  <CardTitle>Vendor Information</CardTitle>
                </CardHeader>
                <CardContent className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                  <div className="space-y-2">
                    <Label htmlFor="vendors-realtor">Realtor</Label>
                    <Input
                      id="vendors-realtor"
                      {...form.register('vendors.realtor')}
                      data-testid="input-vendors-realtor"
                    />
                  </div>
                  
                  <div className="space-y-2">
                    <Label htmlFor="vendors-appraiser">Appraiser</Label>
                    <Input
                      id="vendors-appraiser"
                      {...form.register('vendors.appraiser')}
                      data-testid="input-vendors-appraiser"
                    />
                  </div>
                  
                  <div className="space-y-2">
                    <Label htmlFor="vendors-titleCompany">Title Company</Label>
                    <Input
                      id="vendors-titleCompany"
                      {...form.register('vendors.titleCompany')}
                      data-testid="input-vendors-titleCompany"
                    />
                  </div>
                  
                  <div className="space-y-2">
                    <Label htmlFor="vendors-inspector">Inspector</Label>
                    <Input
                      id="vendors-inspector"
                      {...form.register('vendors.inspector')}
                      data-testid="input-vendors-inspector"
                    />
                  </div>
                  
                  <div className="space-y-2">
                    <Label htmlFor="vendors-insurance">Insurance</Label>
                    <Input
                      id="vendors-insurance"
                      {...form.register('vendors.insurance')}
                      data-testid="input-vendors-insurance"
                    />
                  </div>
                  
                  <div className="space-y-2">
                    <Label htmlFor="vendors-attorney">Attorney</Label>
                    <Input
                      id="vendors-attorney"
                      {...form.register('vendors.attorney')}
                      data-testid="input-vendors-attorney"
                    />
                  </div>
                </CardContent>
              </Card>
            </TabsContent>

            {/* Status Tab */}
            <TabsContent value="status" className="space-y-6">
              <Card>
                <CardHeader>
                  <CardTitle>Status Information</CardTitle>
                </CardHeader>
                <CardContent>
                  <p className="text-muted-foreground">Status functionality will be implemented here.</p>
                </CardContent>
              </Card>
            </TabsContent>

            {/* Quote Tab */}
            <TabsContent value="quote" className="space-y-6">
              <div>
                <Card className="mb-6 transition-all duration-700 animate-roll-down">
                  <div className="flex justify-end items-center gap-2 pt-4 px-4">
                    <Button
                      variant="ghost"
                      size="sm"
                      className="hover:bg-yellow-500 hover:text-white"
                      onClick={() => setIsStickyNotesOpen(true)}
                      title="Sticky Notes"
                      data-testid="button-sticky-notes"
                    >
                      <StickyNote className="h-4 w-4" />
                    </Button>
                    <Button
                      variant="ghost"
                      size="sm"
                      className="hover:bg-blue-500 hover:text-white"
                      onClick={() => setShowCalculator(!showCalculator)}
                      title="Calculator"
                      data-testid="button-calculator"
                    >
                      <Calculator className="h-4 w-4" />
                    </Button>
                    <Button
                      variant="ghost"
                      size="sm"
                      className="hover:bg-orange-500 hover:text-white"
                      onClick={() => setIsQuoteCardsMinimized(!isQuoteCardsMinimized)}
                      title={isQuoteCardsMinimized ? 'Expand' : 'Minimize'}
                      data-testid="button-toggle-quote-cards"
                    >
                      {isQuoteCardsMinimized ? <Plus className="h-4 w-4" /> : <Minus className="h-4 w-4" />}
                    </Button>
                  </div>
                  {!isQuoteCardsMinimized && (
                    <CardContent className="pt-6 space-y-6">
                      {/* Row 1: 5 Fields with titles above */}
                      <div className="grid grid-cols-1 md:grid-cols-5 gap-4">
                        <div className="space-y-2">
                          <Label htmlFor="quote-select">Quote</Label>
                          <Popover open={isRatePopoverOpen} onOpenChange={setIsRatePopoverOpen}>
                            <PopoverTrigger asChild>
                              <Button
                                variant="outline"
                                role="combobox"
                                className="w-full justify-between"
                                data-testid="button-quote-select"
                              >
                                {selectedRateIds.length === 0
                                  ? "Select"
                                  : selectedRateIds.length === 1
                                  ? `Rate ${selectedRateIds[0] + 1}`
                                  : `${selectedRateIds.length} Rates (${selectedRateIds.map(id => id + 1).join(', ')})`}
                                <Plus className="ml-2 h-4 w-4 shrink-0 opacity-50" />
                              </Button>
                            </PopoverTrigger>
                            <PopoverContent className="w-[200px] p-3" align="start">
                              <div className="space-y-2">
                                <div className="text-sm font-medium mb-3">Select Rates</div>
                                
                                {/* Select All Four Option */}
                                <div className="flex items-center space-x-2 pb-2 border-b">
                                  <Checkbox
                                    id="rate-select-all"
                                    checked={selectedRateIds.length === 4}
                                    onCheckedChange={(checked) => {
                                      if (checked) {
                                        setSelectedRateIds([0, 1, 2, 3]);
                                        setShowRateCircles(true);
                                      } else {
                                        setSelectedRateIds([]);
                                        setShowRateCircles(false);
                                      }
                                    }}
                                    data-testid="checkbox-rate-select-all"
                                  />
                                  <label
                                    htmlFor="rate-select-all"
                                    className="text-sm font-semibold leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70 cursor-pointer"
                                  >
                                    Select All Four
                                  </label>
                                </div>

                                {[3, 2, 1, 0].map((rateId) => (
                                  <div key={rateId} className="flex items-center space-x-2">
                                    <Checkbox
                                      id={`rate-${rateId}`}
                                      checked={selectedRateIds.includes(rateId)}
                                      onCheckedChange={(checked) => {
                                        if (checked) {
                                          const newIds = [...selectedRateIds, rateId].sort((a, b) => a - b);
                                          setSelectedRateIds(newIds);
                                          setShowRateCircles(true);
                                        } else {
                                          const newIds = selectedRateIds.filter(id => id !== rateId);
                                          setSelectedRateIds(newIds);
                                          if (newIds.length === 0) {
                                            setShowRateCircles(false);
                                          }
                                        }
                                      }}
                                      data-testid={`checkbox-rate-${rateId + 1}`}
                                    />
                                    <label
                                      htmlFor={`rate-${rateId}`}
                                      className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70 cursor-pointer"
                                    >
                                      Rate {rateId + 1}
                                    </label>
                                  </div>
                                ))}
                              </div>
                            </PopoverContent>
                          </Popover>
                        </div>

                        <div className="space-y-2">
                          <Label htmlFor="transaction-select">Transaction</Label>
                          <Select>
                            <SelectTrigger data-testid="select-transaction">
                              <SelectValue placeholder="Select" />
                            </SelectTrigger>
                            <SelectContent>
                              <SelectItem value="select" data-testid="select-transaction-select">Select</SelectItem>
                              <SelectItem value="refinance" data-testid="select-transaction-refinance">Refinance</SelectItem>
                              <SelectItem value="purchase" data-testid="select-transaction-purchase">Purchase</SelectItem>
                              <SelectItem value="second-loan" data-testid="select-transaction-second-loan">Second Loan</SelectItem>
                              <SelectItem value="construction" data-testid="select-transaction-construction">Construction</SelectItem>
                              <SelectItem value="bridge" data-testid="select-transaction-bridge">Bridge</SelectItem>
                            </SelectContent>
                          </Select>
                        </div>

                        <div className="space-y-2">
                          <Label htmlFor="property-select">Property Use</Label>
                          <Select>
                            <SelectTrigger data-testid="select-property">
                              <SelectValue placeholder="Select" />
                            </SelectTrigger>
                            <SelectContent>
                              <SelectItem value="select" data-testid="select-property-select">Select</SelectItem>
                              <SelectItem value="primary-residence" data-testid="select-property-primary">Primary Residence</SelectItem>
                              <SelectItem value="second-home" data-testid="select-property-second-home">Second Home</SelectItem>
                              <SelectItem value="investment-property" data-testid="select-property-investment">Investment Property</SelectItem>
                              <SelectItem value="home-purchase" data-testid="select-property-home-purchase">Home Purchase</SelectItem>
                              <SelectItem value="duplex" data-testid="select-property-duplex">Duplex</SelectItem>
                              <SelectItem value="multi-family" data-testid="select-property-multi-family">Multi-Family</SelectItem>
                            </SelectContent>
                          </Select>
                        </div>

                        <div className="space-y-2">
                          <Label htmlFor="property-type-select">Property Type</Label>
                          <Select>
                            <SelectTrigger data-testid="select-property-type">
                              <SelectValue placeholder="Select" />
                            </SelectTrigger>
                            <SelectContent>
                              <SelectItem value="select" data-testid="select-property-type-select">Select</SelectItem>
                              <SelectItem value="single-family" data-testid="select-property-type-single-family">Single Family</SelectItem>
                              <SelectItem value="condo" data-testid="select-property-type-condo">Condo</SelectItem>
                              <SelectItem value="townhouse" data-testid="select-property-type-townhouse">Townhouse</SelectItem>
                              <SelectItem value="duplex" data-testid="select-property-type-duplex">Duplex</SelectItem>
                              <SelectItem value="multi-family" data-testid="select-property-type-multi-family">Multi-Family</SelectItem>
                              <SelectItem value="other" data-testid="select-property-type-other">Other</SelectItem>
                            </SelectContent>
                          </Select>
                        </div>

                        <div className="space-y-2">
                          <Label htmlFor="source-select">Source</Label>
                          <Select>
                            <SelectTrigger data-testid="select-source">
                              <SelectValue placeholder="Select" />
                            </SelectTrigger>
                            <SelectContent>
                              <SelectItem value="select" data-testid="select-source-select">Select</SelectItem>
                              <SelectItem value="direct-mail" data-testid="select-source-direct-mail">Direct Mail</SelectItem>
                              <SelectItem value="social-media" data-testid="select-source-social-media">Social Media</SelectItem>
                              <SelectItem value="website" data-testid="select-source-website">Website</SelectItem>
                              <SelectItem value="referral" data-testid="select-source-referral">Referral</SelectItem>
                              <SelectItem value="repeat-client" data-testid="select-source-repeat-client">Repeat Client</SelectItem>
                            </SelectContent>
                          </Select>
                        </div>
                      </div>

                      {/* Row 2: Category field aligned below Quote, Purpose aligned below Type, VA Benefits */}
                      <div className="grid grid-cols-1 md:grid-cols-5 gap-4">
                        <div className="space-y-2">
                          <Label htmlFor="category-select">Loan Category</Label>
                          <Select>
                            <SelectTrigger data-testid="select-category">
                              <SelectValue placeholder="Select" />
                            </SelectTrigger>
                            <SelectContent>
                              <SelectItem value="select" data-testid="select-category-select">Select</SelectItem>
                              <SelectItem value="va" data-testid="select-category-va">VA</SelectItem>
                              <SelectItem value="va-jumbo" data-testid="select-category-va-jumbo">VA Jumbo</SelectItem>
                              <SelectItem value="fha" data-testid="select-category-fha">FHA</SelectItem>
                              <SelectItem value="conventional" data-testid="select-category-conventional">Conventional</SelectItem>
                              <SelectItem value="conventional-jumbo" data-testid="select-category-conventional-jumbo">Conventional Jumbo</SelectItem>
                              <SelectItem value="non-qm" data-testid="select-category-non-qm">Non-QM</SelectItem>
                            </SelectContent>
                          </Select>
                        </div>

                        <div className="space-y-2">
                          <Label htmlFor="purpose-select">Loan Purpose</Label>
                          <Select>
                            <SelectTrigger data-testid="select-purpose">
                              <SelectValue placeholder="Select" />
                            </SelectTrigger>
                            <SelectContent>
                              <SelectItem value="select" data-testid="select-purpose-select">Select</SelectItem>
                              <SelectItem value="cash-out-appraisal" data-testid="select-purpose-cash-out-appraisal">Cash Out - Appraisal</SelectItem>
                              <SelectItem value="cash-out-no-appraisal" data-testid="select-purpose-cash-out-no-appraisal">Cash Out - No Appraisal</SelectItem>
                              <SelectItem value="purchase" data-testid="select-purpose-purchase">Purchase</SelectItem>
                              <SelectItem value="rate-term-appraisal" data-testid="select-purpose-rate-term-appraisal">Rate & Term - Appraisal</SelectItem>
                              <SelectItem value="rate-term-no-appraisal" data-testid="select-purpose-rate-term-no-appraisal">Rate & Term - No Appraisal</SelectItem>
                              <SelectItem value="streamline-appraisal" data-testid="select-purpose-streamline-appraisal">Streamline - Appraisal</SelectItem>
                              <SelectItem value="streamline-no-appraisal" data-testid="select-purpose-streamline-no-appraisal">Streamline - No Appraisal</SelectItem>
                              <SelectItem value="irrrl" data-testid="select-purpose-irrrl">IRRRL</SelectItem>
                            </SelectContent>
                          </Select>
                        </div>

                        <div className="space-y-2">
                          <div className="flex items-center justify-between mb-2">
                            <Label htmlFor="va-benefits-select">
                              {isDuApproval ? "DU Approval" : "VA Benefits"}
                            </Label>
                            <Switch
                              checked={isDuApproval}
                              onCheckedChange={setIsDuApproval}
                              data-testid="switch-du-approval"
                              className="scale-[0.8]"
                            />
                          </div>
                          <Select>
                            <SelectTrigger data-testid="select-va-benefits">
                              <SelectValue placeholder="Select" />
                            </SelectTrigger>
                            <SelectContent>
                              <SelectItem value="select" data-testid="select-va-benefits-select">Select</SelectItem>
                              <SelectItem value="yes-exempt" data-testid="select-va-benefits-yes-exempt">Yes - Exempt</SelectItem>
                              <SelectItem value="no-not-exempt" data-testid="select-va-benefits-no-not-exempt">No - Not Exempt</SelectItem>
                            </SelectContent>
                          </Select>
                        </div>

                        <div className="space-y-2">
                          <Label htmlFor="escrow-reserves-select">Escrow Reserves</Label>
                          <Select value={escrowReserves} onValueChange={setEscrowReserves}>
                            <SelectTrigger data-testid="select-escrow-reserves">
                              <SelectValue placeholder="Select" />
                            </SelectTrigger>
                            <SelectContent>
                              <SelectItem value="select" data-testid="select-escrow-reserves-select">Select</SelectItem>
                              <SelectItem value="new-escrow-reserves" data-testid="select-escrow-reserves-new">New Escrow Reserves</SelectItem>
                              <SelectItem value="escrow-not-included" data-testid="select-escrow-reserves-not-included">Escrow Not Included</SelectItem>
                            </SelectContent>
                          </Select>
                        </div>

                        <div className="space-y-2">
                          <Label htmlFor="monthly-escrow-select">Monthly Escrow</Label>
                          <Select value={monthlyEscrow} onValueChange={setMonthlyEscrow}>
                            <SelectTrigger data-testid="select-monthly-escrow">
                              <SelectValue placeholder="Select" />
                            </SelectTrigger>
                            <SelectContent>
                              <SelectItem value="select" data-testid="select-monthly-escrow-select">Select</SelectItem>
                              <SelectItem value="includes-tax-insurance" data-testid="select-monthly-escrow-tax-insurance">Includes Tax & Insurance</SelectItem>
                              <SelectItem value="includes-tax-only" data-testid="select-monthly-escrow-tax-only">Includes Tax Only</SelectItem>
                              <SelectItem value="includes-insurance-only" data-testid="select-monthly-escrow-insurance-only">Includes Insurance Only</SelectItem>
                            </SelectContent>
                          </Select>
                        </div>
                      </div>

                      {/* Row 3: Loan Term with toggle switch, Monthly Escrow, and Escrow Reserves */}
                      <div className="grid grid-cols-1 md:grid-cols-5 gap-4">
                        <div className="space-y-2">
                          <div className="flex items-center justify-between mb-2">
                            <Label htmlFor={isCustomTerm ? "custom-term-input" : "loan-term-select"}>
                              {isCustomTerm ? "Custom Term / Years" : "Loan Term / Years"}
                            </Label>
                            <Switch
                              checked={isCustomTerm}
                              onCheckedChange={setIsCustomTerm}
                              data-testid="switch-custom-term"
                              className="scale-[0.8]"
                            />
                          </div>
                          {!isCustomTerm ? (
                            <Select value={loanTerm} onValueChange={setLoanTerm}>
                              <SelectTrigger data-testid="select-loan-term">
                                <SelectValue placeholder="Select" />
                              </SelectTrigger>
                              <SelectContent>
                                <SelectItem value="select" data-testid="select-loan-term-select">Select</SelectItem>
                                <SelectItem value="30-years" data-testid="select-loan-term-30">30</SelectItem>
                                <SelectItem value="25-years" data-testid="select-loan-term-25">25</SelectItem>
                                <SelectItem value="20-years" data-testid="select-loan-term-20">20</SelectItem>
                                <SelectItem value="18-years" data-testid="select-loan-term-18">18</SelectItem>
                                <SelectItem value="15-years" data-testid="select-loan-term-15">15</SelectItem>
                                <SelectItem value="12-years" data-testid="select-loan-term-12">12</SelectItem>
                                <SelectItem value="10-years" data-testid="select-loan-term-10">10</SelectItem>
                              </SelectContent>
                            </Select>
                          ) : (
                            <Input
                              id="custom-term-input"
                              type="text"
                              placeholder=""
                              value={customTerm}
                              onChange={(e) => {
                                const value = e.target.value;
                                // Only allow digits and max 2 characters
                                if (value === '' || (/^\d{1,2}$/.test(value))) {
                                  setCustomTerm(value);
                                }
                              }}
                              data-testid="input-custom-term"
                            />
                          )}
                        </div>

                        <div className="space-y-2">
                          <Label htmlFor="mid-fico-input">Mid FICO</Label>
                          <div className="flex h-9 w-full rounded-md border border-input bg-muted px-3 py-1 text-sm transition-colors items-center">
                            <span className="font-medium" data-testid="text-mid-fico">
                              {getAbcCalculatedMidFico()}
                            </span>
                          </div>
                        </div>

                        <div className="space-y-2">
                          <Label htmlFor="debt-to-income-input">LTV Ratio</Label>
                          <div className="flex h-9 w-full rounded-md border border-input bg-muted px-3 py-1 text-sm transition-colors items-center">
                            <span className="font-medium" data-testid="text-debt-to-income">
                              {calculateEstimatedLTV()}
                            </span>
                          </div>
                        </div>

                        <div className="space-y-2">
                          <Label htmlFor="dti-ratio-input">DTI Ratio</Label>
                          <Input
                            id="dti-ratio-input"
                            type="text"
                            placeholder=""
                            value={debtToIncomeRatio}
                            onChange={(e) => setDebtToIncomeRatio(e.target.value)}
                            data-testid="input-dti-ratio"
                          />
                        </div>

                        <div className="space-y-2">
                          <div className="flex items-center justify-between mb-2">
                            <Label htmlFor="lender-credit-input">
                              {isSellerCredit ? "Seller Credit" : "Lender Credit"}
                            </Label>
                            <Switch
                              checked={isSellerCredit}
                              onCheckedChange={setIsSellerCredit}
                              data-testid="switch-seller-credit"
                              className="scale-[0.8]"
                            />
                          </div>
                          <Input
                            id="lender-credit-input"
                            type="text"
                            placeholder=""
                            value={lenderCredit.replace(/[^\d]/g, '').replace(/\B(?=(\d{3})+(?!\d))/g, ',')}
                            onChange={(e) => {
                              const value = e.target.value.replace(/[^\d]/g, '');
                              setLenderCredit(value);
                            }}
                            data-testid="input-lender-credit"
                          />
                        </div>
                      </div>
                    </CardContent>
                  )}
                </Card>
                
                {/* Blue Circle Rate Input Buttons - Aligned under Type, Property, Client, Source */}
                {showRateCircles && selectedRateIds.length > 0 && (
                  <>
                    <div className="animate-roll-down px-4" style={{ marginTop: '64px', width: `${250 * (selectedRateIds.length + 1)}px`, maxWidth: '100%' }}>
                      <div className="grid gap-4" style={{ gridTemplateColumns: `repeat(${selectedRateIds.length + 1}, minmax(0, 1fr))` }}>
                        {/* Empty space for Quote column */}
                        <div></div>
                        {/* Circles aligned under Type, Property, Client, Source */}
                        {selectedRateIds.map((rateId) => (
                          <div key={rateId} className="flex justify-center items-center">
                            {editingRateIndex === rateId ? (
                              <div className="relative">
                                <Input
                                  type="text"
                                  value={rateValues[rateId]}
                                  onChange={(e) => {
                                    const value = e.target.value.replace(/[^\d.]/g, '');
                                    const newValues = [...rateValues];
                                    newValues[rateId] = value;
                                    setRateValues(newValues);
                                  }}
                                  onBlur={() => setEditingRateIndex(null)}
                                  onKeyDown={(e) => {
                                    if (e.key === 'Enter') {
                                      setEditingRateIndex(null);
                                    } else if (e.key === 'Tab' && !e.shiftKey) {
                                      e.preventDefault();
                                      const currentIndex = selectedRateIds.indexOf(rateId);
                                      if (currentIndex < selectedRateIds.length - 1) {
                                        setEditingRateIndex(selectedRateIds[currentIndex + 1]);
                                      } else {
                                        setEditingRateIndex(null);
                                        setTimeout(() => {
                                          const firstBalanceInput = document.querySelector(`[data-testid="input-existing-loan-balance-${selectedRateIds[0]}"]`);
                                          if (firstBalanceInput instanceof HTMLElement) {
                                            firstBalanceInput.focus();
                                          }
                                        }, 0);
                                      }
                                    }
                                  }}
                                  placeholder="0.00"
                                  autoFocus
                                  tabIndex={rateId + 1}
                                  className="w-[86px] h-[86px] text-center text-xl font-semibold rounded-full border-4 border-blue-500 bg-white focus:ring-2 focus:ring-blue-300"
                                  data-testid={`input-rate-${rateId}`}
                                />
                                <span className="absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 text-gray-400 text-sm pointer-events-none">
                                  %
                                </span>
                              </div>
                            ) : (
                              <button
                                type="button"
                                onClick={() => setEditingRateIndex(rateId)}
                                tabIndex={rateId + 1}
                                onKeyDown={(e) => {
                                  if (e.key === 'Enter' || e.key === ' ') {
                                    e.preventDefault();
                                    setEditingRateIndex(rateId);
                                  }
                                }}
                                className="w-[86px] h-[86px] rounded-full transition-colors duration-200 flex items-center justify-center text-white font-semibold text-lg shadow-lg hover:shadow-xl border-2"
                                style={{
                                  backgroundColor: '#1a3373',
                                  borderColor: '#0d1a3d'
                                }}
                                onMouseEnter={(e) => {
                                  e.currentTarget.style.backgroundColor = '#0d1a3d';
                                }}
                                onMouseLeave={(e) => {
                                  e.currentTarget.style.backgroundColor = '#1a3373';
                                }}
                                data-testid={`button-rate-circle-${rateId}`}
                              >
                                {rateValues[rateId] ? `${rateValues[rateId]}%` : '%'}
                              </button>
                            )}
                          </div>
                        ))}
                      </div>
                    </div>

                    {/* Existing Loan Balance Card */}
                    <Card 
                      className="mt-8 transition-all duration-700 animate-roll-down border-l-4 border-l-green-500 hover:border-2 hover:border-green-500 transition-colors flex-none"
                      style={{ width: `${250 * (selectedRateIds.length + 1)}px`, maxWidth: '100%' }}
                    >
                      <CardContent className="pt-6 space-y-6">
                        <div className="grid gap-4" style={{ gridTemplateColumns: `repeat(${selectedRateIds.length + 1}, minmax(0, 1fr))` }}>
                          <div className="flex items-center justify-end pr-4">
                            <Label className="text-base font-semibold text-right">Existing Loan Balance:</Label>
                          </div>
                          {selectedRateIds.map((rateId) => {
                            const numVal = existingLoanBalanceValues[rateId] ? existingLoanBalanceValues[rateId].replace(/[^\d]/g, '') : '';
                            const displayValue = numVal ? numVal.replace(/\B(?=(\d{3})+(?!\d))/g, ',') : '';
                            const tabIndex = selectedRateIds.length + rateId + 1;
                            
                            return (
                              <div key={rateId} className="flex justify-center">
                                <div className="flex items-center border border-input bg-background px-3 rounded-md w-3/4">
                                  <span className="text-muted-foreground text-sm">$</span>
                                  <Input
                                    type="text"
                                    placeholder=""
                                    value={displayValue}
                                    onChange={(e) => {
                                      const value = e.target.value.replace(/[^\d]/g, '');
                                      const newValues = [...existingLoanBalanceValues];
                                      newValues[rateId] = value;
                                      setExistingLoanBalanceValues(newValues);
                                    }}
                                    tabIndex={tabIndex}
                                    className="border-0 bg-transparent text-center font-medium text-xl focus-visible:ring-0 focus-visible:ring-offset-0"
                                    data-testid={`input-existing-loan-balance-${rateId}`}
                                  />
                                </div>
                              </div>
                            );
                          })}
                        </div>

                        {/* Cash Out Amount Row */}
                        <div className="grid gap-4" style={{ gridTemplateColumns: `repeat(${selectedRateIds.length + 1}, minmax(0, 1fr))` }}>
                          <div className="flex items-center justify-end pr-4">
                            <Label className="text-base font-semibold text-right">Cash Out Amount</Label>
                          </div>
                          {selectedRateIds.map((rateId) => {
                            const numVal = cashOutAmountValues[rateId] ? cashOutAmountValues[rateId].replace(/[^\d]/g, '') : '';
                            const displayValue = numVal ? numVal.replace(/\B(?=(\d{3})+(?!\d))/g, ',') : '';
                            const tabIndex = (2 * selectedRateIds.length) + rateId + 1; // After existing loan balance
                            
                            return (
                              <div key={rateId} className="flex justify-center">
                                <div className="flex items-center border border-input bg-background px-3 rounded-md w-3/4">
                                  <span className="text-muted-foreground text-sm">$</span>
                                  <Input
                                    type="text"
                                    placeholder=""
                                    value={displayValue}
                                    onChange={(e) => {
                                      const value = e.target.value.replace(/[^\d]/g, '');
                                      const newValues = [...cashOutAmountValues];
                                      newValues[rateId] = value;
                                      setCashOutAmountValues(newValues);
                                    }}
                                    tabIndex={tabIndex}
                                    className="border-0 bg-transparent text-center font-medium text-xl focus-visible:ring-0 focus-visible:ring-offset-0"
                                    data-testid={`input-cash-out-amount-${rateId}`}
                                  />
                                </div>
                              </div>
                            );
                          })}
                        </div>
                      </CardContent>
                    </Card>

                    {/* Rate Details Section */}
                    <Card 
                      className="mt-8 transition-all duration-700 animate-roll-down border-l-4 border-l-cyan-500 hover:border-2 hover:border-cyan-500 transition-colors flex-none"
                      style={{ width: `${250 * (selectedRateIds.length + 1)}px`, maxWidth: '100%' }}
                    >
                      <CardContent className="pt-6 space-y-6">
                        {/* Rate Buy Down Row */}
                        <div className="grid gap-4" style={{ gridTemplateColumns: `repeat(${selectedRateIds.length + 1}, minmax(0, 1fr))` }}>
                          <div className="flex items-center justify-end pr-4">
                            <Label className="text-base font-semibold text-right">Rate Buy Down</Label>
                          </div>
                          {selectedRateIds.map((rateId) => {
                            const numVal = rateBuyDownValues[rateId] ? rateBuyDownValues[rateId].replace(/[^\d]/g, '') : '';
                            const displayValue = numVal ? numVal.replace(/\B(?=(\d{3})+(?!\d))/g, ',') : '';
                            const tabIndex = (3 * selectedRateIds.length) + rateId + 1; // After cash out amount
                            
                            return (
                              <div key={rateId} className="flex justify-center">
                                <div className="flex items-center border border-input bg-background px-3 rounded-md w-3/4">
                                  <span className="text-muted-foreground text-sm">$</span>
                                  <Input
                                    type="text"
                                    placeholder=""
                                    value={displayValue}
                                    onChange={(e) => {
                                      const value = e.target.value.replace(/[^\d]/g, '');
                                      const newValues = [...rateBuyDownValues];
                                      newValues[rateId] = value;
                                      setRateBuyDownValues(newValues);
                                    }}
                                    tabIndex={tabIndex}
                                    className="border-0 bg-transparent text-center font-medium text-xl focus-visible:ring-0 focus-visible:ring-offset-0"
                                    data-testid={`input-rate-buy-down-${rateId}`}
                                  />
                                </div>
                              </div>
                            );
                          })}
                        </div>

                      {/* Third Party Services Section */}
                      <div className="border-t pt-6">
                        <div className="grid gap-4 mb-3" style={{ gridTemplateColumns: `repeat(${selectedRateIds.length + 1}, minmax(0, 1fr))` }}>
                          <div className="flex items-center justify-end pr-4">
                            <Label className="text-base font-bold text-right">Third Party Services</Label>
                          </div>
                        </div>

                        {/* VA Funding Fee */}
                        <div className="grid gap-4 mb-2" style={{ gridTemplateColumns: `repeat(${selectedRateIds.length + 1}, minmax(0, 1fr))` }}>
                          <div className="flex items-center justify-end pr-4">
                            <Label className="text-sm text-right text-muted-foreground">• VA Funding Fee</Label>
                          </div>
                          {selectedRateIds.map((rateId) => {
                            const numVal = vaFundingFeeValues[rateId] ? vaFundingFeeValues[rateId].replace(/[^\d]/g, '') : '';
                            const displayValue = numVal ? numVal.replace(/\B(?=(\d{3})+(?!\d))/g, ',') : '';
                            const tabIndex = (4 * selectedRateIds.length) + rateId + 1; // After rate buy down
                            
                            return (
                              <div key={rateId} className="flex justify-center">
                                <div className="flex items-center border border-input bg-background px-3 rounded-md w-3/4">
                                  <span className="text-muted-foreground text-sm">$</span>
                                  <Input
                                    type="text"
                                    placeholder=""
                                    value={displayValue}
                                    onChange={(e) => {
                                      const value = e.target.value.replace(/[^\d]/g, '');
                                      const newValues = [...vaFundingFeeValues];
                                      newValues[rateId] = value;
                                      setVaFundingFeeValues(newValues);
                                    }}
                                    tabIndex={tabIndex}
                                    className="border-0 bg-transparent text-center text-lg focus-visible:ring-0 focus-visible:ring-offset-0"
                                    data-testid={`input-va-funding-fee-${rateId}`}
                                  />
                                </div>
                              </div>
                            );
                          })}
                        </div>

                        {/* VA Appraisal Inspection */}
                        <div className="grid gap-4 mb-2" style={{ gridTemplateColumns: `repeat(${selectedRateIds.length + 1}, minmax(0, 1fr))` }}>
                          <div className="flex items-center justify-end pr-4">
                            <Label className="text-sm text-right text-muted-foreground">• VA Appraisal Inspection</Label>
                          </div>
                          {selectedRateIds.map((rateId) => {
                            const numVal = vaAppraisalValues[rateId] ? vaAppraisalValues[rateId].replace(/[^\d]/g, '') : '';
                            const displayValue = numVal ? numVal.replace(/\B(?=(\d{3})+(?!\d))/g, ',') : '';
                            
                            return (
                              <div key={rateId} className="flex justify-center">
                                <div className="flex items-center border border-input bg-background px-3 rounded-md w-3/4">
                                  <span className="text-muted-foreground text-sm">$</span>
                                  <Input
                                    type="text"
                                    placeholder=""
                                    value={displayValue}
                                    onChange={(e) => {
                                      const value = e.target.value.replace(/[^\d]/g, '');
                                      const newValues = [...vaAppraisalValues];
                                      newValues[rateId] = value;
                                      setVaAppraisalValues(newValues);
                                    }}
                                    className="border-0 bg-transparent text-center text-lg focus-visible:ring-0 focus-visible:ring-offset-0"
                                    data-testid={`input-va-appraisal-${rateId}`}
                                  />
                                </div>
                              </div>
                            );
                          })}
                        </div>

                        {/* VA Termite Report */}
                        <div className="grid gap-4 mb-2" style={{ gridTemplateColumns: `repeat(${selectedRateIds.length + 1}, minmax(0, 1fr))` }}>
                          <div className="flex items-center justify-end pr-4">
                            <Label className="text-sm text-right text-muted-foreground">• VA Termite Report</Label>
                          </div>
                          {selectedRateIds.map((rateId) => {
                            const numVal = vaTermiteValues[rateId] ? vaTermiteValues[rateId].replace(/[^\d]/g, '') : '';
                            const displayValue = numVal ? numVal.replace(/\B(?=(\d{3})+(?!\d))/g, ',') : '';
                            
                            return (
                              <div key={rateId} className="flex justify-center">
                                <div className="flex items-center border border-input bg-background px-3 rounded-md w-3/4">
                                  <span className="text-muted-foreground text-sm">$</span>
                                  <Input
                                    type="text"
                                    placeholder=""
                                    value={displayValue}
                                    onChange={(e) => {
                                      const value = e.target.value.replace(/[^\d]/g, '');
                                      const newValues = [...vaTermiteValues];
                                      newValues[rateId] = value;
                                      setVaTermiteValues(newValues);
                                    }}
                                    className="border-0 bg-transparent text-center text-lg focus-visible:ring-0 focus-visible:ring-offset-0"
                                    data-testid={`input-va-termite-${rateId}`}
                                  />
                                </div>
                              </div>
                            );
                          })}
                        </div>

                        {/* VA Underwriting Services */}
                        <div className="grid gap-4 mb-2" style={{ gridTemplateColumns: `repeat(${selectedRateIds.length + 1}, minmax(0, 1fr))` }}>
                          <div className="flex items-center justify-end pr-4">
                            <Label className="text-sm text-right text-muted-foreground">• VA Underwriting Services</Label>
                          </div>
                          {selectedRateIds.map((rateId) => {
                            const numVal = vaUnderwritingValues[rateId] ? vaUnderwritingValues[rateId].replace(/[^\d]/g, '') : '';
                            const displayValue = numVal ? numVal.replace(/\B(?=(\d{3})+(?!\d))/g, ',') : '';
                            
                            return (
                              <div key={rateId} className="flex justify-center">
                                <div className="flex items-center border border-input bg-background px-3 rounded-md w-3/4">
                                  <span className="text-muted-foreground text-sm">$</span>
                                  <Input
                                    type="text"
                                    placeholder=""
                                    value={displayValue}
                                    onChange={(e) => {
                                      const value = e.target.value.replace(/[^\d]/g, '');
                                      const newValues = [...vaUnderwritingValues];
                                      newValues[rateId] = value;
                                      setVaUnderwritingValues(newValues);
                                    }}
                                    className="border-0 bg-transparent text-center text-lg focus-visible:ring-0 focus-visible:ring-offset-0"
                                    data-testid={`input-va-underwriting-${rateId}`}
                                  />
                                </div>
                              </div>
                            );
                          })}
                        </div>

                        {/* Title & Escrow Services */}
                        <div className="grid gap-4 mb-2" style={{ gridTemplateColumns: `repeat(${selectedRateIds.length + 1}, minmax(0, 1fr))` }}>
                          <div className="flex items-center justify-end pr-4">
                            <Label className="text-sm text-right text-muted-foreground">• Title & Escrow Services</Label>
                          </div>
                          {selectedRateIds.map((rateId) => {
                            const numVal = titleEscrowValues[rateId] ? titleEscrowValues[rateId].replace(/[^\d]/g, '') : '';
                            const displayValue = numVal ? numVal.replace(/\B(?=(\d{3})+(?!\d))/g, ',') : '';
                            
                            return (
                              <div key={rateId} className="flex justify-center">
                                <div className="flex items-center border border-input bg-background px-3 rounded-md w-3/4">
                                  <span className="text-muted-foreground text-sm">$</span>
                                  <Input
                                    type="text"
                                    placeholder=""
                                    value={displayValue}
                                    onChange={(e) => {
                                      const value = e.target.value.replace(/[^\d]/g, '');
                                      const newValues = [...titleEscrowValues];
                                      newValues[rateId] = value;
                                      setTitleEscrowValues(newValues);
                                    }}
                                    className="border-0 bg-transparent text-center text-lg focus-visible:ring-0 focus-visible:ring-offset-0"
                                    data-testid={`input-title-escrow-${rateId}`}
                                  />
                                </div>
                              </div>
                            );
                          })}
                        </div>

                        {/* Pay Off Interest */}
                        <div className="grid gap-4 mb-2" style={{ gridTemplateColumns: `repeat(${selectedRateIds.length + 1}, minmax(0, 1fr))` }}>
                          <div className="flex items-center justify-end pr-4">
                            <Label className="text-sm text-right text-muted-foreground">• Pay Off Interest</Label>
                          </div>
                          {selectedRateIds.map((rateId) => {
                            const numVal = payOffInterestValues[rateId] ? payOffInterestValues[rateId].replace(/[^\d]/g, '') : '';
                            const displayValue = numVal ? numVal.replace(/\B(?=(\d{3})+(?!\d))/g, ',') : '';
                            
                            return (
                              <div key={rateId} className="flex justify-center">
                                <div className="flex items-center border border-input bg-background px-3 rounded-md w-3/4">
                                  <span className="text-muted-foreground text-sm">$</span>
                                  <Input
                                    type="text"
                                    placeholder=""
                                    value={displayValue}
                                    onChange={(e) => {
                                      const value = e.target.value.replace(/[^\d]/g, '');
                                      const newValues = [...payOffInterestValues];
                                      newValues[rateId] = value;
                                      setPayOffInterestValues(newValues);
                                    }}
                                    className="border-0 bg-transparent text-center text-lg focus-visible:ring-0 focus-visible:ring-offset-0"
                                    data-testid={`input-pay-off-interest-${rateId}`}
                                  />
                                </div>
                              </div>
                            );
                          })}
                        </div>

                        {/* State Tax & Recording */}
                        <div className="grid gap-4" style={{ gridTemplateColumns: `repeat(${selectedRateIds.length + 1}, minmax(0, 1fr))` }}>
                          <div className="flex items-center justify-end pr-4">
                            <Label className="text-sm text-right text-muted-foreground">• State Tax & Recording</Label>
                          </div>
                          {selectedRateIds.map((rateId) => {
                            const numVal = stateTaxValues[rateId] ? stateTaxValues[rateId].replace(/[^\d]/g, '') : '';
                            const displayValue = numVal ? numVal.replace(/\B(?=(\d{3})+(?!\d))/g, ',') : '';
                            
                            return (
                              <div key={rateId} className="flex justify-center">
                                <div className="flex items-center border border-input bg-background px-3 rounded-md w-3/4">
                                  <span className="text-muted-foreground text-sm">$</span>
                                  <Input
                                    type="text"
                                    placeholder=""
                                    value={displayValue}
                                    onChange={(e) => {
                                      const value = e.target.value.replace(/[^\d]/g, '');
                                      const newValues = [...stateTaxValues];
                                      newValues[rateId] = value;
                                      setStateTaxValues(newValues);
                                    }}
                                    className="border-0 bg-transparent text-center text-lg focus-visible:ring-0 focus-visible:ring-offset-0"
                                    data-testid={`input-state-tax-${rateId}`}
                                  />
                                </div>
                              </div>
                            );
                          })}
                        </div>
                      </div>

                      {/* New Escrow Reserves Section - Conditionally shown */}
                      {escrowReserves !== 'escrow-not-included' && (
                        <div className="border-t pt-6">
                          <div className="grid gap-4" style={{ gridTemplateColumns: `repeat(${selectedRateIds.length + 1}, minmax(0, 1fr))` }}>
                            <div className="flex flex-col items-end justify-center pr-4">
                              <div className="flex items-center gap-2">
                                <Info 
                                  className="h-4 w-4 text-muted-foreground cursor-pointer hover:text-foreground transition-colors" 
                                  data-testid="icon-info-escrow-reserves"
                                  onClick={() => setIsEscrowInfoOpen(true)}
                                />
                                <Label className="text-base font-bold text-right">New Escrow Reserves</Label>
                              </div>
                              {monthlyEscrow && monthlyEscrow !== 'select' && (
                                <span className="text-sm text-muted-foreground text-right mt-1">
                                  {monthlyEscrow === 'includes-tax-insurance' && 'Includes Tax & Insurance'}
                                  {monthlyEscrow === 'includes-tax-only' && 'Includes Tax Only'}
                                  {monthlyEscrow === 'includes-insurance-only' && 'Includes Insurance Only'}
                                </span>
                              )}
                            </div>
                            {selectedRateIds.map((rateId) => {
                              const displayValue = calculatedTotalMonthlyEscrow > 0 ? calculatedTotalMonthlyEscrow.toLocaleString('en-US') : '';
                              
                              return (
                                <div key={rateId} className="flex justify-center">
                                  <div className="flex items-center border border-input bg-background px-3 rounded-md w-3/4">
                                    <span className="text-muted-foreground text-sm">$</span>
                                    <Input
                                      type="text"
                                      placeholder=""
                                      value={displayValue}
                                      readOnly
                                      className="border-0 bg-transparent text-center font-medium text-xl focus-visible:ring-0 focus-visible:ring-offset-0"
                                      data-testid={`input-escrow-reserves-${rateId}`}
                                    />
                                  </div>
                                </div>
                              );
                            })}
                          </div>
                        </div>
                      )}
                      </CardContent>
                    </Card>

                    {/* New Est. Loan Amount & New Monthly Payment Card */}
                    <Card 
                      className="mt-8 transition-all duration-700 animate-roll-down border-l-4 border-l-blue-500 hover:border-2 hover:border-blue-500 transition-colors flex-none"
                      style={{ width: `${250 * (selectedRateIds.length + 1)}px`, maxWidth: '100%' }}
                    >
                      <CardContent className="pt-6 space-y-6">
                        {/* New Est. Loan Amount Row - Auto-calculated */}
                        <div className="grid gap-4" style={{ gridTemplateColumns: `repeat(${selectedRateIds.length + 1}, minmax(0, 1fr))` }}>
                          <div className="flex items-center justify-end pr-4 gap-2">
                            {isMonthlyPaymentRowExpanded ? (
                              <ChevronDown 
                                className="h-4 w-4 text-muted-foreground cursor-pointer hover:text-foreground transition-colors" 
                                onClick={() => setIsMonthlyPaymentRowExpanded(false)}
                                data-testid="icon-collapse-monthly-payment" 
                              />
                            ) : (
                              <ChevronUp 
                                className="h-4 w-4 text-muted-foreground cursor-pointer hover:text-foreground transition-colors" 
                                onClick={() => setIsMonthlyPaymentRowExpanded(true)}
                                data-testid="icon-expand-monthly-payment" 
                              />
                            )}
                            <Info 
                              className="h-4 w-4 text-muted-foreground cursor-pointer hover:text-foreground transition-colors" 
                              onClick={() => setIsEstLoanAmountInfoOpen(true)}
                              data-testid="icon-info-loan-amount" 
                            />
                            <Label className="text-base font-semibold text-right">New Est. Loan Amount:</Label>
                          </div>
                          {selectedRateIds.map((rateId) => {
                            const total = rateColumnTotals[rateId];
                            const displayValue = total > 0 ? total.toLocaleString('en-US') : '';
                            
                            return (
                              <div key={rateId} className="flex justify-center">
                                <div className="flex items-center px-3 rounded-md w-3/4">
                                  <span className="text-base font-bold text-center w-full" data-testid={`text-new-est-loan-amount-${rateId}`}>
                                    {displayValue ? `$${displayValue}` : ''}
                                  </span>
                                </div>
                              </div>
                            );
                          })}
                        </div>

                        {/* New Monthly Payment Row - Auto-calculated */}
                        {isMonthlyPaymentRowExpanded && (
                          <div className="border-t pt-6">
                            <div className="grid gap-4" style={{ gridTemplateColumns: `repeat(${selectedRateIds.length + 1}, minmax(0, 1fr))` }}>
                              <div className="flex items-center justify-end pr-4 gap-2">
                                {isSavingsRowExpanded ? (
                                  <ChevronDown 
                                    className="h-4 w-4 text-muted-foreground cursor-pointer hover:text-foreground transition-colors" 
                                    onClick={() => setIsSavingsRowExpanded(false)}
                                    data-testid="icon-collapse-savings" 
                                  />
                                ) : (
                                  <ChevronUp 
                                    className="h-4 w-4 text-muted-foreground cursor-pointer hover:text-foreground transition-colors" 
                                    onClick={() => setIsSavingsRowExpanded(true)}
                                    data-testid="icon-expand-savings" 
                                  />
                                )}
                                <Info 
                                  className="h-4 w-4 text-muted-foreground cursor-pointer hover:text-foreground transition-colors" 
                                  onClick={() => setIsNewPaymentInfoOpen(true)}
                                  data-testid="icon-info-monthly-payment" 
                                />
                                <Label className="text-base font-semibold text-right">New Monthly Payment:</Label>
                              </div>
                              {selectedRateIds.map((rateId) => {
                                const calculatedPayment = calculatedMonthlyPayments[rateId];
                                const displayValue = calculatedPayment ? parseInt(calculatedPayment, 10).toLocaleString('en-US') : '';
                                
                                return (
                                  <div key={rateId} className="flex justify-center">
                                    <div className="flex items-center px-3 rounded-md w-3/4">
                                      <span className="text-base font-bold text-center w-full" data-testid={`text-new-monthly-payment-${rateId}`}>
                                        {displayValue ? `$${displayValue}` : ''}
                                      </span>
                                    </div>
                                  </div>
                                );
                              })}
                            </div>
                          </div>
                        )}

                        {/* Total Monthly Savings Row */}
                        {isMonthlyPaymentRowExpanded && isSavingsRowExpanded && (
                          <div className="border-t pt-6">
                            <div className="grid gap-4" style={{ gridTemplateColumns: `repeat(${selectedRateIds.length + 1}, minmax(0, 1fr))` }}>
                              <div className="flex items-center justify-end pr-4 gap-2">
                                <Info 
                                  className="h-4 w-4 text-muted-foreground cursor-pointer hover:text-foreground transition-colors -mr-0.5" 
                                  onClick={() => setIsMonthlySavingsInfoOpen(true)}
                                  data-testid="icon-info-monthly-savings" 
                                />
                                <Label className="text-base font-semibold text-right">Total Monthly Savings:</Label>
                              </div>
                            {selectedRateIds.map((rateId) => {
                              const calculatedSavings = calculatedTotalMonthlySavings[rateId];
                              const displayValue = calculatedSavings ? parseInt(calculatedSavings, 10).toLocaleString('en-US') : '';
                              
                              return (
                                <div key={rateId} className="flex justify-center">
                                  <div className="flex items-center px-3 rounded-md w-3/4">
                                    <span className="text-base font-bold text-center w-full" data-testid={`text-total-monthly-savings-${rateId}`}>
                                      {displayValue ? `$${displayValue}` : ''}
                                    </span>
                                  </div>
                                </div>
                              );
                            })}
                            </div>
                          </div>
                        )}
                      </CardContent>
                    </Card>
                  </>
                )}
              </div>
            </TabsContent>

            {/* Notes Tab */}
            <TabsContent value="notes" className="space-y-6">
              <Card>
                <CardHeader>
                  <CardTitle>Notes</CardTitle>
                </CardHeader>
                <CardContent>
                  <p className="text-muted-foreground">Notes functionality will be implemented here.</p>
                </CardContent>
              </Card>
            </TabsContent>
          </Tabs>
        </form>
      </div>

      {/* Escrow Information Dialog */}
      <Dialog open={isEscrowInfoOpen} onOpenChange={setIsEscrowInfoOpen}>
        <DialogContent className="sm:max-w-[500px] p-0">
          <DialogHeader className="text-white p-6 rounded-t-lg" style={{ backgroundColor: '#1a3373' }}>
            <DialogTitle className="text-white">New Escrow Reserves</DialogTitle>
          </DialogHeader>
          <div className="space-y-4 py-4 px-6 bg-gradient-to-r from-gray-50 to-white dark:from-gray-900 dark:to-gray-800">
            {/* Property Insurance Reserves */}
            <div className="flex items-center gap-4">
              <Label htmlFor="property-insurance" className="w-48 text-right">
                Property Insurance Reserves:
              </Label>
              <div className="flex items-center border border-input bg-background px-3 rounded-md flex-1">
                <span className="text-muted-foreground text-sm">$</span>
                <Input
                  id="property-insurance"
                  type="text"
                  placeholder=""
                  value={propertyInsurancePayment.replace(/[^\d]/g, '').replace(/\B(?=(\d{3})+(?!\d))/g, ',')}
                  onChange={(e) => {
                    const value = e.target.value.replace(/[^\d]/g, '');
                    setPropertyInsurancePayment(value);
                  }}
                  className="border-0 bg-transparent focus-visible:ring-0 focus-visible:ring-offset-0"
                  data-testid="input-property-insurance"
                />
              </div>
            </div>

            {/* Property Tax Reserves */}
            <div className="flex items-center gap-4">
              <Label htmlFor="property-tax" className="w-48 text-right">
                Property Tax Reserves:
              </Label>
              <div className="flex items-center border border-input bg-background px-3 rounded-md flex-1">
                <span className="text-muted-foreground text-sm">$</span>
                <Input
                  id="property-tax"
                  type="text"
                  placeholder=""
                  value={propertyTaxPayment.replace(/[^\d]/g, '').replace(/\B(?=(\d{3})+(?!\d))/g, ',')}
                  onChange={(e) => {
                    const value = e.target.value.replace(/[^\d]/g, '');
                    setPropertyTaxPayment(value);
                  }}
                  className="border-0 bg-transparent focus-visible:ring-0 focus-visible:ring-offset-0"
                  data-testid="input-property-tax"
                />
              </div>
            </div>

            {/* Total New Escrow Reserves - Display Only (Auto-calculated) */}
            <div className="flex items-center gap-4">
              <Label htmlFor="total-monthly-escrow" className="w-48 text-right">
                Total New Escrow Reserves:
              </Label>
              <div className="flex items-center border border-input bg-muted px-3 rounded-md flex-1 h-9">
                <span className="text-base font-bold text-center w-full" data-testid="text-total-monthly-escrow">
                  {calculatedTotalMonthlyEscrow > 0 ? `$${calculatedTotalMonthlyEscrow.toLocaleString('en-US')}` : ''}
                </span>
              </div>
            </div>

            {/* Spacing */}
            <div className="h-8"></div>

            {/* Message */}
            <div className="text-lg text-muted-foreground">
              Your current monthly escrow balance, as shown on your latest mortgage statement, will be refunded to you once your new loan funds. Your new escrow reserve balance will be adjusted and updated to replace the previous balance.
            </div>

            {/* Statement Escrow Balance */}
            <div className="flex items-center gap-4">
              <Label htmlFor="statement-escrow-balance" className="w-48 text-right">
                Statement Escrow Balance:
              </Label>
              <div className="flex items-center border border-input bg-background px-3 rounded-md flex-1">
                <span className="text-muted-foreground text-sm">$</span>
                <Input
                  id="statement-escrow-balance"
                  type="text"
                  placeholder=""
                  value={statementEscrowBalance.replace(/[^\d]/g, '').replace(/\B(?=(\d{3})+(?!\d))/g, ',')}
                  onChange={(e) => {
                    const value = e.target.value.replace(/[^\d]/g, '');
                    setStatementEscrowBalance(value);
                  }}
                  className="border-0 bg-transparent focus-visible:ring-0 focus-visible:ring-offset-0"
                  data-testid="input-statement-escrow-balance"
                />
              </div>
            </div>
          </div>
        </DialogContent>
      </Dialog>

      {/* Estimated New Loan Amount Dialog */}
      <Dialog open={isEstLoanAmountInfoOpen} onOpenChange={setIsEstLoanAmountInfoOpen}>
        <DialogContent className="sm:max-w-[500px] p-0">
          <DialogHeader className="text-white p-6 rounded-t-lg" style={{ backgroundColor: '#1a3373' }}>
            <DialogTitle className="text-white">Estimated New Loan Amount</DialogTitle>
          </DialogHeader>
          <div className="space-y-4 py-6 px-6 bg-gradient-to-r from-gray-50 to-white dark:from-gray-900 dark:to-gray-800">
            {/* Message */}
            <div className="text-lg text-muted-foreground">
              The initial new loan amount is an estimate based on your mortgage statement, which may not reflect the most current balance. The final loan amount will be confirmed once we receive the official payoff demand from your lender.
            </div>
          </div>
        </DialogContent>
      </Dialog>

      {/* New Payment Dialog */}
      <Dialog open={isNewPaymentInfoOpen} onOpenChange={setIsNewPaymentInfoOpen}>
        <DialogContent className="sm:max-w-[500px] p-0">
          <DialogHeader className="text-white p-6 rounded-t-lg" style={{ backgroundColor: '#1a3373' }}>
            <DialogTitle className="text-white">New Monthly Payment</DialogTitle>
          </DialogHeader>
          <div className="space-y-4 py-4 px-6 bg-gradient-to-r from-gray-50 to-white dark:from-gray-900 dark:to-gray-800">
            {/* Monthly Insurance */}
            <div className="flex items-center gap-4">
              <Label htmlFor="monthly-insurance" className="w-48 text-right">
                Monthly Insurance:
              </Label>
              <div className={`flex items-center border border-input px-3 rounded-md flex-1 ${escrowReserves === 'escrow-not-included' ? 'bg-muted' : 'bg-background'}`}>
                <span className="text-muted-foreground text-sm">$</span>
                <Input
                  id="monthly-insurance"
                  type="text"
                  placeholder=""
                  value={monthlyInsurance.replace(/[^\d]/g, '').replace(/\B(?=(\d{3})+(?!\d))/g, ',')}
                  onChange={(e) => {
                    const value = e.target.value.replace(/[^\d]/g, '');
                    setMonthlyInsurance(value);
                  }}
                  disabled={escrowReserves === 'escrow-not-included'}
                  className="border-0 bg-transparent focus-visible:ring-0 focus-visible:ring-offset-0 disabled:cursor-not-allowed disabled:opacity-50"
                  data-testid="input-monthly-insurance"
                />
              </div>
            </div>

            {/* Monthly Property Tax */}
            <div className="flex items-center gap-4">
              <Label htmlFor="monthly-property-tax" className="w-48 text-right">
                Monthly Property Tax:
              </Label>
              <div className={`flex items-center border border-input px-3 rounded-md flex-1 ${escrowReserves === 'escrow-not-included' ? 'bg-muted' : 'bg-background'}`}>
                <span className="text-muted-foreground text-sm">$</span>
                <Input
                  id="monthly-property-tax"
                  type="text"
                  placeholder=""
                  value={monthlyPropertyTax.replace(/[^\d]/g, '').replace(/\B(?=(\d{3})+(?!\d))/g, ',')}
                  onChange={(e) => {
                    const value = e.target.value.replace(/[^\d]/g, '');
                    setMonthlyPropertyTax(value);
                  }}
                  disabled={escrowReserves === 'escrow-not-included'}
                  className="border-0 bg-transparent focus-visible:ring-0 focus-visible:ring-offset-0 disabled:cursor-not-allowed disabled:opacity-50"
                  data-testid="input-monthly-property-tax"
                />
              </div>
            </div>

            {/* Total Monthly Escrow - Display Only (Auto-calculated) */}
            <div className="flex items-center gap-4">
              <Label htmlFor="total-monthly-escrow-payment" className="w-48 text-right">
                Total Monthly Escrow:
              </Label>
              <div className="flex items-center border border-input bg-muted px-3 rounded-md flex-1 h-9">
                <span className="text-base font-bold text-center w-full" data-testid="text-total-monthly-escrow-payment">
                  {calculatedNewPaymentEscrow > 0 ? `$${calculatedNewPaymentEscrow.toLocaleString('en-US')}` : ''}
                </span>
              </div>
            </div>
          </div>
        </DialogContent>
      </Dialog>

      {/* New Monthly Savings Dialog */}
      <Dialog open={isMonthlySavingsInfoOpen} onOpenChange={setIsMonthlySavingsInfoOpen}>
        <DialogContent className="sm:max-w-[600px] p-0">
          <DialogHeader className="text-white p-6 rounded-t-lg" style={{ backgroundColor: '#1a3373' }}>
            <DialogTitle className="text-white">Existing Monthly Payments</DialogTitle>
          </DialogHeader>
          <div className="space-y-4 py-4 px-6 bg-gradient-to-r from-gray-50 to-white dark:from-gray-900 dark:to-gray-800">
            {/* Existing Mortgage Payment */}
            <div className="flex items-center gap-4">
              <Label htmlFor="existing-mortgage-payment" className="w-80 text-right">
                Existing Mortgage Payment:
              </Label>
              <div className="flex items-center border border-input bg-background px-3 rounded-md flex-1">
                <span className="text-muted-foreground text-sm">$</span>
                <Input
                  id="existing-mortgage-payment"
                  type="text"
                  placeholder=""
                  value={existingMortgagePayment.replace(/[^\d]/g, '').replace(/\B(?=(\d{3})+(?!\d))/g, ',')}
                  onChange={(e) => {
                    const value = e.target.value.replace(/[^\d]/g, '');
                    setExistingMortgagePayment(value);
                  }}
                  className="border-0 bg-transparent focus-visible:ring-0 focus-visible:ring-offset-0"
                  data-testid="input-existing-mortgage-payment"
                />
              </div>
            </div>

            {/* Monthly Payment of Debts Marked for Pay Off */}
            <div className="flex items-center gap-4">
              <Label htmlFor="debts-payoff" className="w-80 text-right">
                Monthly Payment of Debts Marked for Pay Off:
              </Label>
              <div className="flex items-center border border-input bg-background px-3 rounded-md flex-1">
                <span className="text-muted-foreground text-sm">$</span>
                <Input
                  id="debts-payoff"
                  type="text"
                  placeholder=""
                  value={monthlyPaymentDebtsPayOff.replace(/[^\d]/g, '').replace(/\B(?=(\d{3})+(?!\d))/g, ',')}
                  onChange={(e) => {
                    const value = e.target.value.replace(/[^\d]/g, '');
                    setMonthlyPaymentDebtsPayOff(value);
                  }}
                  className="border-0 bg-transparent focus-visible:ring-0 focus-visible:ring-offset-0"
                  data-testid="input-debts-payoff"
                />
              </div>
            </div>

            {/* Monthly Payment of Other Debts with Remaining Cash Out Deployed */}
            <div className="flex items-center gap-4">
              <Label htmlFor="other-debts" className="w-80 text-right">
                Monthly Payment of Other Debts with Remaining Cash Out Deployed:
              </Label>
              <div className="flex items-center border border-input bg-background px-3 rounded-md flex-1">
                <span className="text-muted-foreground text-sm">$</span>
                <Input
                  id="other-debts"
                  type="text"
                  placeholder=""
                  value={monthlyPaymentOtherDebts.replace(/[^\d]/g, '').replace(/\B(?=(\d{3})+(?!\d))/g, ',')}
                  onChange={(e) => {
                    const value = e.target.value.replace(/[^\d]/g, '');
                    setMonthlyPaymentOtherDebts(value);
                  }}
                  className="border-0 bg-transparent focus-visible:ring-0 focus-visible:ring-offset-0"
                  data-testid="input-other-debts"
                />
              </div>
            </div>

            {/* Total Existing Monthly Payments - Display Only (Auto-calculated) */}
            <div className="flex items-center gap-4">
              <Label htmlFor="total-existing-payments" className="w-80 text-right">
                Total Existing Monthly Payments:
              </Label>
              <div className="flex items-center border border-input bg-muted px-3 rounded-md flex-1 h-9">
                <span className="text-base font-bold text-center w-full" data-testid="text-total-existing-payments">
                  {calculatedTotalExistingPayments > 0 ? `$${calculatedTotalExistingPayments.toLocaleString('en-US')}` : ''}
                </span>
              </div>
            </div>

          </div>
        </DialogContent>
      </Dialog>

      {/* Sticky Notes Dialog */}
      <Dialog open={isStickyNotesOpen} onOpenChange={setIsStickyNotesOpen}>
        <DialogContent className="sm:max-w-[500px] p-0 bg-yellow-100 border-yellow-300">
          <DialogHeader className="p-6 pb-4">
            <DialogTitle className="flex items-center gap-2 text-yellow-900">
              <StickyNote className="h-5 w-5" />
              Quick Notes
            </DialogTitle>
          </DialogHeader>
          <div className="px-6 pb-6">
            <textarea
              value={stickyNotes}
              onChange={(e) => setStickyNotes(e.target.value)}
              placeholder="Type your quick notes here..."
              className="w-full min-h-[300px] p-4 bg-yellow-50 border border-yellow-300 rounded-md resize-none focus:outline-none focus:ring-2 focus:ring-yellow-400 text-gray-800 placeholder:text-yellow-700/50"
              data-testid="textarea-sticky-notes"
            />
          </div>
        </DialogContent>
      </Dialog>

      {/* Draggable Calculator */}
      {showCalculator && (
        <div
          style={{
            position: 'fixed',
            left: `${calculatorPosition.x}px`,
            top: `${calculatorPosition.y}px`,
            zIndex: 1000,
            cursor: isDragging ? 'grabbing' : 'grab'
          }}
          onMouseDown={(e) => {
            if ((e.target as HTMLElement).closest('.calculator-body')) return;
            setIsDragging(true);
            setDragOffset({
              x: e.clientX - calculatorPosition.x,
              y: e.clientY - calculatorPosition.y
            });
          }}
          onMouseMove={(e) => {
            if (isDragging) {
              setCalculatorPosition({
                x: e.clientX - dragOffset.x,
                y: e.clientY - dragOffset.y
              });
            }
          }}
          onMouseUp={() => setIsDragging(false)}
          onMouseLeave={() => setIsDragging(false)}
        >
          <Card className="w-64 shadow-lg">
            <CardHeader className="pb-3">
              <div className="flex justify-between items-center">
                <CardTitle className="text-sm">Calculator</CardTitle>
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={() => setShowCalculator(false)}
                  className="h-6 w-6 p-0"
                  data-testid="button-close-calculator"
                >
                  <Minus className="h-3 w-3" />
                </Button>
              </div>
            </CardHeader>
            <CardContent className="calculator-body">
              <div className="bg-muted p-3 rounded-md mb-3 text-right font-mono text-xl font-bold">
                {calculatorDisplay}
              </div>
              <div className="grid grid-cols-4 gap-2">
                {['7', '8', '9', '/', '4', '5', '6', '*', '1', '2', '3', '-', 'C', '0', '=', '+'].map((btn) => (
                  <Button
                    key={btn}
                    variant={btn === '=' ? 'default' : 'outline'}
                    size="sm"
                    onClick={() => {
                      if (btn === 'C') {
                        setCalculatorDisplay('0');
                        setCalculatorMemory('');
                        setCalculatorOperator('');
                      } else if (btn === '=') {
                        if (calculatorMemory && calculatorOperator) {
                          const prev = parseFloat(calculatorMemory);
                          const current = parseFloat(calculatorDisplay);
                          let result = 0;
                          switch (calculatorOperator) {
                            case '+': result = prev + current; break;
                            case '-': result = prev - current; break;
                            case '*': result = prev * current; break;
                            case '/': result = prev / current; break;
                          }
                          setCalculatorDisplay(result.toString());
                          setCalculatorMemory('');
                          setCalculatorOperator('');
                        }
                      } else if (['+', '-', '*', '/'].includes(btn)) {
                        setCalculatorMemory(calculatorDisplay);
                        setCalculatorOperator(btn);
                        setCalculatorDisplay('0');
                      } else {
                        setCalculatorDisplay(calculatorDisplay === '0' ? btn : calculatorDisplay + btn);
                      }
                    }}
                    className="h-10"
                    data-testid={`calculator-btn-${btn}`}
                  >
                    {btn}
                  </Button>
                ))}
              </div>
            </CardContent>
          </Card>
        </div>
      )}

      {/* Removal Confirmation Dialog */}
      <Dialog open={confirmRemovalDialog.isOpen} onOpenChange={(open) => !open && setConfirmRemovalDialog({ isOpen: false, type: null })}>
        <DialogContent data-testid="dialog-removal-confirmation">
          <DialogHeader>
            <DialogTitle>
              {confirmRemovalDialog.type === 'third-loan' ? 'Add Third Loan' : 'Confirm Removal'}
            </DialogTitle>
            <DialogDescription>
              <span className="text-red-600 font-medium">
                {confirmRemovalDialog.type === 'current-loan'
                  ? "Removing the current loan will delete all entered data. Would you like to continue?"
                  : confirmRemovalDialog.type === 'second-loan' && confirmRemovalDialog.itemType === 'third-loan'
                  ? "Removing the third loan will delete all entered data. Would you like to continue?"
                  : confirmRemovalDialog.type === 'second-loan' 
                  ? "Removing the second loan will delete all entered data. Would you like to continue?"
                  : confirmRemovalDialog.type === 'third-loan'
                  ? "Would you like to create a third current loan?"
                  : confirmRemovalDialog.type === 'prior-employer'
                  ? "Removing the prior employer will delete all entered data. Would you like to continue?"
                  : "Removing this information will delete any corresponding data. Would you like to still continue?"
                }
              </span>
            </DialogDescription>
          </DialogHeader>
          <DialogFooter className="gap-2">
            <Button
              variant="outline"
              onClick={() => setConfirmRemovalDialog({ isOpen: false, type: null })}
              data-testid="button-removal-no"
            >
              No
            </Button>
            <Button
              variant="destructive"
              onClick={() => {
                if (confirmRemovalDialog.onConfirm) {
                  confirmRemovalDialog.onConfirm();
                }
              }}
              data-testid="button-removal-yes"
            >
              Yes
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      {/* Property Rental Dialog */}
      <Dialog open={propertyRentalDialog.isOpen} onOpenChange={(open) => !open && setPropertyRentalDialog({ isOpen: false, type: null })}>
        <DialogContent data-testid="dialog-property-rental">
          <DialogHeader>
            <DialogTitle>
              {propertyRentalDialog.type === 'add' ? 'Rental Income' : 'Remove Property Rental'}
            </DialogTitle>
            <DialogDescription>
              {propertyRentalDialog.type === 'add' 
                ? 'Please add property details using property menu option. This area will update automatically.'
                : 'Please remove property rental using property menu option.'
              }
            </DialogDescription>
          </DialogHeader>
          <DialogFooter>
            <Button
              onClick={() => setPropertyRentalDialog({ isOpen: false, type: null })}
              data-testid="button-property-rental-ok"
            >
              Ok
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      {/* Subject Property Confirmation Dialog */}
      <Dialog open={subjectConfirmDialog.isOpen} onOpenChange={(open) => !open && handleSubjectPropertyConfirmation(false)}>
        <DialogContent data-testid="dialog-subject-property-confirmation">
          <DialogHeader>
            <DialogTitle>Change Subject Property</DialogTitle>
            <DialogDescription>
              Another property is designated as subject property. Would you like to proceed with this change?
            </DialogDescription>
          </DialogHeader>
          <DialogFooter className="gap-2">
            <Button
              variant="outline"
              onClick={() => handleSubjectPropertyConfirmation(false)}
              data-testid="button-subject-property-no"
            >
              No
            </Button>
            <Button
              onClick={() => handleSubjectPropertyConfirmation(true)}
              data-testid="button-subject-property-yes"
            >
              Yes
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      {/* Property Usage Change Confirmation Dialog */}
      <Dialog open={propertyUsageChangeDialog.isOpen} onOpenChange={(open) => !open && handlePropertyUsageChangeConfirmation(false)}>
        <DialogContent data-testid="dialog-property-usage-change-confirmation">
          <DialogHeader>
            <DialogTitle>Change Property Usage</DialogTitle>
            <DialogDescription>
              You are changing the purpose/use of this property. Would you like to continue?
            </DialogDescription>
          </DialogHeader>
          <DialogFooter className="gap-2">
            <Button
              variant="outline"
              onClick={() => handlePropertyUsageChangeConfirmation(false)}
              data-testid="button-property-usage-change-no"
            >
              No
            </Button>
            <Button
              onClick={() => handlePropertyUsageChangeConfirmation(true)}
              data-testid="button-property-usage-change-yes"
            >
              Yes
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      {/* Unsaved Changes Warning Dialog */}
      <Dialog open={unsavedChangesDialog.isOpen} onOpenChange={(open) => !open && setUnsavedChangesDialog({ isOpen: false })}>
        <DialogContent data-testid="dialog-unsaved-changes-warning">
          <DialogHeader>
            <DialogTitle>Unsaved Changes</DialogTitle>
            <DialogDescription className="text-destructive">
              By returning to dashboard now, unsaved changes will be lost. Do you want to continue?
            </DialogDescription>
          </DialogHeader>
          <DialogFooter className="gap-2">
            <Button
              variant="outline"
              onClick={() => setUnsavedChangesDialog({ isOpen: false })}
              data-testid="button-unsaved-changes-no"
            >
              No
            </Button>
            <Button
              variant="destructive"
              onClick={() => {
                setUnsavedChangesDialog({ isOpen: false });
                setLocation('/admin/dashboard');
              }}
              data-testid="button-unsaved-changes-yes"
            >
              Yes
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      {/* Property Valuation Dialog */}
      <Dialog open={valuationDialog.isOpen} onOpenChange={(open) => !open && closeValuationDialog()}>
        <DialogContent data-testid="dialog-property-valuation">
          <DialogHeader>
            <DialogTitle>
              {valuationDialog.service === 'zillow' && 'Zillow Valuation'}
              {valuationDialog.service === 'redfin' && 'Redfin Valuation'}
              {valuationDialog.service === 'realtor' && 'Realtor.com Valuation'}
            </DialogTitle>
            <DialogDescription>
              Enter the property valuation from {valuationDialog.service === 'zillow' && 'Zillow.com'}
              {valuationDialog.service === 'redfin' && 'Redfin.com'}
              {valuationDialog.service === 'realtor' && 'Realtor.com'}.
              You can save the value for reference or apply it to the estimated property value field.
            </DialogDescription>
          </DialogHeader>
          <div className="grid gap-4 py-4">
            <div className="space-y-2">
              <Label htmlFor="valuation-input">Property Value</Label>
              <Input
                id="valuation-input"
                value={valuationInput}
                onChange={(e) => setValuationInput(e.target.value)}
                placeholder="$0.00"
                data-testid="input-valuation-amount"
              />
            </div>
          </div>
          <DialogFooter className="gap-2">
            <Button
              variant="outline"
              onClick={closeValuationDialog}
              data-testid="button-valuation-cancel"
            >
              Cancel
            </Button>
            <Button
              variant="outline"
              onClick={saveValuation}
              data-testid="button-valuation-save"
            >
              Save
            </Button>
            <Button
              onClick={saveAndApplyValuation}
              className="bg-orange-500 hover:bg-orange-600 text-white"
              data-testid="button-valuation-save-apply"
            >
              Save & Apply to Estimated Value
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      {/* New Loan Conflict Dialog */}
      <Dialog open={showLoanConflictDialog} onOpenChange={(open) => !open && setShowLoanConflictDialog(false)}>
        <DialogContent data-testid="dialog-loan-conflict" className="max-w-md">
          <DialogHeader>
            <DialogTitle className="text-orange-600">Loan Application Already Open</DialogTitle>
            <DialogDescription className="text-gray-700 leading-relaxed">
              A loan application is already open for this client. To proceed, please either close the existing loan application, or create a separate application for a different loan.
            </DialogDescription>
          </DialogHeader>
          <DialogFooter className="pt-4">
            <Button
              onClick={() => setShowLoanConflictDialog(false)}
              className="w-full"
              data-testid="button-loan-conflict-ok"
            >
              OK
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      {/* Business Description Dialog */}
      <Dialog open={businessDescriptionDialog.isOpen} onOpenChange={(open) => !open && closeBusinessDescriptionDialog()}>
        <DialogContent data-testid="dialog-business-description">
          <DialogHeader>
            <DialogTitle>Description</DialogTitle>
          </DialogHeader>
          <div className="grid gap-4 py-4">
            <div className="space-y-2">
              <textarea
                id="business-description-input"
                value={businessDescriptionInput}
                onChange={(e) => setBusinessDescriptionInput(e.target.value)}
                placeholder="Describe the nature of the business, services offered, products sold, etc."
                className="min-h-[120px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 resize-vertical"
                data-testid="textarea-business-description"
                rows={5}
              />
            </div>
          </div>
          <DialogFooter className="gap-2">
            <Button
              variant="outline"
              onClick={closeBusinessDescriptionDialog}
              data-testid="button-business-description-cancel"
            >
              Cancel
            </Button>
            <Button
              onClick={businessDescriptionDialog.type === 'co-borrower' ? saveCoBorrowerBusinessDescription : saveBusinessDescription}
              className="bg-blue-600 hover:bg-blue-700 text-white"
              data-testid="button-business-description-save"
            >
              Save
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      {/* Tax Preparer Dialog */}
      <Dialog open={taxPreparerDialog.isOpen} onOpenChange={(open) => !open && closeTaxPreparerDialog()}>
        <DialogContent data-testid="dialog-tax-preparer">
          <DialogHeader>
            <DialogTitle>Tax Preparer Information</DialogTitle>
          </DialogHeader>
          <div className="grid gap-4 py-4">
            <div className="space-y-2">
              <Label htmlFor="tax-preparer-select">Business tax returns are prepared and filed by</Label>
              <Select
                value={taxPreparerInput}
                onValueChange={(value) => setTaxPreparerInput(value)}
              >
                <SelectTrigger data-testid="select-tax-preparer">
                  <SelectValue placeholder="Select who prepares tax returns" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="Select">Select</SelectItem>
                  <SelectItem value="Borrower(s)">Borrower(s)</SelectItem>
                  <SelectItem value="Tax Preparer">Tax Preparer</SelectItem>
                  <SelectItem value="CPA">CPA</SelectItem>
                  <SelectItem value="Other">Other</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </div>
          <DialogFooter className="gap-2">
            <Button
              variant="outline"
              onClick={closeTaxPreparerDialog}
              data-testid="button-tax-preparer-cancel"
            >
              Cancel
            </Button>
            <Button
              onClick={taxPreparerDialog.type === 'co-borrower' ? saveCoBorrowerTaxPreparer : saveTaxPreparer}
              className="bg-blue-600 hover:bg-blue-700 text-white"
              data-testid="button-tax-preparer-save"
            >
              Save
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      {/* Property Valuation Hover Tooltip */}
      {valuationHover.isVisible && (
        <div
          className="fixed z-50 bg-white dark:bg-gray-800 border-2 border-orange-500 rounded-md shadow-lg p-6 max-w-md w-80"
          style={{
            left: valuationHover.position.x,
            top: valuationHover.position.y,
          }}
          data-testid="tooltip-valuation-hover"
        >
          <div className="text-lg font-medium text-gray-900 dark:text-gray-100 mb-2">
            {valuationHover.service === 'zillow' && 'Zillow Valuation'}
            {valuationHover.service === 'redfin' && 'Redfin Valuation'}
            {valuationHover.service === 'realtor' && 'Realtor.com Valuation'}
          </div>
          <div className="text-base text-gray-600 dark:text-gray-400 mt-2">
            {valuationHover.value ? (
              <span className="font-mono text-green-600 dark:text-green-400">{valuationHover.value}</span>
            ) : (
              <span className="italic text-gray-500">No value saved</span>
            )}
          </div>
          <div className="text-sm text-gray-500 dark:text-gray-500 mt-3 pt-2 border-t border-gray-200 dark:border-gray-600">
            Click to open full editor
          </div>
        </div>
      )}

      {/* Co-Borrower Marital Status Dialog */}
      <AlertDialog open={maritalStatusDialog.isOpen} onOpenChange={(open) => !open && setMaritalStatusDialog({ isOpen: false })}>
        <AlertDialogContent data-testid="dialog-marital-status-coborrower">
          <AlertDialogHeader>
            <AlertDialogTitle>Add Co-Borrower?</AlertDialogTitle>
            <AlertDialogDescription>
              Would you like to add a Co-Borrower?
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel 
              onClick={() => setMaritalStatusDialog({ isOpen: false })}
              data-testid="button-marital-status-not-yet"
            >
              Not Yet
            </AlertDialogCancel>
            <AlertDialogAction 
              onClick={() => {
                setMaritalStatusDialog({ isOpen: false });
                addCoBorrower();
              }}
              data-testid="button-marital-status-yes"
            >
              Yes
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>


      {/* Valuation Summary Dialog */}
      <Dialog open={valuationSummaryDialog.isOpen} onOpenChange={(open) => !open && closeValuationSummary()}>
        <DialogContent data-testid="dialog-valuation-summary">
          <DialogHeader>
            <DialogTitle>Property Valuation Summary</DialogTitle>
            <DialogDescription>
              All valuation estimates for this property
            </DialogDescription>
          </DialogHeader>
          {valuationSummaryDialog.propertyIndex !== null && (
            <div className="space-y-4">
              {(() => {
                const propertyIndex = valuationSummaryDialog.propertyIndex!;
                const property = (form.watch('property.properties') || [])[propertyIndex];
                const clientEstimate = property?.estimatedValue || '';
                const zillowEstimate = property?.valuations?.zillow || '';
                const realtorEstimate = property?.valuations?.realtor || '';
                const redfinEstimate = property?.valuations?.redfin || '';
                const appraisedValue = property?.appraisedValue || '';

                return (
                  <>
                    <div className="grid gap-4">
                      <Card className="border-l-4 border-l-orange-500">
                        <CardContent className="pt-4">
                          <div className="flex justify-between items-center">
                            <div>
                              <p className="font-semibold text-sm text-muted-foreground">APPRAISAL</p>
                            </div>
                            <div className="text-right">
                              <p className="text-xl font-bold text-orange-600 dark:text-orange-400">
                                {formatCurrency(appraisedValue)}
                              </p>
                            </div>
                          </div>
                        </CardContent>
                      </Card>

                      <Card className="border-l-4 border-l-green-500">
                        <CardContent className="pt-4">
                          <div className="flex justify-between items-center">
                            <div>
                              <p className="font-semibold text-sm text-muted-foreground">CLIENT ESTIMATE</p>
                            </div>
                            <div className="text-right">
                              <p className="text-xl font-bold text-green-600 dark:text-green-400">
                                {formatCurrency(clientEstimate)}
                              </p>
                            </div>
                          </div>
                        </CardContent>
                      </Card>

                      <Card className="border-l-4 border-l-blue-500">
                        <CardContent className="pt-4">
                          <div className="flex justify-between items-center">
                            <div>
                              <p className="font-semibold text-sm text-muted-foreground">ZILLOW.COM</p>
                            </div>
                            <div className="text-right">
                              <p className="text-xl font-bold text-blue-600 dark:text-blue-400">
                                {zillowEstimate ? formatCurrency(zillowEstimate) : 'Not available'}
                              </p>
                            </div>
                          </div>
                        </CardContent>
                      </Card>

                      <Card className="border-l-4 border-l-purple-500">
                        <CardContent className="pt-4">
                          <div className="flex justify-between items-center">
                            <div>
                              <p className="font-semibold text-sm text-muted-foreground">REALTOR.COM</p>
                            </div>
                            <div className="text-right">
                              <p className="text-xl font-bold text-purple-600 dark:text-purple-400">
                                {realtorEstimate ? formatCurrency(realtorEstimate) : 'Not available'}
                              </p>
                            </div>
                          </div>
                        </CardContent>
                      </Card>

                      <Card className="border-l-4 border-l-red-500">
                        <CardContent className="pt-4">
                          <div className="flex justify-between items-center">
                            <div>
                              <p className="font-semibold text-sm text-muted-foreground">REDFIN.COM</p>
                            </div>
                            <div className="text-right">
                              <p className="text-xl font-bold text-red-600 dark:text-red-400">
                                {formatCurrency(redfinEstimate)}
                              </p>
                            </div>
                          </div>
                        </CardContent>
                      </Card>
                    </div>
                  </>
                );
              })()}
            </div>
          )}
          <DialogFooter>
            <Button
              onClick={closeValuationSummary}
              data-testid="button-valuation-summary-close"
            >
              Close
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>


      {/* Add Property Confirmation Dialog */}
      <AlertDialog open={addPropertyDialog.isOpen} onOpenChange={(open) => setAddPropertyDialog(prev => ({ ...prev, isOpen: open }))}>
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>Add Property</AlertDialogTitle>
            <AlertDialogDescription>
              {addPropertyDialog.propertyType === 'second-home' 
                ? "Would you like to add additional property?"
                : addPropertyDialog.propertyType === 'investment'
                ? "Would you like to add additional investment property?"
                : ""
              }
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel onClick={() => setAddPropertyDialog({ isOpen: false, propertyType: null })}>
              No
            </AlertDialogCancel>
            <AlertDialogAction 
              onClick={() => {
                if (addPropertyDialog.propertyType) {
                  addProperty(addPropertyDialog.propertyType);
                }
                setAddPropertyDialog({ isOpen: false, propertyType: null });
              }}
            >
              Yes
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>

      {/* Delete Borrower Employer Confirmation Dialog */}
      <AlertDialog open={deleteEmployerDialog.isOpen} onOpenChange={(open) => !open && setDeleteEmployerDialog({ isOpen: false, cardId: '' })}>
        <AlertDialogContent data-testid="dialog-delete-employer">
          <AlertDialogHeader>
            <AlertDialogTitle>Delete Employer Card</AlertDialogTitle>
            <AlertDialogDescription>
              Are you sure you want to delete this employer card? This action cannot be undone.
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel 
              onClick={() => setDeleteEmployerDialog({ isOpen: false, cardId: '' })}
              data-testid="button-cancel-delete-employer"
            >
              Cancel
            </AlertDialogCancel>
            <AlertDialogAction 
              onClick={() => {
                const cardToDelete = deleteEmployerDialog.cardId;
                
                // If removing the default card, clear the checkbox and related fields
                if (cardToDelete === 'template-card') {
                  form.setValue('income.incomeTypes.employment', false);
                  // Clear the employer card list (empty array removes all cards)
                  setBorrowerEmployerCards([]);
                  // Clear all employer form fields
                  const currentCards = borrowerEmployerCards || ['default'];
                  currentCards.forEach(cardId => {
                    const cleanCardId = cardId === 'default' ? 'default' : cardId;
                    const basePath = `income.employers.${cleanCardId}` as const;
                    // Clear employer info
                    form.setValue(`${basePath}.employerName`, '');
                    form.setValue(`${basePath}.jobTitle`, '');
                    form.setValue(`${basePath}.monthlyIncome`, '');
                    form.setValue(`${basePath}.monthlyBonusIncome`, '');
                    form.setValue(`${basePath}.annualBonusIncome`, '');
                    form.setValue(`${basePath}.employmentType`, 'Full-Time');
                    form.setValue(`${basePath}.yearsEmployedYears`, '');
                    form.setValue(`${basePath}.yearsEmployedMonths`, '');
                    form.setValue(`${basePath}.employerAddress.street`, '');
                    form.setValue(`${basePath}.employerAddress.unit`, '');
                    form.setValue(`${basePath}.employerAddress.city`, '');
                    form.setValue(`${basePath}.employerAddress.state`, '');
                    form.setValue(`${basePath}.employerAddress.zip`, '');
                    form.setValue(`${basePath}.employerAddress.county`, '');
                    form.setValue(`${basePath}.employerPhone`, '');
                    form.setValue(`${basePath}.employmentVerificationPhone`, '');
                    form.setValue(`${basePath}.employerRemote`, '');
                  });
                } else {
                  // Remove the specific card
                  setBorrowerEmployerCards(prev => prev.filter(id => id !== cardToDelete));
                  // Clear form fields for this specific card
                  const cleanCardId = cardToDelete;
                  const basePath = `income.employers.${cleanCardId}` as const;
                  form.setValue(`${basePath}.employerName`, '');
                  form.setValue(`${basePath}.jobTitle`, '');
                  form.setValue(`${basePath}.monthlyIncome`, '');
                  form.setValue(`${basePath}.monthlyBonusIncome`, '');
                  form.setValue(`${basePath}.annualBonusIncome`, '');
                  form.setValue(`${basePath}.employmentType`, 'Full-Time');
                  form.setValue(`${basePath}.yearsEmployedYears`, '');
                  form.setValue(`${basePath}.yearsEmployedMonths`, '');
                  form.setValue(`${basePath}.employerAddress.street`, '');
                  form.setValue(`${basePath}.employerAddress.unit`, '');
                  form.setValue(`${basePath}.employerAddress.city`, '');
                  form.setValue(`${basePath}.employerAddress.state`, '');
                  form.setValue(`${basePath}.employerAddress.zip`, '');
                  form.setValue(`${basePath}.employerAddress.county`, '');
                  form.setValue(`${basePath}.employerPhone`, '');
                  form.setValue(`${basePath}.employmentVerificationPhone`, '');
                  form.setValue(`${basePath}.employerRemote`, '');
                }
                
                setDeleteEmployerDialog({ isOpen: false, cardId: '' });
              }}
              data-testid="button-confirm-delete-employer"
              className="bg-red-600 hover:bg-red-700"
            >
              Delete
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>

      {/* Delete Borrower Second Employer Confirmation Dialog */}
      <AlertDialog open={deleteSecondEmployerDialog.isOpen} onOpenChange={(open) => !open && setDeleteSecondEmployerDialog({ isOpen: false, cardId: '' })}>
        <AlertDialogContent data-testid="dialog-delete-second-employer">
          <AlertDialogHeader>
            <AlertDialogTitle>Delete Second Employer Card</AlertDialogTitle>
            <AlertDialogDescription>
              Are you sure you want to delete this second employer card? This action cannot be undone.
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel 
              onClick={() => setDeleteSecondEmployerDialog({ isOpen: false, cardId: '' })}
              data-testid="button-cancel-delete-second-employer"
            >
              Cancel
            </AlertDialogCancel>
            <AlertDialogAction 
              onClick={() => {
                const cardToDelete = deleteSecondEmployerDialog.cardId;
                
                // If removing the default card, clear the checkbox and related fields
                if (cardToDelete === 'second-template-card') {
                  form.setValue('income.incomeTypes.secondEmployment', false);
                  // Clear the second employment card list (empty array removes all cards)
                  setBorrowerSecondEmployerCards([]);
                  // Clear all second employment form fields
                  const currentCards = borrowerSecondEmployerCards || ['default'];
                  currentCards.forEach(cardId => {
                    const cleanCardId = cardId === 'default' ? 'default' : cardId;
                    // Clear employer info
                    form.setValue(`income.secondEmployment.${cleanCardId}.employerName` as any, '');
                    form.setValue(`income.secondEmployment.${cleanCardId}.address` as any, '');
                    form.setValue(`income.secondEmployment.${cleanCardId}.phone` as any, '');
                    form.setValue(`income.secondEmployment.${cleanCardId}.position` as any, '');
                    form.setValue(`income.secondEmployment.${cleanCardId}.monthlySalary` as any, '');
                    // Clear duration info
                    form.setValue(`income.secondEmployment.${cleanCardId}.duration` as any, '');
                  });
                } else {
                  // Remove the specific card
                  setBorrowerSecondEmployerCards(prev => prev.filter(id => id !== cardToDelete));
                  // Clear form fields for this specific card
                  const cleanCardId = cardToDelete;
                  form.setValue(`income.secondEmployment.${cleanCardId}.employerName` as any, '');
                  form.setValue(`income.secondEmployment.${cleanCardId}.address` as any, '');
                  form.setValue(`income.secondEmployment.${cleanCardId}.phone` as any, '');
                  form.setValue(`income.secondEmployment.${cleanCardId}.position` as any, '');
                  form.setValue(`income.secondEmployment.${cleanCardId}.monthlySalary` as any, '');
                  form.setValue(`income.secondEmployment.${cleanCardId}.duration` as any, '');
                }
                
                setDeleteSecondEmployerDialog({ isOpen: false, cardId: '' });
              }}
              data-testid="button-confirm-delete-second-employer"
              className="bg-red-600 hover:bg-red-700"
            >
              Delete
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>

      {/* Delete Co-Borrower Second Employer Confirmation Dialog */}
      <AlertDialog open={deleteCoBorrowerSecondEmployerDialog.isOpen} onOpenChange={(open) => !open && setDeleteCoBorrowerSecondEmployerDialog({ isOpen: false, cardId: '' })}>
        <AlertDialogContent data-testid="dialog-delete-coborrower-second-employer">
          <AlertDialogHeader>
            <AlertDialogTitle>Delete Co-borrower Second Employer Card</AlertDialogTitle>
            <AlertDialogDescription>
              Are you sure you want to delete this co-borrower second employer card? This action cannot be undone.
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel 
              onClick={() => setDeleteCoBorrowerSecondEmployerDialog({ isOpen: false, cardId: '' })}
              data-testid="button-cancel-delete-coborrower-second-employer"
            >
              Cancel
            </AlertDialogCancel>
            <AlertDialogAction 
              onClick={() => {
                const cardToDelete = deleteCoBorrowerSecondEmployerDialog.cardId;
                
                // If removing the default card, clear the checkbox and related fields
                if (cardToDelete === 'coborrower-second-template-card') {
                  form.setValue('coBorrowerIncome.incomeTypes.secondEmployment', false);
                  // Clear the co-borrower second employment card list (empty array removes all cards)
                  setCoBorrowerSecondEmployerCards([]);
                  // Clear all co-borrower second employment form fields
                  const currentCards = coBorrowerSecondEmployerCards || ['default'];
                  currentCards.forEach(cardId => {
                    const cleanCardId = cardId === 'default' ? 'default' : cardId;
                    // Clear employer info
                    form.setValue(`coBorrowerIncome.secondEmployment.${cleanCardId}.employerName` as any, '');
                    form.setValue(`coBorrowerIncome.secondEmployment.${cleanCardId}.address` as any, '');
                    form.setValue(`coBorrowerIncome.secondEmployment.${cleanCardId}.phone` as any, '');
                    form.setValue(`coBorrowerIncome.secondEmployment.${cleanCardId}.position` as any, '');
                    form.setValue(`coBorrowerIncome.secondEmployment.${cleanCardId}.monthlySalary` as any, '');
                    // Clear duration info
                    form.setValue(`coBorrowerIncome.secondEmployment.${cleanCardId}.duration` as any, '');
                  });
                } else {
                  // Remove the specific card
                  setCoBorrowerSecondEmployerCards(prev => prev.filter(id => id !== cardToDelete));
                  // Clear form fields for this specific card
                  const cleanCardId = cardToDelete;
                  form.setValue(`coBorrowerIncome.secondEmployment.${cleanCardId}.employerName` as any, '');
                  form.setValue(`coBorrowerIncome.secondEmployment.${cleanCardId}.address` as any, '');
                  form.setValue(`coBorrowerIncome.secondEmployment.${cleanCardId}.phone` as any, '');
                  form.setValue(`coBorrowerIncome.secondEmployment.${cleanCardId}.position` as any, '');
                  form.setValue(`coBorrowerIncome.secondEmployment.${cleanCardId}.monthlySalary` as any, '');
                  form.setValue(`coBorrowerIncome.secondEmployment.${cleanCardId}.duration` as any, '');
                }
                
                setDeleteCoBorrowerSecondEmployerDialog({ isOpen: false, cardId: '' });
              }}
              data-testid="button-confirm-delete-coborrower-second-employer"
              className="bg-red-600 hover:bg-red-700"
            >
              Delete
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>

      {/* Delete Borrower - Self-Employment Confirmation Dialog */}
      <AlertDialog open={deleteSelfEmploymentDialog.isOpen} onOpenChange={(open) => !open && setDeleteSelfEmploymentDialog({ isOpen: false, cardId: '' })}>
        <AlertDialogContent data-testid="dialog-delete-self-employment">
          <AlertDialogHeader>
            <AlertDialogTitle>Delete Borrower - Self-Employment Card</AlertDialogTitle>
            <AlertDialogDescription>
              Are you sure you want to delete this self-employment card? This action cannot be undone.
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel 
              onClick={() => setDeleteSelfEmploymentDialog({ isOpen: false, cardId: '' })}
              data-testid="button-cancel-delete-self-employment"
            >
              Cancel
            </AlertDialogCancel>
            <AlertDialogAction 
              onClick={() => {
                const cardToDelete = deleteSelfEmploymentDialog.cardId;
                
                // If removing the default card, clear the checkbox and related fields
                if (cardToDelete === 'self-employment-template-card') {
                  form.setValue('income.incomeTypes.selfEmployment', false);
                  // Clear the self-employment card list (empty array removes all cards)
                  setBorrowerSelfEmploymentCards([]);
                  // Clear all self-employment form fields
                  const currentCards = borrowerSelfEmploymentCards || ['default'];
                  currentCards.forEach(cardId => {
                    const cleanCardId = cardId === 'default' ? 'default' : cardId;
                    // Clear business info
                    form.setValue(`income.selfEmployment.${cleanCardId}.businessName` as any, '');
                    form.setValue(`income.selfEmployment.${cleanCardId}.businessType` as any, '');
                    form.setValue(`income.selfEmployment.${cleanCardId}.businessAddress` as any, '');
                    form.setValue(`income.selfEmployment.${cleanCardId}.yearEstablished` as any, '');
                    form.setValue(`income.selfEmployment.${cleanCardId}.netIncome` as any, '');
                    // Clear duration info
                    form.setValue(`income.selfEmployment.${cleanCardId}.duration` as any, '');
                  });
                } else {
                  // Remove the specific card
                  setBorrowerSelfEmploymentCards(prev => prev.filter(id => id !== cardToDelete));
                  // Clear form fields for this specific card
                  const cleanCardId = cardToDelete;
                  form.setValue(`income.selfEmployment.${cleanCardId}.businessName` as any, '');
                  form.setValue(`income.selfEmployment.${cleanCardId}.businessType` as any, '');
                  form.setValue(`income.selfEmployment.${cleanCardId}.businessAddress` as any, '');
                  form.setValue(`income.selfEmployment.${cleanCardId}.yearEstablished` as any, '');
                  form.setValue(`income.selfEmployment.${cleanCardId}.netIncome` as any, '');
                  form.setValue(`income.selfEmployment.${cleanCardId}.duration` as any, '');
                }
                
                setDeleteSelfEmploymentDialog({ isOpen: false, cardId: '' });
              }}
              data-testid="button-confirm-delete-self-employment"
              className="bg-red-600 hover:bg-red-700"
            >
              Delete
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>

      {/* Delete Co-Borrower - Self-Employment Confirmation Dialog */}
      <AlertDialog open={deleteCoBorrowerSelfEmploymentDialog.isOpen} onOpenChange={(open) => !open && setDeleteCoBorrowerSelfEmploymentDialog({ isOpen: false, cardId: '' })}>
        <AlertDialogContent data-testid="dialog-delete-co-borrower-self-employment">
          <AlertDialogHeader>
            <AlertDialogTitle>Delete Co-Borrower - Self-Employment Card</AlertDialogTitle>
            <AlertDialogDescription>
              Are you sure you want to delete this co-borrower self-employment card? This action cannot be undone.
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel 
              onClick={() => setDeleteCoBorrowerSelfEmploymentDialog({ isOpen: false, cardId: '' })}
              data-testid="button-cancel-delete-co-borrower-self-employment"
            >
              Cancel
            </AlertDialogCancel>
            <AlertDialogAction 
              onClick={() => {
                const cardToDelete = deleteCoBorrowerSelfEmploymentDialog.cardId;
                
                // If removing the default card, clear the checkbox and related fields
                if (cardToDelete === 'co-borrower-self-employment-template-card') {
                  form.setValue('coBorrowerIncome.incomeTypes.selfEmployment', false);
                  // Clear the self-employment card list (empty array removes all cards)
                  setCoBorrowerSelfEmploymentCards([]);
                  // Clear all self-employment form fields
                  const currentCards = coBorrowerSelfEmploymentCards || ['default'];
                  currentCards.forEach(cardId => {
                    const cleanCardId = cardId === 'default' ? 'default' : cardId;
                    // Clear business info
                    form.setValue(`coBorrowerIncome.selfEmployment.${cleanCardId}.businessName` as any, '');
                    form.setValue(`coBorrowerIncome.selfEmployment.${cleanCardId}.businessType` as any, '');
                    form.setValue(`coBorrowerIncome.selfEmployment.${cleanCardId}.businessAddress` as any, '');
                    form.setValue(`coBorrowerIncome.selfEmployment.${cleanCardId}.yearEstablished` as any, '');
                    form.setValue(`coBorrowerIncome.selfEmployment.${cleanCardId}.netIncome` as any, '');
                    // Clear duration info
                    form.setValue(`coBorrowerIncome.selfEmployment.${cleanCardId}.duration` as any, '');
                  });
                } else {
                  // Remove the specific card
                  setCoBorrowerSelfEmploymentCards(prev => prev.filter(id => id !== cardToDelete));
                  // Clear form fields for this specific card
                  const cleanCardId = cardToDelete;
                  form.setValue(`coBorrowerIncome.selfEmployment.${cleanCardId}.businessName` as any, '');
                  form.setValue(`coBorrowerIncome.selfEmployment.${cleanCardId}.businessType` as any, '');
                  form.setValue(`coBorrowerIncome.selfEmployment.${cleanCardId}.businessAddress` as any, '');
                  form.setValue(`coBorrowerIncome.selfEmployment.${cleanCardId}.yearEstablished` as any, '');
                  form.setValue(`coBorrowerIncome.selfEmployment.${cleanCardId}.netIncome` as any, '');
                  form.setValue(`coBorrowerIncome.selfEmployment.${cleanCardId}.duration` as any, '');
                }
                
                setDeleteCoBorrowerSelfEmploymentDialog({ isOpen: false, cardId: '' });
              }}
              data-testid="button-confirm-delete-co-borrower-self-employment"
              className="bg-red-600 hover:bg-red-700"
            >
              Delete
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>

      {/* Delete Co-Borrower Employer Confirmation Dialog */}
      <AlertDialog open={deleteCoBorrowerEmployerDialog.isOpen} onOpenChange={(open) => !open && setDeleteCoBorrowerEmployerDialog({ isOpen: false, cardId: '' })}>
        <AlertDialogContent data-testid="dialog-delete-coborrower-employer">
          <AlertDialogHeader>
            <AlertDialogTitle>Delete Co-Borrower Employer Card</AlertDialogTitle>
            <AlertDialogDescription>
              Are you sure you want to delete this co-borrower employer card? This action cannot be undone.
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel 
              onClick={() => setDeleteCoBorrowerEmployerDialog({ isOpen: false, cardId: '' })}
              data-testid="button-cancel-delete-coborrower-employer"
            >
              Cancel
            </AlertDialogCancel>
            <AlertDialogAction 
              onClick={() => {
                const cardToDelete = deleteCoBorrowerEmployerDialog.cardId;
                const currentCards = coBorrowerEmployerCards || ['default'];
                
                // Clear form data for the deleted card
                const cleanCardId = cardToDelete === 'coborrower-template-card' ? 'default' : cardToDelete;
                const basePath = `coBorrowerIncome.employers.${cleanCardId}` as const;
                
                form.setValue(`${basePath}.employerName`, '');
                form.setValue(`${basePath}.jobTitle`, '');
                form.setValue(`${basePath}.monthlyIncome`, '');
                form.setValue(`${basePath}.monthlyBonusIncome`, '');
                form.setValue(`${basePath}.annualBonusIncome`, '');
                form.setValue(`${basePath}.employmentType`, 'Full-Time');
                form.setValue(`${basePath}.yearsEmployedYears`, '');
                form.setValue(`${basePath}.yearsEmployedMonths`, '');
                form.setValue(`${basePath}.employerAddress.street`, '');
                form.setValue(`${basePath}.employerAddress.unit`, '');
                form.setValue(`${basePath}.employerAddress.city`, '');
                form.setValue(`${basePath}.employerAddress.state`, '');
                form.setValue(`${basePath}.employerAddress.zip`, '');
                form.setValue(`${basePath}.employerAddress.county`, '');
                form.setValue(`${basePath}.employerPhone`, '');
                form.setValue(`${basePath}.employmentVerificationPhone`, '');
                form.setValue(`${basePath}.employerRemote`, '');
                
                // Remove the specific card from state
                const updatedCards = currentCards.filter(id => 
                  cardToDelete === 'coborrower-template-card' ? id !== 'default' : id !== cardToDelete
                );
                setCoBorrowerEmployerCards(updatedCards);
                
                // If no cards remain, uncheck the employment checkbox
                if (updatedCards.length === 0) {
                  form.setValue('coBorrowerIncome.incomeTypes.employment', false);
                }
                
                setDeleteCoBorrowerEmployerDialog({ isOpen: false, cardId: '' });
              }}
              data-testid="button-confirm-delete-coborrower-employer"
              className="bg-red-600 hover:bg-red-700"
            >
              Delete
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>

      {/* Delete Primary Residence Confirmation Dialog */}
      <AlertDialog open={deletePrimaryResidenceDialog.isOpen} onOpenChange={(open) => !open && setDeletePrimaryResidenceDialog({ isOpen: false, cardId: '' })}>
        <AlertDialogContent data-testid="dialog-delete-primary-residence">
          <AlertDialogHeader>
            <AlertDialogTitle>Delete Primary Residence Card</AlertDialogTitle>
            <AlertDialogDescription>
              Are you sure you want to delete this primary residence card? This action cannot be undone.
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel 
              onClick={() => setDeletePrimaryResidenceDialog({ isOpen: false, cardId: '' })}
              data-testid="button-cancel-delete-primary-residence"
            >
              Cancel
            </AlertDialogCancel>
            <AlertDialogAction 
              onClick={() => {
                const cardToDelete = deletePrimaryResidenceDialog.cardId;
                
                // If removing the default card, clear the checkbox and related fields
                if (cardToDelete === 'primary-template-card') {
                  // Clear the primary residence card list (empty array removes all cards)
                  setPrimaryResidenceCards([]);
                  // Clear all data state
                  setPrimaryResidenceData({});
                } else {
                  // Remove the specific card
                  setPrimaryResidenceCards(prev => prev.filter(id => id !== cardToDelete));
                  // Remove data state for this card
                  setPrimaryResidenceData(prev => {
                    const newData = { ...prev };
                    delete newData[cardToDelete];
                    return newData;
                  });
                }
                
                // If no cards remain, uncheck the checkbox to allow new card creation
                const remainingCards = primaryResidenceCards.filter(id => id !== cardToDelete);
                if (remainingCards.length === 0) {
                  // Clear the property form fields and remove from property array
                  const currentProperties = form.watch('property.properties') || [];
                  const updatedProperties = currentProperties.filter(p => p.use !== 'primary');
                  form.setValue('property.properties', updatedProperties);
                }
                
                setDeletePrimaryResidenceDialog({ isOpen: false, cardId: '' });
              }}
              data-testid="button-confirm-delete-primary-residence"
              className="bg-red-600 hover:bg-red-700"
            >
              Delete
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>

      {/* Delete Home Purchase Confirmation Dialog */}
      <AlertDialog open={deleteHomePurchaseDialog.isOpen} onOpenChange={(open) => !open && setDeleteHomePurchaseDialog({ isOpen: false, cardId: '' })}>
        <AlertDialogContent data-testid="dialog-delete-home-purchase">
          <AlertDialogHeader>
            <AlertDialogTitle>Delete Home Purchase Card</AlertDialogTitle>
            <AlertDialogDescription>
              Are you sure you want to delete this home purchase card? This action cannot be undone.
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel 
              onClick={() => setDeleteHomePurchaseDialog({ isOpen: false, cardId: '' })}
              data-testid="button-cancel-delete-home-purchase"
            >
              Cancel
            </AlertDialogCancel>
            <AlertDialogAction 
              onClick={() => {
                const cardToDelete = deleteHomePurchaseDialog.cardId;
                
                // Remove from form data
                const currentProperties = form.watch('property.properties') || [];
                const updatedProperties = currentProperties.filter(property => property.id !== cardToDelete);
                form.setValue('property.properties', updatedProperties);

                // Remove collapsible state for removed property
                setPropertyCardStates(prev => {
                  const { [cardToDelete]: _, ...rest } = prev;
                  return rest;
                });
                
                setDeleteHomePurchaseDialog({ isOpen: false, cardId: '' });
              }}
              data-testid="button-confirm-delete-home-purchase"
              className="bg-red-600 hover:bg-red-700"
            >
              Delete
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>

      {/* Delete Second Home Confirmation Dialog */}
      <AlertDialog open={deleteSecondHomeDialog.isOpen} onOpenChange={(open) => !open && setDeleteSecondHomeDialog({ isOpen: false, cardId: '' })}>
        <AlertDialogContent data-testid="dialog-delete-second-home">
          <AlertDialogHeader>
            <AlertDialogTitle>Delete Second Home Card</AlertDialogTitle>
            <AlertDialogDescription>
              Are you sure you want to delete this second home card? This action cannot be undone.
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel 
              onClick={() => setDeleteSecondHomeDialog({ isOpen: false, cardId: '' })}
              data-testid="button-cancel-delete-second-home"
            >
              Cancel
            </AlertDialogCancel>
            <AlertDialogAction 
              onClick={() => {
                const cardToDelete = deleteSecondHomeDialog.cardId;
                
                // If removing the default card, clear the checkbox and related fields
                if (cardToDelete === 'second-home-template-card') {
                  // Clear the second home card list (empty array removes all cards)
                  setSecondHomeCards([]);
                  // Clear all data state
                  setSecondHomeData({});
                } else {
                  // Remove the specific card
                  setSecondHomeCards(prev => prev.filter(id => id !== cardToDelete));
                  
                  // Clean up data state for this card
                  setSecondHomeData(prev => {
                    const { [cardToDelete]: _, ...rest } = prev;
                    return rest;
                  });

                  // Remove from form data
                  const currentProperties = form.watch('property.properties') || [];
                  const updatedProperties = currentProperties.filter(property => property.id !== cardToDelete);
                  form.setValue('property.properties', updatedProperties);

                  // Remove collapsible state for removed property
                  setPropertyCardStates(prev => {
                    const { [cardToDelete]: _, ...rest } = prev;
                    return rest;
                  });
                }
                
                setDeleteSecondHomeDialog({ isOpen: false, cardId: '' });
              }}
              data-testid="button-confirm-delete-second-home"
              className="bg-red-600 hover:bg-red-700"
            >
              Delete
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>

      {/* Delete Current Primary Loan Confirmation Dialog */}
      <AlertDialog open={deleteCurrentPrimaryLoanDialog.isOpen} onOpenChange={(open) => !open && setDeleteCurrentPrimaryLoanDialog({ isOpen: false, cardId: '' })}>
        <AlertDialogContent data-testid="dialog-delete-current-primary-loan">
          <AlertDialogHeader>
            <AlertDialogTitle>Delete Current Primary Loan Card</AlertDialogTitle>
            <AlertDialogDescription>
              Are you sure you want to delete this current primary loan card? This action cannot be undone.
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel 
              onClick={() => setDeleteCurrentPrimaryLoanDialog({ isOpen: false, cardId: '' })}
              data-testid="button-cancel-delete-current-primary-loan"
            >
              Cancel
            </AlertDialogCancel>
            <AlertDialogAction 
              onClick={() => {
                const cardToDelete = deleteCurrentPrimaryLoanDialog.cardId;
                removeCurrentPrimaryLoanCard(cardToDelete);
              }}
              data-testid="button-confirm-delete-current-primary-loan"
              className="bg-red-600 hover:bg-red-700"
            >
              Delete
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>

      {/* Delete ABC (New Refinance Loan) Card Confirmation Dialog */}
      <AlertDialog open={deleteAbcDialog.isOpen} onOpenChange={(open) => !open && setDeleteAbcDialog({ isOpen: false })}>
        <AlertDialogContent data-testid="dialog-delete-abc">
          <AlertDialogHeader>
            <AlertDialogTitle>Delete New Refinance Loan Card</AlertDialogTitle>
            <AlertDialogDescription>
              Are you sure you want to delete this new refinance loan card? This action cannot be undone.
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel 
              onClick={() => setDeleteAbcDialog({ isOpen: false })}
              data-testid="button-cancel-delete-abc"
            >
              Cancel
            </AlertDialogCancel>
            <AlertDialogAction 
              onClick={() => {
                const cardToDelete = newRefinanceLoanCards[0]; // Get the card ID
                removeNewRefinanceLoanCard(cardToDelete);
              }}
              data-testid="button-confirm-delete-abc"
              className="bg-red-600 hover:bg-red-700"
            >
              Delete
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>

      {/* Delete BBB (New Purchase Loan) Card Confirmation Dialog */}
      <AlertDialog open={deleteBbbDialog.isOpen} onOpenChange={(open) => !open && setDeleteBbbDialog({ isOpen: false })}>
        <AlertDialogContent data-testid="dialog-delete-bbb">
          <AlertDialogHeader>
            <AlertDialogTitle>Delete New Purchase Loan Card</AlertDialogTitle>
            <AlertDialogDescription>
              Are you sure you want to delete this new purchase loan card? This action cannot be undone.
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel 
              onClick={() => setDeleteBbbDialog({ isOpen: false })}
              data-testid="button-cancel-delete-bbb"
            >
              Cancel
            </AlertDialogCancel>
            <AlertDialogAction 
              onClick={() => {
                const cardToDelete = newPurchaseLoanCards[0]; // Get the card ID
                removeNewPurchaseLoanCard(cardToDelete);
              }}
              data-testid="button-confirm-delete-bbb"
              className="bg-red-600 hover:bg-red-700"
            >
              Delete
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>

      {/* New Loan Conflict Warning Dialog */}
      <AlertDialog open={newLoanConflictDialog} onOpenChange={setNewLoanConflictDialog}>
        <AlertDialogContent data-testid="dialog-new-loan-conflict">
          <AlertDialogHeader>
            <AlertDialogTitle>Only One Loan Per Property Allowed</AlertDialogTitle>
            <AlertDialogDescription>
              Only one loan per property is allowed per application. Please either delete the current loan in process or begin a new application for another loan.
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogAction 
              onClick={() => setNewLoanConflictDialog(false)}
              data-testid="button-close-loan-conflict"
            >
              OK
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>

      {/* Delete Current Second Loan Confirmation Dialog */}
      <AlertDialog open={deleteCurrentSecondLoanDialog.isOpen} onOpenChange={(open) => !open && setDeleteCurrentSecondLoanDialog({ isOpen: false, cardId: '' })}>
        <AlertDialogContent data-testid="dialog-delete-current-second-loan">
          <AlertDialogHeader>
            <AlertDialogTitle>Delete Current Second Loan Card</AlertDialogTitle>
            <AlertDialogDescription>
              Are you sure you want to delete this current second loan card? This action cannot be undone.
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel 
              onClick={() => setDeleteCurrentSecondLoanDialog({ isOpen: false, cardId: '' })}
              data-testid="button-cancel-delete-current-second-loan"
            >
              Cancel
            </AlertDialogCancel>
            <AlertDialogAction 
              onClick={() => {
                const cardToDelete = deleteCurrentSecondLoanDialog.cardId;
                removeCurrentSecondLoanCard(cardToDelete);
              }}
              data-testid="button-confirm-delete-current-second-loan"
              className="bg-red-600 hover:bg-red-700"
            >
              Delete
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>

      {/* Delete Investment Property Confirmation Dialog */}
      <AlertDialog open={deleteInvestmentDialog.isOpen} onOpenChange={(open) => !open && setDeleteInvestmentDialog({ isOpen: false, cardId: '' })}>
        <AlertDialogContent data-testid="dialog-delete-investment-property">
          <AlertDialogHeader>
            <AlertDialogTitle>Delete Investment Property Card</AlertDialogTitle>
            <AlertDialogDescription>
              Are you sure you want to delete this investment property card? This action cannot be undone.
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel 
              onClick={() => setDeleteInvestmentDialog({ isOpen: false, cardId: '' })}
              data-testid="button-cancel-delete-investment-property"
            >
              Cancel
            </AlertDialogCancel>
            <AlertDialogAction 
              onClick={() => {
                const cardToDelete = deleteInvestmentDialog.cardId;
                
                // If removing the default card, clear the checkbox and related fields
                if (cardToDelete === 'investment-property-template-card') {
                  // Clear the investment property card list (empty array removes all cards)
                  setInvestmentCards([]);
                  // Clear all data state
                  setInvestmentData({});
                } else {
                  // Remove the specific card
                  setInvestmentCards(prev => prev.filter(id => id !== cardToDelete));
                  
                  // Clean up data state for this card
                  setInvestmentData(prev => {
                    const { [cardToDelete]: _, ...rest } = prev;
                    return rest;
                  });

                  // Remove from form data
                  const currentProperties = form.watch('property.properties') || [];
                  const updatedProperties = currentProperties.filter(property => property.id !== cardToDelete);
                  form.setValue('property.properties', updatedProperties);

                  // Remove collapsible state for removed property
                  setPropertyCardStates(prev => {
                    const { [cardToDelete]: _, ...rest } = prev;
                    return rest;
                  });
                }
                
                setDeleteInvestmentDialog({ isOpen: false, cardId: '' });
              }}
              data-testid="button-confirm-delete-investment-property"
              className="bg-red-600 hover:bg-red-700"
            >
              Delete
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>

      {/* Delete Social Security Income Confirmation Dialog */}
      <AlertDialog open={deleteSocialSecurityDialog.isOpen} onOpenChange={(open) => !open && setDeleteSocialSecurityDialog({ isOpen: false })}>
        <AlertDialogContent data-testid="dialog-delete-social-security">
          <AlertDialogHeader>
            <AlertDialogTitle>Remove Social Security Income</AlertDialogTitle>
            <AlertDialogDescription>
              Are you sure you want to remove the Social Security income section? This will clear all entered data and hide the section. This action cannot be undone.
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel 
              onClick={() => setDeleteSocialSecurityDialog({ isOpen: false })}
              data-testid="button-cancel-delete-social-security"
            >
              Cancel
            </AlertDialogCancel>
            <AlertDialogAction 
              onClick={() => {
                // Clear the income type checkbox and close the section
                form.setValue('income.incomeTypes.socialSecurity', false);
                form.setValue('income.socialSecurityMonthlyAmount', '');
                setIsSocialSecurityIncomeOpen(false);
                setDeleteSocialSecurityDialog({ isOpen: false });
              }}
              data-testid="button-confirm-delete-social-security"
              className="bg-red-600 hover:bg-red-700"
            >
              Remove
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>

      {/* Delete VA Benefits Income Confirmation Dialog */}
      <AlertDialog open={deleteVaBenefitsDialog.isOpen} onOpenChange={(open) => !open && setDeleteVaBenefitsDialog({ isOpen: false })}>
        <AlertDialogContent data-testid="dialog-delete-va-benefits">
          <AlertDialogHeader>
            <AlertDialogTitle>Remove VA Disability Income</AlertDialogTitle>
            <AlertDialogDescription>
              Are you sure you want to remove the VA Disability income section? This will clear all entered data and hide the section. This action cannot be undone.
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel 
              onClick={() => setDeleteVaBenefitsDialog({ isOpen: false })}
              data-testid="button-cancel-delete-va-benefits"
            >
              Cancel
            </AlertDialogCancel>
            <AlertDialogAction 
              onClick={() => {
                // Clear the income type checkbox and close the section
                form.setValue('income.incomeTypes.vaBenefits', false);
                form.setValue('income.vaBenefitsMonthlyAmount', '');
                setIsVaBenefitsIncomeOpen(false);
                setDeleteVaBenefitsDialog({ isOpen: false });
              }}
              data-testid="button-confirm-delete-va-benefits"
              className="bg-red-600 hover:bg-red-700"
            >
              Remove
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>

      {/* Delete Disability Income Confirmation Dialog */}
      <AlertDialog open={deleteDisabilityDialog.isOpen} onOpenChange={(open) => !open && setDeleteDisabilityDialog({ isOpen: false })}>
        <AlertDialogContent data-testid="dialog-delete-disability">
          <AlertDialogHeader>
            <AlertDialogTitle>Remove Disability Income</AlertDialogTitle>
            <AlertDialogDescription>
              Are you sure you want to remove the Disability income section? This will clear all entered data and hide the section. This action cannot be undone.
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel 
              onClick={() => setDeleteDisabilityDialog({ isOpen: false })}
              data-testid="button-cancel-delete-disability"
            >
              Cancel
            </AlertDialogCancel>
            <AlertDialogAction 
              onClick={() => {
                // Clear the income type checkbox and close the section
                form.setValue('income.incomeTypes.disability', false);
                form.setValue('income.disabilityPayerName', '');
                form.setValue('income.disabilityMonthlyAmount', '');
                setIsDisabilityIncomeOpen(false);
                setDeleteDisabilityDialog({ isOpen: false });
              }}
              data-testid="button-confirm-delete-disability"
              className="bg-red-600 hover:bg-red-700"
            >
              Remove
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>

      {/* Delete VA Disability Type Confirmation Dialog */}
      <AlertDialog open={deleteVaDisabilityTypeDialog.isOpen} onOpenChange={(open) => !open && setDeleteVaDisabilityTypeDialog({ isOpen: false })}>
        <AlertDialogContent data-testid="dialog-delete-va-disability-type">
          <AlertDialogHeader>
            <AlertDialogTitle>Remove VA Disability</AlertDialogTitle>
            <AlertDialogDescription>
              Are you sure you want to remove VA Disability? This will clear all entered data for this income type. This action cannot be undone.
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel 
              onClick={() => setDeleteVaDisabilityTypeDialog({ isOpen: false })}
              data-testid="button-cancel-delete-va-disability-type"
            >
              Cancel
            </AlertDialogCancel>
            <AlertDialogAction 
              onClick={() => {
                // Deselect VA Disability and clear its data
                setVaDisabilitySelected(false);
                form.setValue('income.vaBenefitsMonthlyAmount', '');
                form.setValue('income.vaBenefitsStartDate', '');
                setDeleteVaDisabilityTypeDialog({ isOpen: false });
              }}
              data-testid="button-confirm-delete-va-disability-type"
              className="bg-red-600 hover:bg-red-700"
            >
              Remove
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>

      {/* Delete Other Disability Type Confirmation Dialog */}
      <AlertDialog open={deleteOtherDisabilityTypeDialog.isOpen} onOpenChange={(open) => !open && setDeleteOtherDisabilityTypeDialog({ isOpen: false })}>
        <AlertDialogContent data-testid="dialog-delete-other-disability-type">
          <AlertDialogHeader>
            <AlertDialogTitle>Remove Other Disability</AlertDialogTitle>
            <AlertDialogDescription>
              Are you sure you want to remove Other Disability? This will clear all entered data for this income type. This action cannot be undone.
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel 
              onClick={() => setDeleteOtherDisabilityTypeDialog({ isOpen: false })}
              data-testid="button-cancel-delete-other-disability-type"
            >
              Cancel
            </AlertDialogCancel>
            <AlertDialogAction 
              onClick={() => {
                // Deselect Other Disability and clear its data
                setOtherDisabilitySelected(false);
                form.setValue('income.otherDisabilityMonthlyAmount', '');
                form.setValue('income.otherDisabilityStartDate', '');
                setDeleteOtherDisabilityTypeDialog({ isOpen: false });
              }}
              data-testid="button-confirm-delete-other-disability-type"
              className="bg-red-600 hover:bg-red-700"
            >
              Remove
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>

      {/* Delete Co-Borrower VA Disability Type Confirmation Dialog */}
      <AlertDialog open={deleteCoBorrowerVaDisabilityTypeDialog.isOpen} onOpenChange={(open) => !open && setDeleteCoBorrowerVaDisabilityTypeDialog({ isOpen: false })}>
        <AlertDialogContent data-testid="dialog-delete-coborrower-va-disability-type">
          <AlertDialogHeader>
            <AlertDialogTitle>Remove Co-Borrower VA Disability</AlertDialogTitle>
            <AlertDialogDescription>
              Are you sure you want to remove Co-Borrower VA Disability? This will clear all entered data for this income type. This action cannot be undone.
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel 
              onClick={() => setDeleteCoBorrowerVaDisabilityTypeDialog({ isOpen: false })}
              data-testid="button-cancel-delete-coborrower-va-disability-type"
            >
              Cancel
            </AlertDialogCancel>
            <AlertDialogAction 
              onClick={() => {
                // Deselect Co-Borrower VA Disability and clear its data
                setCoBorrowerVaDisabilitySelected(false);
                form.setValue('coBorrowerIncome.vaBenefitsMonthlyAmount', '');
                form.setValue('coBorrowerIncome.vaBenefitsStartDate', '');
                setDeleteCoBorrowerVaDisabilityTypeDialog({ isOpen: false });
              }}
              data-testid="button-confirm-delete-coborrower-va-disability-type"
              className="bg-red-600 hover:bg-red-700"
            >
              Remove
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>

      {/* Delete Co-Borrower Other Disability Type Confirmation Dialog */}
      <AlertDialog open={deleteCoBorrowerOtherDisabilityTypeDialog.isOpen} onOpenChange={(open) => !open && setDeleteCoBorrowerOtherDisabilityTypeDialog({ isOpen: false })}>
        <AlertDialogContent data-testid="dialog-delete-coborrower-other-disability-type">
          <AlertDialogHeader>
            <AlertDialogTitle>Remove Co-Borrower Other Disability</AlertDialogTitle>
            <AlertDialogDescription>
              Are you sure you want to remove Co-Borrower Other Disability? This will clear all entered data for this income type. This action cannot be undone.
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel 
              onClick={() => setDeleteCoBorrowerOtherDisabilityTypeDialog({ isOpen: false })}
              data-testid="button-cancel-delete-coborrower-other-disability-type"
            >
              Cancel
            </AlertDialogCancel>
            <AlertDialogAction 
              onClick={() => {
                // Deselect Co-Borrower Other Disability and clear its data
                setCoBorrowerOtherDisabilitySelected(false);
                form.setValue('coBorrowerIncome.otherDisabilityMonthlyAmount', '');
                form.setValue('coBorrowerIncome.otherDisabilityStartDate', '');
                setDeleteCoBorrowerOtherDisabilityTypeDialog({ isOpen: false });
              }}
              data-testid="button-confirm-delete-coborrower-other-disability-type"
              className="bg-red-600 hover:bg-red-700"
            >
              Remove
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>

      {/* Delete Co-Borrower Social Security Income Confirmation Dialog */}
      <AlertDialog open={deleteCoBorrowerSocialSecurityDialog.isOpen} onOpenChange={(open) => !open && setDeleteCoBorrowerSocialSecurityDialog({ isOpen: false })}>
        <AlertDialogContent data-testid="dialog-delete-coborrower-social-security">
          <AlertDialogHeader>
            <AlertDialogTitle>Remove Co-Borrower Social Security Income</AlertDialogTitle>
            <AlertDialogDescription>
              Are you sure you want to remove the Co-Borrower Social Security income section? This will clear all entered data and hide the section. This action cannot be undone.
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel 
              onClick={() => setDeleteCoBorrowerSocialSecurityDialog({ isOpen: false })}
              data-testid="button-cancel-delete-coborrower-social-security"
            >
              Cancel
            </AlertDialogCancel>
            <AlertDialogAction 
              onClick={() => {
                // Clear the income type checkbox and close the section
                form.setValue('coBorrowerIncome.incomeTypes.socialSecurity', false);
                form.setValue('coBorrowerIncome.socialSecurityMonthlyAmount', '');
                setIsCoBorrowerSocialSecurityIncomeOpen(false);
                setDeleteCoBorrowerSocialSecurityDialog({ isOpen: false });
              }}
              data-testid="button-confirm-delete-coborrower-social-security"
              className="bg-red-600 hover:bg-red-700"
            >
              Remove
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>

      {/* Delete Co-Borrower VA Benefits Income Confirmation Dialog */}
      <AlertDialog open={deleteCoBorrowerVaBenefitsDialog.isOpen} onOpenChange={(open) => !open && setDeleteCoBorrowerVaBenefitsDialog({ isOpen: false })}>
        <AlertDialogContent data-testid="dialog-delete-coborrower-va-benefits">
          <AlertDialogHeader>
            <AlertDialogTitle>Remove Co-Borrower VA Disability Income</AlertDialogTitle>
            <AlertDialogDescription>
              Are you sure you want to remove the Co-Borrower VA Disability income section? This will clear all entered data and hide the section. This action cannot be undone.
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel 
              onClick={() => setDeleteCoBorrowerVaBenefitsDialog({ isOpen: false })}
              data-testid="button-cancel-delete-coborrower-va-benefits"
            >
              Cancel
            </AlertDialogCancel>
            <AlertDialogAction 
              onClick={() => {
                // Clear the income type checkbox and close the section
                form.setValue('coBorrowerIncome.incomeTypes.disability', false);
                form.setValue('coBorrowerIncome.vaBenefitsMonthlyAmount', '');
                form.setValue('coBorrowerIncome.vaBenefitsStartDate', '');
                form.setValue('coBorrowerIncome.otherDisabilityMonthlyAmount', '');
                form.setValue('coBorrowerIncome.otherDisabilityStartDate', '');
                setCoBorrowerVaDisabilitySelected(false);
                setCoBorrowerOtherDisabilitySelected(false);
                setIsCoBorrowerVaBenefitsIncomeOpen(false);
                setDeleteCoBorrowerVaBenefitsDialog({ isOpen: false });
              }}
              data-testid="button-confirm-delete-coborrower-va-benefits"
              className="bg-red-600 hover:bg-red-700"
            >
              Remove
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>

      {/* Delete Co-Borrower Disability Income Confirmation Dialog */}
      <AlertDialog open={deleteCoBorrowerDisabilityDialog.isOpen} onOpenChange={(open) => !open && setDeleteCoBorrowerDisabilityDialog({ isOpen: false })}>
        <AlertDialogContent data-testid="dialog-delete-coborrower-disability">
          <AlertDialogHeader>
            <AlertDialogTitle>Remove Co-Borrower Disability Income</AlertDialogTitle>
            <AlertDialogDescription>
              Are you sure you want to remove the Co-Borrower Disability income section? This will clear all entered data and hide the section. This action cannot be undone.
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel 
              onClick={() => setDeleteCoBorrowerDisabilityDialog({ isOpen: false })}
              data-testid="button-cancel-delete-coborrower-disability"
            >
              Cancel
            </AlertDialogCancel>
            <AlertDialogAction 
              onClick={() => {
                // Clear the income type checkbox and close the section
                form.setValue('coBorrowerIncome.incomeTypes.disability', false);
                form.setValue('coBorrowerIncome.disabilityPayerName', '');
                form.setValue('coBorrowerIncome.disabilityMonthlyAmount', '');
                setIsCoBorrowerDisabilityIncomeOpen(false);
                setDeleteCoBorrowerDisabilityDialog({ isOpen: false });
              }}
              data-testid="button-confirm-delete-coborrower-disability"
              className="bg-red-600 hover:bg-red-700"
            >
              Remove
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>

      {/* Delete Co-Borrower Other Income Confirmation Dialog */}
      <AlertDialog open={deleteCoBorrowerOtherDialog.isOpen} onOpenChange={(open) => !open && setDeleteCoBorrowerOtherDialog({ isOpen: false })}>
        <AlertDialogContent data-testid="dialog-delete-coborrower-other">
          <AlertDialogHeader>
            <AlertDialogTitle>Remove Co-Borrower Other Income</AlertDialogTitle>
            <AlertDialogDescription>
              Are you sure you want to remove the Co-Borrower Other income section? This will clear all entered data and hide the section. This action cannot be undone.
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel 
              onClick={() => setDeleteCoBorrowerOtherDialog({ isOpen: false })}
              data-testid="button-cancel-delete-coborrower-other"
            >
              Cancel
            </AlertDialogCancel>
            <AlertDialogAction 
              onClick={() => {
                // Clear the income type checkbox and close the section
                form.setValue('coBorrowerIncome.incomeTypes.other', false);
                form.setValue('coBorrowerIncome.otherIncomeDescription', '');
                form.setValue('coBorrowerIncome.otherIncomeMonthlyAmount', '');
                setIsCoBorrowerOtherIncomeOpen(false);
                setDeleteCoBorrowerOtherDialog({ isOpen: false });
              }}
              data-testid="button-confirm-delete-coborrower-other"
              className="bg-red-600 hover:bg-red-700"
            >
              Remove
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>

      {/* Delete Current Third Loan Card Confirmation Dialog */}
      <AlertDialog open={deleteCurrentThirdLoanDialog.isOpen} onOpenChange={(open) => !open && setDeleteCurrentThirdLoanDialog({ isOpen: false, cardId: '' })}>
        <AlertDialogContent data-testid="dialog-delete-current-third-loan">
          <AlertDialogHeader>
            <AlertDialogTitle>Remove Current Third Loan</AlertDialogTitle>
            <AlertDialogDescription>
              Are you sure you want to remove this Current Third Loan card? This will clear all entered data for this loan. This action cannot be undone.
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel 
              onClick={() => setDeleteCurrentThirdLoanDialog({ isOpen: false, cardId: '' })}
              data-testid="button-cancel-delete-current-third-loan"
            >
              Cancel
            </AlertDialogCancel>
            <AlertDialogAction 
              onClick={() => removeCurrentThirdLoanCard(deleteCurrentThirdLoanDialog.cardId)}
              data-testid="button-confirm-delete-current-third-loan"
              className="bg-red-600 hover:bg-red-700"
            >
              Remove
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>

      {/* Current Loan 1 Preview Modal */}
      <Dialog open={isCurrentLoanPreviewOpen} onOpenChange={setIsCurrentLoanPreviewOpen}>
        <DialogContent className="max-w-6xl max-h-[90vh] overflow-y-auto" data-testid="dialog-current-loan-preview">
          <DialogHeader>
            <DialogTitle>Current Primary Loan</DialogTitle>
          </DialogHeader>
          <CurrentLoanPreview control={form.control} />
          <DialogFooter>
            <Button
              onClick={() => setIsCurrentLoanPreviewOpen(false)}
              data-testid="button-current-loan-preview-close"
            >
              Close
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      {/* Current Loan 2 Preview Modal */}
      <Dialog open={isCurrentSecondLoanPreviewOpen} onOpenChange={setIsCurrentSecondLoanPreviewOpen}>
        <DialogContent className="max-w-6xl max-h-[90vh] overflow-y-auto" data-testid="dialog-current-second-loan-preview">
          <DialogHeader>
            <DialogTitle>Current Second Loan</DialogTitle>
          </DialogHeader>
          <CurrentSecondLoanPreview control={form.control} />
          <DialogFooter>
            <Button
              onClick={() => setIsCurrentSecondLoanPreviewOpen(false)}
              data-testid="button-current-second-loan-preview-close"
            >
              Close
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      {/* Current Third Loan Preview Modal */}
      <Dialog open={isCurrentThirdLoanPreviewOpen} onOpenChange={setIsCurrentThirdLoanPreviewOpen}>
        <DialogContent className="max-w-6xl max-h-[90vh] overflow-y-auto" data-testid="dialog-current-third-loan-preview">
          <DialogHeader>
            <DialogTitle>Current Third Loan</DialogTitle>
          </DialogHeader>
          <CurrentThirdLoanPreview control={form.control} />
          <DialogFooter>
            <Button
              onClick={() => setIsCurrentThirdLoanPreviewOpen(false)}
              data-testid="button-current-third-loan-preview-close"
            >
              Close
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      {/* Additional Loan Preview Modal - Generic for any additional loan */}
      {additionalLoanPreview.isOpen && additionalLoanPreview.loanId && (
        <Dialog open={additionalLoanPreview.isOpen} onOpenChange={(open) => setAdditionalLoanPreview({isOpen: open, loanId: open ? additionalLoanPreview.loanId : null})}>
          <DialogContent className="max-w-6xl max-h-[90vh] overflow-y-auto" data-testid={`dialog-additional-loan-preview-${additionalLoanPreview.loanId}`}>
            <DialogHeader>
              <DialogTitle>
                {additionalLoanPreview.loanId ? 
                  `${additionalLoanPreview.loanId.charAt(0).toUpperCase() + additionalLoanPreview.loanId.slice(1)} Details` : 
                  'Additional Loan Details'
                }
              </DialogTitle>
            </DialogHeader>
            <AdditionalLoanPreview control={form.control} loanId={additionalLoanPreview.loanId} />
            <DialogFooter>
              <Button
                onClick={() => setAdditionalLoanPreview({isOpen: false, loanId: null})}
                data-testid={`button-additional-loan-preview-close-${additionalLoanPreview.loanId}`}
              >
                Close
              </Button>
            </DialogFooter>
          </DialogContent>
        </Dialog>
      )}

      {/* Borrower Credit Scores Dialog */}
      <Dialog open={borrowerCreditScoresDialog.isOpen} onOpenChange={(open) => setBorrowerCreditScoresDialog(prev => ({ ...prev, isOpen: open }))}>
        <DialogContent className="max-w-xs" data-testid="dialog-borrower-credit-scores">
          <DialogHeader>
            <DialogTitle>Borrower Credit Scores</DialogTitle>
          </DialogHeader>
          <div className="space-y-6">
            <div className="space-y-2 mt-6">
              <Label htmlFor="borrower-mid-fico" className="text-lg">Borrower Mid FICO</Label>
              <div 
                className="text-4xl font-bold text-blue-900 py-2"
                data-testid="display-borrower-mid-fico"
              >
                {borrowerCreditScoresDialog.midFico || "000"}
              </div>
            </div>
            <div className="space-y-2">
              <Label htmlFor="experian-score" className="text-green-600 font-medium text-lg">Experian</Label>
              <Input
                id="experian-score"
                value={borrowerCreditScoresDialog.experian}
                onChange={(e) => {
                  // Only allow numeric characters
                  const numericValue = e.target.value.replace(/[^0-9]/g, '');
                  const newValue = numericValue.slice(0, 3);
                  setBorrowerCreditScoresDialog(prev => {
                    const updated = { ...prev, experian: newValue };
                    // Calculate middle value automatically
                    const scores = [
                      parseInt(newValue) || 0,
                      parseInt(updated.equifax) || 0,
                      parseInt(updated.transunion) || 0
                    ].filter(score => score > 0).sort((a, b) => a - b);
                    
                    if (scores.length === 3) {
                      updated.midFico = scores[1].toString(); // Middle value
                    } else if (scores.length === 2) {
                      updated.midFico = 'Pending'; // Show "Pending" when only 2 fields filled
                    } else if (scores.length === 1) {
                      updated.midFico = scores[0].toString(); // Only one score
                    } else {
                      updated.midFico = '';
                    }
                    
                    return updated;
                  });
                }}
                placeholder="000"
                maxLength={3}
                pattern="[0-9]{3}"
                data-testid="input-experian-score"
              />
            </div>
            <div className="space-y-2">
              <Label htmlFor="equifax-score" className="text-purple-600 font-medium text-lg">Equifax</Label>
              <Input
                id="equifax-score"
                value={borrowerCreditScoresDialog.equifax}
                onChange={(e) => {
                  // Only allow numeric characters
                  const numericValue = e.target.value.replace(/[^0-9]/g, '');
                  const newValue = numericValue.slice(0, 3);
                  setBorrowerCreditScoresDialog(prev => {
                    const updated = { ...prev, equifax: newValue };
                    // Calculate middle value automatically
                    const scores = [
                      parseInt(updated.experian) || 0,
                      parseInt(newValue) || 0,
                      parseInt(updated.transunion) || 0
                    ].filter(score => score > 0).sort((a, b) => a - b);
                    
                    if (scores.length === 3) {
                      updated.midFico = scores[1].toString(); // Middle value
                    } else if (scores.length === 2) {
                      updated.midFico = 'Pending'; // Show "Pending" when only 2 fields filled
                    } else if (scores.length === 1) {
                      updated.midFico = scores[0].toString(); // Only one score
                    } else {
                      updated.midFico = '';
                    }
                    
                    return updated;
                  });
                }}
                placeholder="000"
                maxLength={3}
                pattern="[0-9]{3}"
                data-testid="input-equifax-score"
              />
            </div>
            <div className="space-y-2">
              <Label htmlFor="transunion-score" className="text-orange-600 font-medium text-lg">Transunion</Label>
              <Input
                id="transunion-score"
                value={borrowerCreditScoresDialog.transunion}
                onChange={(e) => {
                  // Only allow numeric characters
                  const numericValue = e.target.value.replace(/[^0-9]/g, '');
                  const newValue = numericValue.slice(0, 3);
                  setBorrowerCreditScoresDialog(prev => {
                    const updated = { ...prev, transunion: newValue };
                    // Calculate middle value automatically
                    const scores = [
                      parseInt(updated.experian) || 0,
                      parseInt(updated.equifax) || 0,
                      parseInt(newValue) || 0
                    ].filter(score => score > 0).sort((a, b) => a - b);
                    
                    if (scores.length === 3) {
                      updated.midFico = scores[1].toString(); // Middle value
                    } else if (scores.length === 2) {
                      updated.midFico = 'Pending'; // Show "Pending" when only 2 fields filled
                    } else if (scores.length === 1) {
                      updated.midFico = scores[0].toString(); // Only one score
                    } else {
                      updated.midFico = '';
                    }
                    
                    return updated;
                  });
                }}
                placeholder="000"
                maxLength={3}
                pattern="[0-9]{3}"
                data-testid="input-transunion-score"
              />
            </div>
          </div>
          <DialogFooter>
            <Button
              variant="outline"
              onClick={() => setBorrowerCreditScoresDialog(prev => ({ ...prev, isOpen: false }))}
              data-testid="button-cancel-credit-scores"
            >
              Cancel
            </Button>
            <Button
              onClick={() => {
                // Here you can handle saving the scores to the form or wherever needed
                setBorrowerCreditScoresDialog(prev => ({ ...prev, isOpen: false }));
              }}
              data-testid="button-save-credit-scores"
            >
              Save
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      {/* Co-Borrower Credit Scores Dialog */}
      <Dialog open={coBorrowerCreditScoresDialog.isOpen} onOpenChange={(open) => setCoBorrowerCreditScoresDialog(prev => ({ ...prev, isOpen: open }))}>
        <DialogContent className="max-w-xs" data-testid="dialog-co-borrower-credit-scores">
          <DialogHeader>
            <DialogTitle>Co-Borrower Credit Scores</DialogTitle>
          </DialogHeader>
          <div className="space-y-6">
            <div className="space-y-2 mt-6">
              <Label htmlFor="co-borrower-mid-fico" className="text-lg">Co-Borrower Mid FICO</Label>
              <div 
                className="text-4xl font-bold text-blue-900 py-2"
                data-testid="display-co-borrower-mid-fico"
              >
                {coBorrowerCreditScoresDialog.midFico || "000"}
              </div>
            </div>
            <div className="space-y-2">
              <Label htmlFor="co-experian-score" className="text-green-600 font-medium text-lg">Experian</Label>
              <Input
                id="co-experian-score"
                value={coBorrowerCreditScoresDialog.experian}
                onChange={(e) => {
                  // Only allow numeric characters
                  const numericValue = e.target.value.replace(/[^0-9]/g, '');
                  const newValue = numericValue.slice(0, 3);
                  setCoBorrowerCreditScoresDialog(prev => {
                    const updated = { ...prev, experian: newValue };
                    // Calculate middle value automatically
                    const scores = [
                      parseInt(newValue) || 0,
                      parseInt(updated.equifax) || 0,
                      parseInt(updated.transunion) || 0
                    ].filter(score => score > 0).sort((a, b) => a - b);
                    
                    if (scores.length === 3) {
                      updated.midFico = scores[1].toString(); // Middle value
                    } else if (scores.length === 2) {
                      updated.midFico = 'Pending'; // Show "Pending" when only 2 fields filled
                    } else if (scores.length === 1) {
                      updated.midFico = scores[0].toString(); // Only one score
                    } else {
                      updated.midFico = '';
                    }
                    
                    return updated;
                  });
                }}
                placeholder="000"
                maxLength={3}
                pattern="[0-9]{3}"
                data-testid="input-co-experian-score"
              />
            </div>
            <div className="space-y-2">
              <Label htmlFor="co-equifax-score" className="text-purple-600 font-medium text-lg">Equifax</Label>
              <Input
                id="co-equifax-score"
                value={coBorrowerCreditScoresDialog.equifax}
                onChange={(e) => {
                  // Only allow numeric characters
                  const numericValue = e.target.value.replace(/[^0-9]/g, '');
                  const newValue = numericValue.slice(0, 3);
                  setCoBorrowerCreditScoresDialog(prev => {
                    const updated = { ...prev, equifax: newValue };
                    // Calculate middle value automatically
                    const scores = [
                      parseInt(updated.experian) || 0,
                      parseInt(newValue) || 0,
                      parseInt(updated.transunion) || 0
                    ].filter(score => score > 0).sort((a, b) => a - b);
                    
                    if (scores.length === 3) {
                      updated.midFico = scores[1].toString(); // Middle value
                    } else if (scores.length === 2) {
                      updated.midFico = 'Pending'; // Show "Pending" when only 2 fields filled
                    } else if (scores.length === 1) {
                      updated.midFico = scores[0].toString(); // Only one score
                    } else {
                      updated.midFico = '';
                    }
                    
                    return updated;
                  });
                }}
                placeholder="000"
                maxLength={3}
                pattern="[0-9]{3}"
                data-testid="input-co-equifax-score"
              />
            </div>
            <div className="space-y-2">
              <Label htmlFor="co-transunion-score" className="text-orange-600 font-medium text-lg">Transunion</Label>
              <Input
                id="co-transunion-score"
                value={coBorrowerCreditScoresDialog.transunion}
                onChange={(e) => {
                  // Only allow numeric characters
                  const numericValue = e.target.value.replace(/[^0-9]/g, '');
                  const newValue = numericValue.slice(0, 3);
                  setCoBorrowerCreditScoresDialog(prev => {
                    const updated = { ...prev, transunion: newValue };
                    // Calculate middle value automatically
                    const scores = [
                      parseInt(updated.experian) || 0,
                      parseInt(updated.equifax) || 0,
                      parseInt(newValue) || 0
                    ].filter(score => score > 0).sort((a, b) => a - b);
                    
                    if (scores.length === 3) {
                      updated.midFico = scores[1].toString(); // Middle value
                    } else if (scores.length === 2) {
                      updated.midFico = 'Pending'; // Show "Pending" when only 2 fields filled
                    } else if (scores.length === 1) {
                      updated.midFico = scores[0].toString(); // Only one score
                    } else {
                      updated.midFico = '';
                    }
                    
                    return updated;
                  });
                }}
                placeholder="000"
                maxLength={3}
                pattern="[0-9]{3}"
                data-testid="input-co-transunion-score"
              />
            </div>
          </div>
          <DialogFooter>
            <Button
              variant="outline"
              onClick={() => setCoBorrowerCreditScoresDialog(prev => ({ ...prev, isOpen: false }))}
              data-testid="button-cancel-co-credit-scores"
            >
              Cancel
            </Button>
            <Button
              onClick={() => {
                // Here you can handle saving the scores to the form or wherever needed
                setCoBorrowerCreditScoresDialog(prev => ({ ...prev, isOpen: false }));
              }}
              data-testid="button-save-co-credit-scores"
            >
              Save
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      {/* Co-Borrower Warning Dialog */}
      <Dialog open={coBorrowerWarningDialog} onOpenChange={setCoBorrowerWarningDialog}>
        <DialogContent className="max-w-sm" data-testid="dialog-co-borrower-warning">
          <DialogHeader>
            <DialogTitle className="text-center">Co-Borrower Required</DialogTitle>
          </DialogHeader>
          <div className="py-4">
            <p className="text-center text-gray-600">
              Please add the Co-Borrower to the application first.
            </p>
          </div>
          <DialogFooter className="flex justify-center">
            <Button
              onClick={() => setCoBorrowerWarningDialog(false)}
              data-testid="button-close-co-borrower-warning"
              className="w-full"
            >
              OK
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      {/* Residence Information Dialog */}
      <Dialog open={isResidenceInfoDialogOpen} onOpenChange={setIsResidenceInfoDialogOpen}>
        <DialogContent className="max-w-md" data-testid="dialog-residence-info">
          <DialogHeader>
            <DialogTitle>Residence Information</DialogTitle>
            <DialogDescription>
              Enter additional information about this residence.
            </DialogDescription>
          </DialogHeader>
          <div className="py-4">
            <Textarea
              value={residenceInfoText}
              onChange={(e) => setResidenceInfoText(e.target.value)}
              placeholder=""
              className="min-h-[150px] resize-none"
              data-testid="textarea-residence-info"
            />
          </div>
          <DialogFooter>
            <Button
              variant="outline"
              onClick={() => {
                setIsResidenceInfoDialogOpen(false);
                setResidenceInfoText('');
                setActiveResidenceSection(null);
              }}
              data-testid="button-cancel-residence-info"
            >
              Cancel
            </Button>
            <Button
              onClick={() => {
                // Save the text to the appropriate form field based on activeResidenceSection
                if (activeResidenceSection === 'borrower-current') {
                  form.setValue('borrower.residenceAddress.additionalInfo', residenceInfoText);
                } else if (activeResidenceSection === 'borrower-prior') {
                  form.setValue('borrower.priorResidenceAddress.additionalInfo', residenceInfoText);
                } else if (activeResidenceSection === 'borrower-prior-2') {
                  form.setValue('borrower.priorResidenceAddress2.additionalInfo', residenceInfoText);
                } else if (activeResidenceSection === 'coborrower-current') {
                  form.setValue('coBorrower.residenceAddress.additionalInfo', residenceInfoText);
                } else if (activeResidenceSection === 'coborrower-prior') {
                  form.setValue('coBorrower.priorResidenceAddress.additionalInfo', residenceInfoText);
                } else if (activeResidenceSection === 'coborrower-prior-2') {
                  form.setValue('coBorrower.priorResidenceAddress2.additionalInfo', residenceInfoText);
                }
                setIsResidenceInfoDialogOpen(false);
                setActiveResidenceSection(null);
              }}
              data-testid="button-save-residence-info"
            >
              Save
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      {/* Rental Residence Information Dialog */}
      <Dialog open={isRentalInfoDialogOpen} onOpenChange={setIsRentalInfoDialogOpen}>
        <DialogContent className="max-w-lg" data-testid="dialog-rental-info">
          <DialogHeader>
            <DialogTitle>Rental Residence Information</DialogTitle>
          </DialogHeader>
          <div className="py-4 space-y-4">
            <div className="space-y-2">
              <Label htmlFor="rental-landlord-name">Landlord / Company Name</Label>
              <Input
                id="rental-landlord-name"
                value={rentalInfoData.landlordName}
                onChange={(e) => setRentalInfoData(prev => ({ ...prev, landlordName: e.target.value }))}
                placeholder=""
                data-testid="input-rental-landlord-name"
              />
            </div>
            <div className="space-y-2">
              <Label htmlFor="rental-email">Email</Label>
              <Input
                id="rental-email"
                type="email"
                value={rentalInfoData.email}
                onChange={(e) => setRentalInfoData(prev => ({ ...prev, email: e.target.value }))}
                placeholder=""
                data-testid="input-rental-email"
              />
            </div>
            <div className="space-y-2">
              <Label htmlFor="rental-phone">Phone</Label>
              <Input
                id="rental-phone"
                value={rentalInfoData.phone}
                onChange={(e) => {
                  const value = e.target.value.replace(/\D/g, ''); // Remove non-digits
                  let formatted = '';
                  if (value.length > 0) {
                    formatted = value.substring(0, 3);
                    if (value.length > 3) {
                      formatted += '-' + value.substring(3, 6);
                      if (value.length > 6) {
                        formatted += '-' + value.substring(6, 10);
                      }
                    }
                  }
                  setRentalInfoData(prev => ({ ...prev, phone: formatted }));
                }}
                placeholder=""
                maxLength={12}
                data-testid="input-rental-phone"
              />
            </div>
            <div className="space-y-2">
              <Label htmlFor="rental-property-type">Property Type</Label>
              <Select
                value={rentalInfoData.propertyType || 'Select'}
                onValueChange={(value) => setRentalInfoData(prev => ({ ...prev, propertyType: value }))}
              >
                <SelectTrigger data-testid="select-rental-property-type">
                  <SelectValue placeholder="Select" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="Select">Select</SelectItem>
                  <SelectItem value="Apartment">Apartment</SelectItem>
                  <SelectItem value="Townhouse">Townhouse</SelectItem>
                  <SelectItem value="Condo">Condo</SelectItem>
                  <SelectItem value="Single Family">Single Family</SelectItem>
                  <SelectItem value="Duplex">Duplex</SelectItem>
                  <SelectItem value="Multi-Family Unit">Multi-Family Unit</SelectItem>
                  <SelectItem value="Other">Other</SelectItem>
                </SelectContent>
              </Select>
            </div>
            <div className="space-y-2">
              <Label htmlFor="rental-monthly-rent">Monthly Rent Amount</Label>
              <Input
                id="rental-monthly-rent"
                value={rentalInfoData.monthlyRent}
                onChange={(e) => {
                  const value = e.target.value.replace(/[^\d.]/g, ''); // Only allow digits and decimal
                  setRentalInfoData(prev => ({ ...prev, monthlyRent: value }));
                }}
                onBlur={(e) => {
                  const num = parseFloat(rentalInfoData.monthlyRent) || 0;
                  const formatted = num > 0 ? `$${num.toLocaleString('en-US', { minimumFractionDigits: 0, maximumFractionDigits: 0 })}` : '';
                  setRentalInfoData(prev => ({ ...prev, monthlyRent: formatted }));
                }}
                onFocus={(e) => {
                  const raw = rentalInfoData.monthlyRent.replace(/[^\d.]/g, '');
                  setRentalInfoData(prev => ({ ...prev, monthlyRent: raw }));
                }}
                placeholder=""
                data-testid="input-rental-monthly-rent"
              />
            </div>
            <div className="space-y-2">
              <Label htmlFor="rental-notes">Notes</Label>
              <Textarea
                id="rental-notes"
                value={rentalInfoData.notes}
                onChange={(e) => setRentalInfoData(prev => ({ ...prev, notes: e.target.value }))}
                placeholder=""
                className="min-h-[100px] resize-none"
                data-testid="textarea-rental-notes"
              />
            </div>
          </div>
          <DialogFooter>
            <Button
              variant="outline"
              onClick={() => {
                setIsRentalInfoDialogOpen(false);
                setRentalInfoData({
                  landlordName: '',
                  email: '',
                  phone: '',
                  propertyType: '',
                  monthlyRent: '',
                  notes: ''
                });
                setActiveRentalSection(null);
              }}
              data-testid="button-cancel-rental-info"
            >
              Cancel
            </Button>
            <Button
              onClick={() => {
                // Save the rental info to the appropriate form field based on activeRentalSection
                if (activeRentalSection === 'borrower-current') {
                  form.setValue('borrower.residenceAddress.rentalInfo', rentalInfoData);
                } else if (activeRentalSection === 'borrower-prior') {
                  form.setValue('borrower.priorResidenceAddress.rentalInfo', rentalInfoData);
                } else if (activeRentalSection === 'borrower-prior-2') {
                  form.setValue('borrower.priorResidenceAddress2.rentalInfo', rentalInfoData);
                } else if (activeRentalSection === 'coborrower-current') {
                  form.setValue('coBorrower.residenceAddress.rentalInfo', rentalInfoData);
                } else if (activeRentalSection === 'coborrower-prior') {
                  form.setValue('coBorrower.priorResidenceAddress.rentalInfo', rentalInfoData);
                } else if (activeRentalSection === 'coborrower-prior-2') {
                  form.setValue('coBorrower.priorResidenceAddress2.rentalInfo', rentalInfoData);
                }
                setIsRentalInfoDialogOpen(false);
                setActiveRentalSection(null);
              }}
              data-testid="button-save-rental-info"
            >
              Save
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      </div>
    </TooltipProvider>
  );
}
